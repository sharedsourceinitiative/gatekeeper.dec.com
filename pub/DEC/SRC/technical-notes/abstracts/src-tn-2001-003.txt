<h1>
"Thread-Modular Verification For Shared-Memory Programs"</h1>
<hr>
<h2>
Cormac Flanagan, Stephen N. Freund, Shaz Qadeer</h2>
<p>
Note #2001-003, November 19, 2001.
<p>

Ensuring the reliability of multithreaded software systems is
difficult due to the interaction between threads.  This paper
describes the design and implementation of a static checker for such
systems. To avoid considering all possible thread interleavings, the
checker uses assume-guarantee reasoning, and relies on the programmer
to specify an environment assumption that constrains the
interaction between threads.  Using this environment assumption, the
checker reduces the verification of the original multithreaded program
to the verification of several sequential programs, one for each
thread.  These sequential programs are subsequently analyzed using
extended static checking techniques (based on verification conditions
and automatic theorem proving).  Experience indicates that the checker
is capable of handling a range of synchronization disciplines.  In
addition, the required environment assumptions are simple and
intuitive for common synchronization idioms.

