"Should Your Specification Language Be Typed?"
Leslie Lamport and Lawrence C. Paulson
Report #147, May 1, 1997. Modified April 1, 1998.

Most specification languages have a type system.  Type systems are
hard to get right, and getting them wrong can lead to inconsistencies.
Set theory can serve as the basis for a specification language without
types.  This possibility, which has been widely overlooked, offers
many advantages.  Untyped set theory is simple and is more flexible
than any simple typed formalism.  Polymorphism, overloading, and
subtyping can make a type system more powerful, but at the cost of
increased complexity, and such refinements can never attain the
flexibility of having no types at all.  Typed formalisms have
advantages too, stemming from the power of mechanical type checking.
While types serve little purpose in hand proofs, they do help with
mechanized proofs.  In the absence of verification, type checking can
catch errors in specifications.  It may be possible to have the best
of both worlds by adding typing annotations to an untyped
specification language.
   
We consider only specification languages, not programming languages.

