From mogul  Wed Nov 15 11:06:17 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA14546; Wed, 15 Nov 89 11:06:17 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8911151906.AA14546@acetes.pa.dec.com>
Date: 15 Nov 1989 1106-PST (Wednesday)
To: mtudwg
Cc: 
Subject: test

if you receive this there is something wrong (yes, you should NOT
receive this message!)

From mogul  Fri Nov 17 15:25:47 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA29366; Fri, 17 Nov 89 15:25:47 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8911172325.AA29366@acetes.pa.dec.com>
Date: 17 Nov 1989 1525-PST (Friday)
To: mtudwg
Cc: 
Subject: Working group meeting

Based on discussions I've had with Steve Deering, I would like to
get votes on a possible date.  Our current plan is to hold the
meeting at DECWRL (my lab, since it's the easiest way to get
hold of a conference room) which is in downtown Palo Alto,
California.  The MTU Discovery meeting would take up the morning;
the Gateway Discovery meeting would be held in the afternoon.

Our first choice date is Monday, December 11th.  Our
second choice date is Tuesday, December 12th.  Our third
choice date is any other day that week.

If anyone has strong feelings (of the form "I can't make
day X but I would come if it were held day Y") please let me
know ASAP.  If you don't plan to come regardless of the date,
there's no need to reply.  If you would come on either date,
let me know so I can estimate a head count.

Once we have a meeting scheduled, I will start badgering people
to discuss which proposed protocol(s) are right.  Things have
been pretty quiet up to now.

-Jeff

From deering@Pescadero.Stanford.EDU  Tue Nov 21 17:16:51 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA25675; Tue, 21 Nov 89 17:16:51 PST
Received: by decwrl.dec.com; id AA14689; Tue, 21 Nov 89 17:16:21 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA02945; Tue, 21 Nov 89 17:11:21 PDT
Date: 21 Nov 1989 16:49-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: * Discovery Working Groups -- Meeting Date and Place
To: gw-discovery@gregorio.stanford.edu, mtudwg
Cc: ietf@venera.isi.edu
Message-Id: <89/11/21 1649.045@pescadero.stanford.edu>

There will be a meeting of the IETF Gateway Discovery and MTU Discovery
working groups on TUESDAY, DECEMBER 12 at the DEC Western Research Lab
in Palo Alto.

	MTU Discovery:  9 am to Noon
	GW  Discovery:  1 pm to 5 pm (possibly reconvening after supper,
				      if that seems worthwhile)

If you plan to attend either meeting and have not already done so,
please send send a message saying so, to me (for the gateway meeting)
and/or Jeff Mogul, mogul@decwrl.dec.com (for the MTU meeting).

Jeff will be sending out directions for finding DEC WRL to the
gw-discovery and mtudwg mailing lists.  If you will be driving
and needing a place to park, please let Jeff know.

Steve Deering

From sytek!rfox@Sun.COM  Wed Nov 22 18:09:59 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA04191; Wed, 22 Nov 89 18:09:59 PST
Received: by decwrl.dec.com; id AA12291; Wed, 22 Nov 89 18:09:30 -0800
Received: from sun.Sun.COM (sun-bb.Corp.Sun.COM) by Sun.COM (4.1/SMI-4.1)
	id AA02640; Wed, 22 Nov 89 18:09:19 PST
Received: from sytek.UUCP by sun.Sun.COM (4.1/SMI-4.1)
	id AA01134; Wed, 22 Nov 89 17:37:25 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA14505; Wed, 22 Nov 89 16:23:40 PST
Date: Wed, 22 Nov 89 16:23:40 PST
From: sytek!rfox@Sun.COM (Rich Fox)
Message-Id: <8911230023.AA14505@sytek.hls.hac.com>
To: mtudwg
Subject: Re: Another proposal to think about



It seems that at this point there are 2 proposed solutions to the MTU discovery
problem.

  1. RFC 1063
  2. Steve Deering's idea of using a bit in IP and a new ICMP message.

After talking with Jeff it seems that there are enough problems with 1 that
we might concentrate on solution 2.

After looking at the draft paper for #2 I have the following concerns:

  1. I really do not think that we should be changing the meaning of the IP 
     header for such a feature. My understanding is that powers above won't
     allow the IP header to change, except possibly for something absolutely
     ness. I am not sure that this feature would qualify.

  2. I feel that this is an interm solution until a proper solution is devised, 
     or this solution proves to be the best solution.

Addressing the concerns I think that using the RF bit is possibly not required
for this solution to work. In fact, I am not sure that the ICMP message is
actually required (it might be a nice thing to have in any case).
Lets look at a solution that does not use the RF bit, the following
scenarios should exist (I have only assumed TCP as the transport protocol, this
may not hold for all transport protocols):

   The TCP's send in the SYN and SYN-ACK packets MSS options that reflect the
   known MTU of their connected networks (just as they should already*). The
   smaller of the 2 MSS's will be selected as the MSS to be used in the 
   connection. This gives us an upper bound on the MTU but may still be too
   large. There may be a network in between the 2 that cannot support the
   agreed upon MTU. Thus, the following scenarios may take place.

* see scenario 2.

   Scenario 1:  Both stations have implemented the MTU discovery feature:
	1. Station A sends to station B a packet that will be fragmented.
	2. Station B receives the packet and informs the transport layer
	   what the size of fragment 0 is (Steve's paper suggests that this
	   feature is needed anyways).
	3. Station B then sends a packet back to station A with a new MSS 
	   option that resembles the size of fragment 0.
	4. If the packet with the new MSS is lost, no problem. The next time
	   Station B receives a fragmented packet it will send out another
	   MSS option. It will do this until a packet finally reaches Station A.

	Thus we see, that as long as IP supplies the transport layer with some
	information about the size of fragment 0 this solution works fine to
	a point (there are some issues that I will hit upon later).


   Scenario 2: Only one station has implemented the MTU discovery feature:
	
	This scenario will be the same as in scenario 1 except only the host
	that has implemented this feature will be able (or should I say
	have the smarts) to send the MSS in non-SYN packet. This has the 
	possible effect that if the host sending the data is the host with
	the smarts and the host receiving the data is only sending ACKS then
	the sender may not find out about the fragmentation that is going on.
	I do not feel that this will be a problem since typically if a host
	is communicating to a host that is not on the directly network it
	chooses a small MSS to be safe. I feel that this will continue such
	that the host that does not implement the discovery feature will always
	option for the smallest MTU (one that is known to be safe) and 
	fragmentation should never occur.


This solution has 1 major problem. What happens if a link comes back up during
the lifetime of a TCP connection which now increases the potential MTU of
that connection? How will the connection find out about this increase?
According to Steve's paper this really isn't a major problem at all (and I
agree). If this is an important issue then I feel that we can build a timer
in some place to try and renegotiate the MSS. I haven't specified any details
of the timer since I don't think its essential for this note.


What this solution tries to do is build upon the knowledge gained from the
previous 2 solutions while trying to minizing the required changes to either
IP or the transport protocols. I stated that this might be an interm solution
because I am inclined to think that the routing protocols should handle 
this problem. Before I comment on that any more I need to think about it. At 
this point the solution in this paper I think (after some revision) might do
the trick.

Sorry if this note is a little haphazard, but its getting late and I am trying
to get out of here since I have a long drive ahead of me for Turkey day.
Talk to you all next week.

rich

From philipp@gipsi.gipsi.fr  Thu Nov 23 06:29:15 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09431; Thu, 23 Nov 89 06:29:15 PST
Received: by decwrl.dec.com; id AA08616; Thu, 23 Nov 89 06:28:44 -0800
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA16642; Thu, 23 Nov 89 15:26:44 +0100 (MET)
Received: by gipsi.gipsi.fr; Thu, 23 Nov 89 15:27:08 -0100 (MET)
Date: Thu, 23 Nov 89 15:27:08 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8911231427.AA01479@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: rfox%sytek@sun.com
Subject: Re: Another proposal to think about
Cc: MTU Discovery <mtudwg>

     Scenario 1:  Both stations have implemented the MTU discovery feature:
  	1. Station A sends to station B a packet that will be fragmented.
  	2. Station B receives the packet and informs the transport layer
  	   what the size of fragment 0 is (Steve's paper suggests that this
  	   feature is needed anyways).
  	3. Station B then sends a packet back to station A with a new MSS 
  	   option that resembles the size of fragment 0.
  	4. If the packet with the new MSS is lost, no problem. The next time
  	   Station B receives a fragmented packet it will send out another
  	   MSS option. It will do this until a packet finally reaches Station A.

Just one comment here -- if the packet was a jumbogram and more than
2 derived packets resulted, I think that any fragment with the MF-bit
set (ie. all but the tail) should be usable, since they might arrive
out of order.

-Philip

From smb@hector.att.com  Thu Nov 23 07:03:31 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09530; Thu, 23 Nov 89 07:03:31 PST
Received: by decwrl.dec.com; id AA11038; Thu, 23 Nov 89 07:03:01 -0800
From: smb@hector.att.com
Message-Id: <8911231457.AA22278@hector.homer.nj.att.com>
Received: by hector.homer.nj.att.com id AA22278; Thu, 23 Nov 89 09:57:44 EST
To: MTU Discovery <mtudwg>
Subject: Re: Another proposal to think about
Date: Thu, 23 Nov 89 09:57:43 EST
>From: hector!smb

If there are objections to using a bit in the IP header for the ``Report
Fragmentation'' flag, what about using an IP option?  Unlike the
Mogul/Kent/Partridge/McCloghrie option, this would be end-to-end; only
the receiving host would act on it.  The semantics would be the same
as the Deering bit.  It's a bit harder to implement, since you do not
want to put an option into every packet, and since you'd have to account
for the option length in calculating the true path MTU (and in probing).


		--Steve Bellovin
		smb@ulysses.att.com

From philipp@gipsi.gipsi.fr  Thu Nov 23 07:29:39 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09573; Thu, 23 Nov 89 07:29:39 PST
Received: by decwrl.dec.com; id AA12786; Thu, 23 Nov 89 07:29:08 -0800
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA18345; Thu, 23 Nov 89 16:28:30 +0100 (MET)
Received: by gipsi.gipsi.fr; Thu, 23 Nov 89 16:28:54 -0100 (MET)
Date: Thu, 23 Nov 89 16:28:54 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8911231528.AA01666@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: smb@hector.att.com
Subject: Re: Another proposal to think about
Cc: MTU Discovery <mtudwg>

I think the one of the problems is that most gateways loose
performance on IP options, and that they should be avoided if
possible.

-Philip

From deering@Pescadero.Stanford.EDU  Thu Nov 23 17:02:40 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA10750; Thu, 23 Nov 89 17:02:40 PST
Received: by decwrl.dec.com; id AA14579; Thu, 23 Nov 89 17:00:38 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA01143; Thu, 23 Nov 89 17:00:31 PDT
Date: 23 Nov 1989 15:23-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: Another proposal to think about
To: sytek!rfox@sun.com (Rich Fox)
Cc: mtudwg
Message-Id: <89/11/23 1523.046@pescadero.stanford.edu>
In-Reply-To: sytek!rfox's message of Wed, 22 Nov 89 162340 PST

Rich,

Your proposal to handle MTU discovery at the TCP level sounds
reasonable, except that it only works for TCP.  That means we would
have to make similar changes to any other "packetization" protocols,
such as TP4 or VMTP or NFS, in order for them also to take advantage
of MTU discovery.  Furthermore, not all packetization protocols have
return traffic on which to carry the MTU/MSS information -- there really
are one-way datagram protocols (e.g., sensor reports, video streams, etc.),
and they too may need/want MTU discovery.

Granted, my proposal also requires changes to the local implementation of
each packetization protocol, but not to the actual protocol and packet
formats used over the network.  I imagine it would be fairly difficult
to get ISO to allow "TPDU size" options in TP4 data packets, for example.

If we were to adopt your proposal, I would want to add a new option
to the SYN segments, for requesting the use of MSS options in data
segments.  An old TCP would ignore the request, and the new TCP would
stick to the current strategy (i.e., assume an MTU of 576 or whatever).
That would get rid of the problems with new TCPs sending fragmented
segments to old TCPs, and would avoid confusing any old TCP that is
unprepared to deal with a TCP option in a data segment (in case there
actually are any such TCPs).

Some comments on other points you raised:

>	My understanding is that powers above won't allow the IP header
>	to change, except possibly for something absolutely ness.

What led you to this "understanding", and to which "powers" are you
referring?  Jeff is checking with Jon Postel to see if defining the
currently undefined bit is totally out of the question; I wasn't aware
that he had received an answer yet.  We *are* a working group of the
IETF, whose job it is to recommend improvements to the protocol suite.
Obviously, our recommendations must take into account compatibility with
existing implementations, and in my draft RFC I devote a section to
discussing the compatibility issues.  If there are concerns that I
missed, please post them here.

>	...I am inclined to think that the routing protocols should
>	handle this problem.

I've heard this suggested by others as well.  I'm not sure what you
have in mind, but the usual suggestion is that MTU information should
be exchanged as part of the routing protocol, and that hosts should
be able to get that information by asking a neighboring router, by
eavesdropping on the neighboring routers, or by actively participating
in the routing protocol.

The problem with this is that it is unreasonable to expect any router
to maintain the MTU for all possible destinations.  For example, you
wouldn't expect the internal routers at Stanford to know the path MTU
to reach each subnet at MIT.  They might know the *minimum* MTU or the
*maximum* MTU for MIT, but using the minimum would waste bandwidth when
sending towards a subnet with a larger path MTU, and using the maximum
would cause fragmentation when sending towards a subnet with a smaller
path MTU.

Now, I could imagine extending the routing protocol to support some
sort of "probe" mechanism to learn the MTU of a specific path when
needed by a particular host.  I think my proposal is better because
it uses the actual user data packets as the probe, reducing the
number of required packets and eliminating one RTT delay.

Steve

From deering@Pescadero.Stanford.EDU  Thu Nov 23 17:41:37 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA10842; Thu, 23 Nov 89 17:41:37 PST
Received: by decwrl.dec.com; id AA16032; Thu, 23 Nov 89 17:41:05 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA01196; Thu, 23 Nov 89 17:40:37 PDT
Date: 23 Nov 1989 17:05-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: Another proposal to think about
To: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Cc: mtudwg
Message-Id: <89/11/23 1705.809@pescadero.stanford.edu>
In-Reply-To: Philippe Prindeville's message of Thu, 23 Nov 89 152708 -0100

Philip writes:

>	...if the packet was a jumbogram and more than 2 derived packets
>	resulted, I think that any fragment with the MF-bit set (ie. all
>	but the tail) should be usable [as an indicator of the path MTU],
>	since they might arrive out of order.

No, you don't want to do that.  Imagine this scenario:

     [source]------->[gateway]------->[gateway]------->[destination]
               MTU              MTU              MTU
	       600              400              300


The source sends a 600 byte packet.
At the first gateway, it is fragmented into 400 + 200.
At the second gateway, they become 300 + 100 + 200.

If the 100-byte fragment should arrive first at the destination, it should
*not* be used for MTU determination.  Only fragment 0 should be assumed to
be the size of the path MTU, regardless of the order of reception.  (Think
of the initial fragment being trimmed at various gateways, by arbitrary
amounts, until it equals the path MTU.  The other fragments are just the
"trimmings".)

Even when packets are reordered, you expect fragment 0 to show up
eventually (very soon, actually), so it's OK to wait for fragment 0
for MTU determination.

Steve

From deering@Pescadero.Stanford.EDU  Thu Nov 23 18:29:28 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA10943; Thu, 23 Nov 89 18:29:28 PST
Received: by decwrl.dec.com; id AA19202; Thu, 23 Nov 89 18:28:59 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA01311; Thu, 23 Nov 89 18:28:51 PDT
Date: 23 Nov 1989 18:27-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: type 2 protocols
To: mtudwg
Message-Id: <89/11/23 1742.002@pescadero.stanford.edu>

When Jeff posted my MTU Discovery proposal to this list, he mentioned
that the stuff I wrote on "type 2 protocols" should be ignored.  In
case any of you are puzzling over that, here are some fragments of
a message exchange between Jeff and myself that occurred before the
list was started up, in which I realize the flaws in my reasoning
(and in my attribution of credit for the invention of "my" scheme)...

	From: Steve Deering <deering@pescadero.stanford.edu>

	One thing I neglected to mention in my draft RFC is that a sender
	should never exceed the default or negotiated MSS, that is, it
	should bound its packet size by MIN (assumed-MTU, MSS).

	From: Steve Deering <deering@pescadero.stanford.edu>

	On further reflection, I've realized that TP-4 is not really a
	"type 2" protocol.  The "maximum TPDU size" negotiated at connection
	setup time is just like TCP's MSS.  A sender is always allowed to
	send data packets smaller than the negotiated max, if the path MTU
	is discovered to be smaller.  The only way in which TP-4 is
	significantly different from TCP is that in TP-4, restransmitted
	packets must be identical to their originals (i.e., they cannot be
	shortened if the MTU shrinks between the time the original is sent
	and the time it is retransmitted).  TCP, on the other hand, can send
	fewer bytes in a retransmission, thanks to its use of per-byte
	sequence numbers.

	I wonder if there really are any type 2 protocols?  I could imagine
	a version of NFS, say, that negotiated a "block size" at session-
	establishment time and then insisted that all subsequent data packets
	be exactly that length (i.e., insisted that blocks be read/written
	as a single unit).  Who knows.  Probably not worth us worrying about.

	Also, on re-reading your "Fragmentation Considered Harmful" paper, I
	find that you and Chris actually invented my entire scheme, including
	the special flag in the IP header.  I'll have to upgrade my
	acknowledgement of your work (although, I *think* I came up with my
	scheme independently).  Anyway, I'll take the credit or blame for
	promoting it, since you didn't.

	From: mogul@decwrl.dec.com (Jeffrey Mogul)

	I suspect that it would take some perversity to design a "Type 2"
	protocol that insists on non-shrinking MSS.  NFS, for example,
	allows arbitrary-length block writes even though a decent client
	would probably try really hard to do things in some natural size.
	If NFS required certain block sizes, for example, you would have
	a hard time writing a partial block at the end of a file ... which
	might be OK for RT-11 based servers, but not for Unix.

	From: Steve Deering <deering@pescadero.stanford.edu>

	I was actually thinking of the issue of writing a block in the
	*middle* of a file.  A block-oriented protocol might have no way
	to identify a range of bytes to be written, so that any block
	*except* the last would have to be written as a complete unit.
	I think this is actually the way the V I/O protocol works.  Anyway,
	this is only a problem if there is no way to split the parts of a
	block across multiple packets, which could be viewed basically as
	a bug in the protocol.  I shouldn't be trying to justify type 2
	protocols; if they don't exist, all the better for my MTU discovery
	proposal!

Steve

From deering@Pescadero.Stanford.EDU  Thu Nov 23 23:17:35 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA11720; Thu, 23 Nov 89 23:17:35 PST
Received: by decwrl.dec.com; id AA08703; Thu, 23 Nov 89 23:17:06 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA01850; Thu, 23 Nov 89 23:16:56 PDT
Date: 23 Nov 1989 23:10-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: Another proposal to think about
To: mtudwg
Message-Id: <89/11/23 2310.943@pescadero.stanford.edu>
In-Reply-To: Philippe Prindeville's message of Thu, 23 Nov 89 152708 -0100

[I apologize if some of you receive this twice.  Of the three messages I
posted to mtudwg this afternoon, this one got bounced back to me from
decwrl, leading me to believe that it didn't reach everyone. --Steve]

Philip writes:

>	...if the packet was a jumbogram and more than 2 derived packets
>	resulted, I think that any fragment with the MF-bit set (ie. all
>	but the tail) should be usable [as an indicator of the path MTU],
>	since they might arrive out of order.

No, you don't want to do that.  Imagine this scenario:

     [source]------->[gateway]------->[gateway]------->[destination]
               MTU              MTU              MTU
	       600              400              300


The source sends a 600 byte packet.
At the first gateway, it is fragmented into 400 + 200.
At the second gateway, they become 300 + 100 + 200.

If the 100-byte fragment should arrive first at the destination, it should
*not* be used for MTU determination.  Only fragment 0 should be assumed to
be the size of the path MTU, regardless of the order of reception.  (Think
of the initial fragment being trimmed at various gateways, by arbitrary
amounts, until it equals the path MTU.  The other fragments are just the
"trimmings".)

Even when packets are reordered, you expect fragment 0 to show up
eventually (very soon, actually), so it's OK to wait for fragment 0
for MTU determination.

Steve

From craig@NNSC.NSF.NET  Mon Nov 27 05:25:08 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA05481; Mon, 27 Nov 89 05:25:08 PST
Received: by decwrl.dec.com; id AA07673; Mon, 27 Nov 89 05:25:04 -0800
Message-Id: <8911271325.AA07673@decwrl.dec.com>
To: MTU Discovery <mtudwg>
Subject: problems with RFC 1063
Date: Mon, 27 Nov 89 08:21:09 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


Hi folks:

    I'd like a fuller discussion of what's wrong with RFC 1063.  Not because
I desperately want to see RFC 1063 endorsed, but because I'd like to understand
what is wrong with it.

    The only problem I'm aware of is that, in principle, gateways don't
like options.

    I have two problems with that objection:

	(1) the option doesn't appear very often (I think we suggested
	once every 100 segments -- I've been convinced that we could
	make that number much higher like in the 1,000s).  So you don't
	take an option processing hit too much...

	(2) by doing the occasional option processing, you should save on
	fragmentation processing.....  I don't think we're going to
	continue to see people willing to live with 576 forever...

Craig

From deering@Pescadero.Stanford.EDU  Mon Nov 27 10:26:42 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA07205; Mon, 27 Nov 89 10:26:42 PST
Received: by decwrl.dec.com; id AA16389; Mon, 27 Nov 89 10:26:39 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA00692; Mon, 27 Nov 89 10:25:59 PDT
Date: 27 Nov 1989 10:09-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: problems with RFC 1063
To: Craig Partridge <craig@nnsc.nsf.net>
Cc: mtudwg
Message-Id: <89/11/27 1009.869@pescadero.stanford.edu>
In-Reply-To: Craig Partridge's message of Mon, 27 Nov 89 082109 -0500

>	The only problem [with RFC-1063] I'm aware of is that, in principle,
>	gateways don't like options.

I listed five problems with RFC-1063 in the Introduction section of my
draft RFC, of which gateway dislike for options is only one.  The
existance and significance of those problems is, of course, open to
debate.

Steve

From mogul  Mon Nov 27 15:29:31 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA08318; Mon, 27 Nov 89 15:29:31 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8911272329.AA08318@acetes.pa.dec.com>
Date: 27 Nov 1989 1529-PST (Monday)
To: smb@hector.att.com
Cc: MTU Discovery <mtudwg>
Subject: SMB's proposal: using an IP option for "Report Fragmentation" flag
In-Reply-To: Msg from smb@hector.att.com dated Thu, 23 Nov 89 09:57:43 EST.
             <8911231457.AA22278@hector.homer.nj.att.com>

Steve B's proposal (introduce a new "flag" IP Option that means "Report
Fragmentation") has several nice advantages.  First, it doesn't appear
to require any changes to existing gateway implementations (which are
all required to pass along unknown options, subject to the usual
orthogonal rules about copying on fragmentation).  Second, it doesn't
intrude on any "architecture resource" scarcities (i.e., bits in the IP
header).

Although this may turn out to be the best compromise, there are a few
problems here.  First, as has been noted, option processing is a pain
for gateways.  Even though this option would not actually require
action on the part of the gateway, the gateway would still have to
parse the options list.  True, this option would not be sent on every
packet, but it would be sent far more often than the RFC1063 option.

This leads me to my second point, which is also a complaint about
Steve D's proposal (and indeed, anything based on "report fragmentation").
The problem is that the sender has no way of knowing if it has
discovered the path MTU unless and until it receives an ICMP report.
Perhaps the ICMP reports are being dropped on the return path; or
perhaps the datagrams aren't large enough to be fragmented yet.  Either
way, the sender's algorithm for deciding when to send the option
(or set the RF flag) is going to be complex, and (this is the part
that applies equally to Steve D's method) it might take a while for
the sender to discover the MTU.  Meanwhile, the sender might have filled
the transmission pipe with mobygrams that are all being fragmented.

I think (powers that be permitting) the use of a "no-cost-to-routers"
RF flag in the IP header, which can be set on all the datagrams sent by
a host, is more efficient than the occasional sending of an option.  We
would still have to worry a bit about what a "naive" host/router would
do when it receives packets with this bit set.

The RFC1063 option, while it has its drawbacks, does manage to discover
the MTU as early as possible during the lifetime of a connection; since
many connections (e.g., SMTP) are short, this could be a plus.

-Jeff

From mogul  Mon Nov 27 16:41:48 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA08652; Mon, 27 Nov 89 16:41:48 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8911280041.AA08652@acetes.pa.dec.com>
Date: 27 Nov 1989 1641-PST (Monday)
To: mtudwg
Cc: 
Subject: Rich Fox's proposal

I think I will assert my perogative as chair of this working group
(something that I would rather not do too often) to draw the line
here.  I don't think our charter extends to allow us to meddle with the
design of existing transport protocols (i.e., TCP).  This is distinct
from any suggestions we produce for the implementation of transport
protocols.

In other words, it is OK for us to say "this is information shared by
the TCP module and the IP module in a host's implementation," but it is
not OK for us to say "this is how the protocol defined by RFC793 is to
be changed".  The former presents far smaller issues of compatibility
and bureaucracy.

Clearly, we are going to have to change the IP protocol in some way; at
the very least, by defining a new option if not a new header flag.  I
regard this as within our charter, since it would be absurd to charter
a group such as ours without leaving us this option.  (Chris and I had
suggested an ICMP-only mechanism in our paper, but it has not been
warmly received.)

Having drawn this line, I do not want to entirely discourage proposals
of this kind.  I think they can be a good starting point for thinking
about more feasible approaches, but I would hope that they are made as
such, and that the proposers not be too upset when these proposals are
discarded.

-Jeff

From mogul  Mon Nov 27 18:37:41 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09074; Mon, 27 Nov 89 18:37:41 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8911280237.AA09074@acetes.pa.dec.com>
Date: 27 Nov 1989 1837-PST (Monday)
To: mtudwg
Cc: 
Subject: Comments from a new member of the group

These arrived together with an "add me to the list" request.

------- Forwarded Message

Date: Mon, 27 Nov 89 14:28:20 PST
From: Nuggehalli Pradeep <pradeep@orville.nas.nasa.gov>
To: mogul
Subject: mtudwg mailing list

Jeff,

My name is Nuggehalli Pradeep and I am working on an experimental
implementation of the MTU Discovery approach here at 
NASA Ames Research Center at Moffett Field, California, 
under the supervision of John Lekashman.

For the local implementation here, we plan to use SUN workstations,
running under SunOS 4.0, as end-hosts, and SUN workstations, with 
Gate-D software installed, as gateways, on ethernet segments, with 
different MTUs being specified.

I would like to be added to the "mtudwg" mailing list, and would 
highly appreciate receiving any information on this topic and the
minutes/decisions (as appropriate) of the MTU Discovery Working Group.

By the way, in the MTU RFC (RFC 1063 dated July 1988), on page 10, 
if I am not mistaken, there is a logic error:
the conditions (less than/greater than) in cases (2) and (3) 
seem to be reversed; they should read:

      (2) The Reply MTU option value is greater than the
          current MINMTU and the LastDecreased field plus
          IncreaseInterval is greater than the current time: set the
                              ------------
          ProbeRetry field to LastDecreased plus IncreaseInterval,
          but do not change MINMTU.

      (3) The Reply MTU option value is greater than the
          current MINMTU and the LastDecreased field plus
          IncreaseInterval is less than or equal to the current time: set
                              ---------------------
          the MINMTU field to the new value.

Thank you
--- Pradeep
pradeep@orville.nas.nasa.gov
NASA Ames Research Center M/S 258-6
Moffett Field, CA 94035
(415) 694-4514
------- End of Forwarded Message

From deering@Pescadero.Stanford.EDU  Tue Nov 28 01:14:22 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA10359; Tue, 28 Nov 89 01:14:22 PST
Received: by decwrl.dec.com; id AA10888; Tue, 28 Nov 89 01:14:18 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA03950; Tue, 28 Nov 89 01:14:11 PDT
Date: 27 Nov 1989 23:52-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: SMB's proposal: using an IP option for "Report Fragmentation" flag
To: mogul (Jeffrey Mogul)
Cc: MTU Discovery <mtudwg>
Message-Id: <89/11/27 2352.364@pescadero.stanford.edu>
In-Reply-To: mogul's message of 27 Nov 1989 1529-PST (Monday)

Jeff writes:

>	This leads me to my second point, which is also a complaint about
>	Steve D's proposal (and indeed, anything based on "report
>	fragmentation").  The problem is that the sender has no way of
>	knowing if it has discovered the path MTU unless and until it
>	receives an ICMP report.  Perhaps the ICMP reports are being
>	dropped on the return path; or perhaps the datagrams aren't large
>	enough to be fragmented yet.

If a host is not sending datagrams large enough to be fragmented,
why would it *care* what the path MTU is?  Some sessions will never
incur fragmentation, because:

	- the need to send "full-size" datagrams never arises, or

	- the MSS is <= the path MTU, or

	- the first-hop MTU is <= the path MTU.

No point in wasting cycles on MTU discovery, if you're not actually
going to incur fragmentation.

Regarding packets being dropped on the return path, ICMP reports are no
more likely to get lost than any datagram bearing an IP MTU Reply option.

>	Either way, the sender's algorithm for deciding when to send the
>	option (or set the RF flag) is going to be complex, ...

The algorithm for setting the RF flag is trivial: set it on every datagram
(assuming it's a "type 1" protocol, able to react to MTU changes).  You'd
send the option with every datagram too, if it weren't so inefficient.

>	... and (this is the part that applies equally to Steve D's method)
>	it might take a while for the sender to discover the MTU.

It takes one round-trip time, same as the RFC-1063 mechanism.

>	Meanwhile, the sender might have filled the transmission pipe with
>	mobygrams that are all being fragmented.

Good point.  Slow-start may help in some cases, but if a connection
starts off with a number of short datagrams, it may already be going
full blast by the time it gets around to sending the big guys.
(I suppose a protocol could intentionally go into slow-start when it
transitions to sending "full-size" datagrams.)  Saving the discovered
MTU in the routing cache will certainly alleviate this problem.

Note that this problem arises with both my scheme and RFC-1063, in the
(much less frequent) case where the path MTU shrinks while the protocol
is streaming big datagrams -- it still takes at least one RTT to learn
the new MTU, longer if the MTU options are not included in every datagram.

Assuming reassembly succeeds most of the time, how much do we care about
the overhead of fragmentation and reassembly for one round-trip time?

Steve

From craig@NNSC.NSF.NET  Tue Nov 28 05:24:21 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA11965; Tue, 28 Nov 89 05:24:21 PST
Received: by decwrl.dec.com; id AA05045; Tue, 28 Nov 89 05:24:17 -0800
Message-Id: <8911281324.AA05045@decwrl.dec.com>
To: deering@pescadero.stanford.edu
Cc: mogul, mtudwg
Subject: report fragmentation
Date: Tue, 28 Nov 89 08:15:09 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


I still have to read Steve's RFC (sorry Steve -- I'm currently limited to
one page memos...) but one other point I believe to be true about RF.

You can't learn the MTU except by trying to exceed it -- in other words,
you gotta cause fragmentation to learn the MTU.  The IP option doesn't do
that.  I can start with 576 IP datagrams and only after the option comes back
do I expand to the MTU size I've learned.  Fragmentation only occurs when
the path changes....  (Note in this case, the RF bit would help).

Craig

From philipp@gipsi.gipsi.fr  Tue Nov 28 07:10:43 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA13062; Tue, 28 Nov 89 07:10:43 PST
Received: by decwrl.dec.com; id AA17250; Tue, 28 Nov 89 07:10:26 -0800
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA18677; Tue, 28 Nov 89 16:09:51 +0100 (MET)
Received: by gipsi.gipsi.fr; Tue, 28 Nov 89 16:10:13 -0100 (MET)
Date: Tue, 28 Nov 89 16:10:13 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8911281510.AA02552@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: mogul
Subject: Re:  SMB's proposal: using an IP option for "Report Fragmentation" flag
Cc: MTU Discovery <mtudwg>

	Steve B's proposal (introduce a new "flag" IP Option that means "Report
	Fragmentation") has several nice advantages.  First, it doesn't appear
	to require any changes to existing gateway implementations (which are
	all required to pass along unknown options, subject to the usual
	orthogonal rules about copying on fragmentation).  Second, it doesn't
	intrude on any "architecture resource" scarcities (i.e., bits in the IP
	header).

This may sound a little heretical, but perhaps we are considering
fragmentation "Not Harmful Enough"?  Maybe fragmentation really
should be looked upon as something quite severe and that *any*
fragmentation should be reported via an ICMP message back to the
source.  This way, no options or header bits are used.  We would
have to allocate a new ICMP message type, though: reason being it
must be something that hosts not yet equiped with this MTU discovery
code can safely ignore (albiet at the cost of much degraded
performance -- if the performance is bad enough, perhaps the users
will bang on the management to upgrade to a more reasonable release).
Anyway, just using Fragmentation Required But Not Permitted (or
whatever, I don't have 791 handy) with a different Code would not
be adequate.

-Philip

From mogul  Tue Nov 28 11:06:40 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA13730; Tue, 28 Nov 89 11:06:40 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8911281906.AA13730@acetes.pa.dec.com>
Date: 28 Nov 1989 1106-PST (Tuesday)
To: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Cc: MTU Discovery <mtudwg>
Subject: Re:  SMB's proposal: using an IP option for "Report Fragmentation" flag
In-Reply-To: Philippe Prindeville <philipp@gipsi.gipsi.fr> / 
		Tue, 28 Nov 89 16:10:13 -0100.
             <8911281510.AA02552@gipsi.gipsi.fr>

    This may sound a little heretical, but perhaps we are considering
    fragmentation "Not Harmful Enough"?  Maybe fragmentation really
    should be looked upon as something quite severe and that *any*
    fragmentation should be reported via an ICMP message back to the
    source.  This way, no options or header bits are used.  We would
    have to allocate a new ICMP message type, though: reason being it
    must be something that hosts not yet equiped with this MTU discovery
    code can safely ignore (albiet at the cost of much degraded
    performance -- if the performance is bad enough, perhaps the users
    will bang on the management to upgrade to a more reasonable release).
    Anyway, just using Fragmentation Required But Not Permitted (or
    whatever, I don't have 791 handy) with a different Code would not
    be adequate.

Chris and I examined a variant of this suggestion (inspired by Charles Lynn)
in our paper.  The problem is that if the receiver (of the fragments)
sends ICMPs to a sender that is not going to pay attention to them,
not only will this cause even more congestion but it will happen
repeatedly (because the sender will persist in its behaviour).

One could imagine some sort of throttle (only send a "Fragment Received"
ICMP once per minute or something like that) but even in this case,
I think it's a bad idea for the receiver to send totally unsolicited
reports.  There may be a few situations where fragmentation is in fact
the correct strategy; my intuition is that these cases involve at least
one low-bandwidth path (or else why would its MTU be so small) and asking
that path to carry superfluous unsolicited traffic is a mistake.

-Jeff

From sytek!rfox@Sun.COM  Tue Nov 28 12:54:05 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA14176; Tue, 28 Nov 89 12:54:05 PST
Received: by decwrl.dec.com; id AA00408; Tue, 28 Nov 89 12:54:00 -0800
Received: from sun.Sun.COM (sun-bb.Corp.Sun.COM) by Sun.COM (4.1/SMI-4.1)
	id AA24648; Tue, 28 Nov 89 12:53:23 PST
Received: from sytek.UUCP by sun.Sun.COM (4.1/SMI-4.1)
	id AA12985; Tue, 28 Nov 89 12:52:52 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA01659; Tue, 28 Nov 89 12:06:33 PST
Date: Tue, 28 Nov 89 12:06:33 PST
From: sytek!rfox@Sun.COM (Rich Fox)
Message-Id: <8911282006.AA01659@sytek.hls.hac.com>
To: mtudwg
Subject: Re: Another proposal to think about


>Your proposal to handle MTU discovery at the TCP level sounds
>reasonable, except that it only works for TCP.  That means we would
>have to make similar changes to any other "packetization" protocols,
>such as TP4 or VMTP or NFS, in order for them also to take advantage
>of MTU discovery.  

Yes your right, I only gave an example for TCP. But don't let this throw
you. In my note I gave a long description of how a TCP connection will
quickly converge on the path MTU. The only real new idea that was added
in this model was the fact that IP must report to the transport layer
above that fragmentation occurred and the size of the largest fragment 
( fragment 0 ). In your proposal I believe that this notion also exists!!
Since this information can be presented to UDP or any other transport layer
protocol, mtu discovery can be handled WITHOUT any changes to the IP header,
or the meaning of the IP header. This was the single most important point I
wanted to state in my proposal. I think in either of our solution the transport
protocols need to be notified as to what the mtu is, and each protocol will be
able to deal with that information as they choose.


>Granted, my proposal also requires changes to the local implementation of
>each packetization protocol, but not to the actual protocol and packet
>formats used over the network.  I imagine it would be fairly difficult
>to get ISO to allow "TPDU size" options in TP4 data packets, for example.

My proposal does not change the actual protocol or packet formats. It, like
yours, requires changes to the local implementation of each packetization
protocol.

>If we were to adopt your proposal, I would want to add a new option
>to the SYN segments, for requesting the use of MSS options in data
>segments.  

The host requirements doc says that all hosts must support sending and receiving
of the MSS option. It dusn't say that it must only support at SYN time, but it
says must support. So I think according to the HR doc you can send an MSS option
at any time. I believe that my proposal recovers from lost data frames with an
MSS option included.


>>	...I am inclined to think that the routing protocols should
>>	handle this problem.
>
>I've heard this suggested by others as well.  I'm not sure what you
>have in mind, but the usual suggestion is that MTU information should
>be exchanged as part of the routing protocol, and that hosts should
>be able to get that information by asking a neighboring router, by
>eavesdropping on the neighboring routers, or by actively participating
>in the routing protocol.
>
>The problem with this is that it is unreasonable to expect any router
>to maintain the MTU for all possible destinations.  For example, you
>wouldn't expect the internal routers at Stanford to know the path MTU
>to reach each subnet at MIT.  They might know the *minimum* MTU or the
>*maximum* MTU for MIT, but using the minimum would waste bandwidth when
>sending towards a subnet with a larger path MTU, and using the maximum
>would cause fragmentation when sending towards a subnet with a smaller
>path MTU.
>

Yes, you are right. That is why I say I am inclined to believe that the
routing protocols should handle the problem, and not that I am convinced
that they should. I surely do not want subnet routes advertised as well with
say RIP. I think the amount of traffic generated by RIP is one of the reasons
for all of the work being done in routing today. THe last thing I want to do
is add more traffic to RIP or require a new protocol to have to bear the grunt.
So at this point I am undecided as to whether or not the routing protocols
should handle mtu discovery, that is one of the reasons that I made the proposal
that I did.


thanks rich


From smb@research.att.com  Tue Nov 28 13:40:13 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA14385; Tue, 28 Nov 89 13:40:13 PST
Received: by decwrl.dec.com; id AA07027; Tue, 28 Nov 89 13:39:47 -0800
From: smb@research.att.com
Message-Id: <8911282139.AA13844@hector.homer.nj.att.com>
Received: by hector.homer.nj.att.com id AA13844; Tue, 28 Nov 89 16:39:22 EST
To: mtudwg
Subject: Re: Another proposal to think about
Date: Tue, 28 Nov 89 16:39:21 EST
>From: hector!smb

Allowing routing protocols to carry the information won't work.  We're
moving more and more towards an environment where even routers use a
default route to some higher-level router.  For example, our link to
JVNCNET advertises ``default'' to us via RIP; none of our local routers
could glean any MTU information.  And that in turn means that an analog
to ICMP Redirect wouldn't work well.

From art@sage.acc.com  Tue Nov 28 16:54:13 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA15449; Tue, 28 Nov 89 16:54:13 PST
Received: by decwrl.dec.com; id AA04512; Tue, 28 Nov 89 16:54:07 -0800
Message-Id: <8911290054.AA04512@decwrl.dec.com>
Date: 28 Nov 89 16:49:00 PST
From: art@sage.acc.com
Subject: fragmentation ICMP error
To: "mtudwg" <mtudwg>

>This may sound a little heretical, but perhaps we are considering
>fragmentation "Not Harmful Enough"?  Maybe fragmentation really
>should be looked upon as something quite severe and that *any*
>fragmentation should be reported via an ICMP message back to the
>source.  This way, no options or header bits are used.  We would
>have to allocate a new ICMP message type, though: reason being it
>must be something that hosts not yet equiped with this MTU discovery
>code can safely ignore (albiet at the cost of much degraded
>performance -- if the performance is bad enough, perhaps the users
>will bang on the management to upgrade to a more reasonable release).
>Anyway, just using Fragmentation Required But Not Permitted (or
>whatever, I don't have 791 handy) with a different Code would not
>be adequate.
>
>-Philip

This has been proposed before.  The main problem is that as long as most
hosts don't understand this new error, all we are doing is causing more
traffic ( and unproductive traffic as well).

Also, if the IP layer is caching MTU information for use by any transport
protocol, it is preferable to learn the MTU of the path before someone
needs it and sends a packet which must get fragmented.


+-----------------------------------------------------------------------+
|	Art Berggreen		Advanced Computer Communications	|
|	<art@sage.acc.com>	Santa Barbara Street			|
|	(805)963-9431		Santa Barbara, CA 93101			|
+-----------------------------------------------------------------------+



From jnc@PTT.LCS.MIT.EDU  Tue Nov 28 20:48:09 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16602; Tue, 28 Nov 89 20:48:09 PST
Received: by decwrl.dec.com; id AA02721; Tue, 28 Nov 89 20:48:03 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA13332; Tue, 28 Nov 89 23:46:37 EST
Date: Tue, 28 Nov 89 23:46:37 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <8911290446.AA13332@PTT.LCS.MIT.EDU>
To: craig@nnsc.nsf.net
Subject: Re:  problems with RFC 1063
Cc: MTU@nnsc.nsf.net, mtudwg%decwrl.dec.com.jnc@lcs.mit.edu

	I'd second what Craig said; what wrong with 1063?

	First, options are certainly cheaper than fragmentation. Also,
I can imagine ways (i.e. I have a patent filed but it hasn't cleared
yet, so I can't tell you how it works) to build routers that forward
packets with options just as fast as those without. So, I don't think
you shoulkd make architectural decisions based on the impact on router
performance; just design the best mechanism!
	Parentetically, in conventional routers, any option (even if
it's not interpreted by each router) is still expensive, since any
time there are *any* options you have to look at them all to make sure
none of them is one you *do* have to deal with.

	Second, as far as the bit in the IP header goes, there are a
number of proposals to use it in congestion control (e.g. the DEC
scheme), and from my perspective (as Area Director) that potential use
is far more critical (in addition to needing that bit far more often,
making the occasional use for MTU a better bet for the option), so I'd
be unlikely to support using that bit for MTU.
	Sorrreeeeee....... just trying to do what's best....

	Noel

From philipp@gipsi.gipsi.fr  Wed Nov 29 02:48:35 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA17976; Wed, 29 Nov 89 02:48:35 PST
Received: by decwrl.dec.com; id AA06144; Wed, 29 Nov 89 02:48:28 -0800
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA16817; Wed, 29 Nov 89 11:48:04 +0100 (MET)
Received: by gipsi.gipsi.fr; Wed, 29 Nov 89 11:48:27 -0100 (MET)
Date: Wed, 29 Nov 89 11:48:27 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8911291048.AA05369@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: MTU Discovery <mtudwg>
Subject: Re: Another proposal to think about

> Your proposal to handle MTU discovery at the TCP level sounds
> reasonable, except that it only works for TCP.  That means we would
> have to make similar changes to any other "packetization" protocols,
> such as TP4 or VMTP or NFS, in order for them also to take advantage
> of MTU discovery.  

Excuse me, but something is obviously wrong in someone's thinking
here (possibly mine):  Why would one *want* to change the packet
size of an VMTP or UDP packet?  They are record-oriented protocols
and must preserve such boundaries.

-Philip

From mogul  Wed Nov 29 10:33:13 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA00675; Wed, 29 Nov 89 10:33:13 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8911291833.AA00675@acetes.pa.dec.com>
Date: 29 Nov 1989 1033-PST (Wednesday)
To: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Cc: MTU Discovery <mtudwg>
Subject: Re: Another proposal to think about
In-Reply-To: Philippe Prindeville <philipp@gipsi.gipsi.fr> / 
		Wed, 29 Nov 89 11:48:27 -0100.
             <8911291048.AA05369@gipsi.gipsi.fr>

    > Your proposal to handle MTU discovery at the TCP level sounds
    > reasonable, except that it only works for TCP.  That means we would
    > have to make similar changes to any other "packetization" protocols,
    > such as TP4 or VMTP or NFS, in order for them also to take advantage
    > of MTU discovery.  
    
    Excuse me, but something is obviously wrong in someone's thinking
    here (possibly mine):  Why would one *want* to change the packet
    size of an VMTP or UDP packet?  They are record-oriented protocols
    and must preserve such boundaries.

Certainly one cannot change the size of a UDP packet once the next
layer up has sent it.  Just as certainly, however, a higher layer
cannot expect to be allowed to send an arbitrarily large UDP packet.
The purpose of MTU discovery is to allow the higher layers (such
as RPC) to know how big a packet may be sent without fear of fragmentation.

NFS (+ Sun RPC) provide a textbook example of both the possibility of
doing this right, and the dangers of doing this wrong.  Sun RPC loves
to send 8kb UDP packets over an Ethernet (with a 1.5kb MTU).  This is
often a disaster when a gateway (or slow receiver interface) is 
involved.  However, NFS is perfectly capable of breaking up a file
write into chunks (it would have to no matter what size it preferred to
use) and so it can be told to use smaller chunks.  Nowadays, this
is done as a hand-configured mount-time option, but the same
information could be provided by MTU discovery (albeit with some
revision of the relevant NFS code) without changing the NFS spec.

(An aside on protocol design: although UDP is required to preserve
datagram boundaries, the designer of a higher-level record-oriented
protocol should not necessarily expect to fit an entire record
into a single UDP datagram.  This couples the parameters of the
higher-level protocol too tightly to the parameters of arbitrary
links in the Internet, if one wants reasonable performance.  If I
understand correctly [someone will no doubt correct me] in the OSI
model, the "presentation layer" is where the higher-level records
should be assembled.  It's nice if the transport layer provides
a way of marking the boundaries, but it can't/shouldn't be prohibited
from imposing additional boundaries.)

-Jeff

From mogul  Wed Nov 29 10:42:42 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA00700; Wed, 29 Nov 89 10:42:42 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8911291842.AA00700@acetes.pa.dec.com>
Date: 29 Nov 1989 1042-PST (Wednesday)
To: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Cc: mtudwg
Subject: Re:  problems with RFC 1063
In-Reply-To: jnc@PTT.LCS.MIT.EDU (Noel Chiappa) / Tue, 28 Nov 89 23:46:37 EST.
             <8911290446.AA13332@PTT.LCS.MIT.EDU>

	    First, options are certainly cheaper than fragmentation. Also,
    I can imagine ways (i.e. I have a patent filed but it hasn't cleared
    yet, so I can't tell you how it works) to build routers that forward
    packets with options just as fast as those without. So, I don't think
    you shoulkd make architectural decisions based on the impact on router
    performance; just design the best mechanism!

Well, I don't think we can simply ignore the impact on router performance,
and I would be loathe to impose a standard that implied that for the
next 17 years, everyone is going to have to buy Proteon routers :-).
On the other hand, I think it's reasonable to assume that
	(1) these options won't be sent so often as to seriously
	degrade throughput
	(2) processing an extra option is cheaper than fragmenting
	that same datagram (am I right?)
    
	    Second, as far as the bit in the IP header goes, there are a
    number of proposals to use it in congestion control (e.g. the DEC
    scheme), and from my perspective (as Area Director) that potential use
    is far more critical (in addition to needing that bit far more often,
    making the occasional use for MTU a better bet for the option), so I'd
    be unlikely to support using that bit for MTU.
	    Sorrreeeeee....... just trying to do what's best....

I sent a message to Jon Postel asking for an advisory ruling, but
I've received no response.  I assume that his opinion would depend
strongly on yours, so unless someone wants to try to convince Noel
that we should be granted this bit, I propose that our further discussions
assume that we cannot have it.  (Sorry, Steve.)  That still allows the
possibility of using a new IP option as a "Report Fragmentation" flag.
    
	    Parentetically, in conventional routers, any option (even if
    it's not interpreted by each router) is still expensive, since any
    time there are *any* options you have to look at them all to make sure
    none of them is one you *do* have to deal with.

Clearly. (Too bad an IP packet doesn't have two different bags for options,
one for routers and one for end-hosts.)  Just as clearly, an option that
a router has to understand and perhaps modify is going to be more
expensive than one which it simply has to recognize as skippable.  Of
course, once you've landed in the slow path, it probably doesn't matter
that much what else you get stuck doing.

-Jeff

From sytek!rfox@Sun.COM  Wed Nov 29 14:45:32 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA01741; Wed, 29 Nov 89 14:45:32 PST
Received: by decwrl.dec.com; id AA16952; Wed, 29 Nov 89 14:45:22 -0800
Received: from sun.Sun.COM (sun-bb.Corp.Sun.COM) by Sun.COM (4.1/SMI-4.1)
	id AA03814; Wed, 29 Nov 89 14:43:42 PST
Received: from sytek.UUCP by sun.Sun.COM (4.1/SMI-4.1)
	id AA09426; Wed, 29 Nov 89 14:43:09 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA06408; Wed, 29 Nov 89 10:43:32 PST
Date: Wed, 29 Nov 89 10:43:32 PST
From: sytek!rfox@Sun.COM (Rich Fox)
Message-Id: <8911291843.AA06408@sytek.hls.hac.com>
To: mtudwg

Subject: Re: Another proposal to think about

>> Your proposal to handle MTU discovery at the TCP level sounds
>> reasonable, except that it only works for TCP.  That means we would
>> have to make similar changes to any other "packetization" protocols,
>> such as TP4 or VMTP or NFS, in order for them also to take advantage
>> of MTU discovery.  
>
>Excuse me, but something is obviously wrong in someone's thinking
>here (possibly mine):  Why would one *want* to change the packet
>size of an VMTP or UDP packet?  They are record-oriented protocols
>and must preserve such boundaries.
>
>-Philip


  I think its a philosophical reason. If you use the SMDS approach, each record
  or NFS 8K packet will be sent out as a number of mtu packets + last packet,
  with a common id of some sort and the layer above IP incurs the cost of 
  fragmentation as opposed to having IP incur the cost. 

  You do bring up a good point: Which packetization protocols are we really
  trying to help/solve with the mtu discovery? 

  rich


From mogul  Wed Nov 29 18:17:22 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02916; Wed, 29 Nov 89 18:17:22 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8911300217.AA02916@acetes.pa.dec.com>
Date: 29 Nov 1989 1817-PST (Wednesday)
To: Steve Deering <deering@pescadero.stanford.edu>
Cc: MTU Discovery <mtudwg>
Subject: Re: SMB's proposal: using an IP option for "Report Fragmentation" flag
In-Reply-To: Steve Deering <deering@pescadero.stanford.edu> / 
		27 Nov 1989 23:52-PST.
             <89/11/27 2352.364@pescadero.stanford.edu>

Steve Deering writes:

    If a host is not sending datagrams large enough to be fragmented,
    why would it *care* what the path MTU is?  Some sessions will never
    incur fragmentation [...]

and    

    >	... and (this is the part that applies equally to Steve D's method)
    >	it might take a while for the sender to discover the MTU.
    
    It takes one round-trip time, same as the RFC-1063 mechanism.

After I sent my message (to which Steve D responded, to which I am
responding) I realized that I wasn't entirely clear about the scenario
I was thinking of.

Think of what happens during the lifetime of an SMTP connection.
Since there is an SMTP-level handshake that goes on, the first
few datagrams of an SMTP connection are going to be "small".  After
this handshake, the body of the mail message is sent, which may
cause several "large" segments to be sent.

Now, if one used a method (such as Steve's) that depended upon the
"probing" transmission of a large segment in order to obtain the
path MTU, the SMTP sender won't discover the MTU until at least
the first large segment has been sent (and perhaps several more,
if the ACK arrives before the ICMP report).  True, it takes one
RTT from the time that the probe is sent, but the probe is sent
relatively late in the connection.

The method in RFC1063 (whatever its other flaws) allows the SMTP
sender to ask about the path MTU using a datagram of any size,
in particular the first datagram of the connection ... well in advance
of the need to send a large segment.  This is the point I was
trying to make about how long it takes to discover the path MTU.

Telnet connections also presumably start with small segments and
potentially go on to large ones.  Ditto NFS (since you have to
do a lookup before doing a read or write).

    No point in wasting cycles on MTU discovery, if you're not actually
    going to incur fragmentation.

Well, yeah, but the whole point is to avoid fragmentation.

    Regarding packets being dropped on the return path, ICMP reports are no
    more likely to get lost than any datagram bearing an IP MTU Reply option.

Except that a TCP (for example) datagram carrying a Reply option will
(sooner or later) get retransmitted if it is lost along the way.  (We
may have to think about the suggested algorithm for when to send the
Reply option; maybe the Reply option should be carried on any
retransmission aof a segment.)
    
    Assuming reassembly succeeds most of the time, how much do we care about
    the overhead of fragmentation and reassembly for one round-trip time?

One of the original motivations for MTU discovery was that in many
cases it was observed that reassembly does not "succeed most of the time."
Perhaps the state of the art in interface and router technology has
obviated this problem, but I'd rather not make this assumption.

-Jeff


From craig@NNSC.NSF.NET  Thu Nov 30 04:33:26 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA06882; Thu, 30 Nov 89 04:33:26 PST
Received: by decwrl.dec.com; id AA08729; Thu, 30 Nov 89 04:33:23 -0800
Message-Id: <8911301233.AA08729@decwrl.dec.com>
To: sytek!rfox@sun.com
Cc: mtudwg
Subject: which protocols does MTUD help?
Date: Thu, 30 Nov 89 07:31:07 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


>  You do bring up a good point: Which packetization protocols are we really
>  trying to help/solve with the mtu discovery? 

TCP -- for obvious reasons

Some UDP-based applications -- for example, NFS *can* adapt to changing
    MTU sizes, if it has some way to learn them (see Nowicki's paper
    in the April '89 issue of CCR).

We may also use MTU discovery to help solve FDDI-Ethernet bridging
problems (mismatched MTUs) -- note this requires the use of an option.
It also isn't high on my list of things we *must* fix.  (But I don't
hold with folks who say let FDDI-Ethernet bridge builders stew).

Craig

From mogul  Thu Nov 30 15:08:14 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA01547; Thu, 30 Nov 89 15:08:14 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8911302308.AA01547@acetes.pa.dec.com>
Date: 30 Nov 1989 1508-PST (Thursday)
To: gw-discovery@gregorio.stanford.edu, mtudwg
Cc: 
Subject: Logistical details for Working Group meetings, Dec. 12th

The IETF Working Groups on MTU Discovery and Gateway Discovery
will hold their meetings on Tuesday, December 12, 1989.  This
message contains the information that attendees will need.

Schedule:
	 9:00 - 12:00	MTU Discovery WG meeting
	12:00 -  1:00	Lunch (possibly a working lunch to finish up MTUD)
	 1:00 -  ????	Gateway Discovery (possibly extending through dinner)

Lunch and dinner are not being supplied, but there are many dozens of
places to buy food within a 10 minute walk of here.

Location:
	Digital Equipment Corporation Western Research Laboratory (DECWRL)
	Stanford Square (SSQ) Building
	100 Hamilton Avenue
	Palo Alto, CA
	DECWRL:   (415) 853-6600
	my phone: (415) 853-6643

    Note that DECWRL shares the SSQ building with a product group, so
    you will not be allowed to enter the building unescorted.  Please
    be patient if the receptionist is strict about this; I will try to
    make sure that nobody is left sitting in the reception area for
    very long.

Getting to DECWRL:
	Note that nearby all-day parking is limited!  Please consider
	carpooling, or riding a bicycle, or taking CalTrain (the station
	is a 2-minute walk from DECWRL).

	When you arrive, tell the receptionist that you are here for
	the IETF meeting at DECWRL, and supply my name if there is
	any confusion.  If you are still met with a blank stare,
	ask to speak with Janet Friedberg, 853-6580.

Directions for Locals:
	We are at the intersection of Hamilton and Alma, one block
	south of University Ave. in Palo Alto.  Alma is the northern
	end of what starts out as Central Expressway.
	
	You will have to park a few blocks south on Alma; see "Parking"
	below.

Directions for Foreigners:

    From San Francisco/SFO:
	Take US 101 ("Bayshore Freeway") South towards San Jose.
	Exit at University Avenue Westbound (Palo Alto); you will
	quickly find yourself in a somewhat rundown shopping district.
	This is the "University Avenue Extension" in East Palo Alto.
	Continue straight through the first stoplight, which merges
	onto University Avenue in Palo Alto.

    From San Jose:
	Take US 101 North towards San Francisco.
	Exit at University Avenue Westbound (Palo Alto); you will
	find yourself crossing over the freeway overpass and you
	will end up on University Avenue.

    In either case:
	Continue on University Avenue, which rapidly becomes an
	expensive residential zone (don't get caught speeding!).

	Take a left at the light at Middlefield Road (a mile or
	so from 101).
	
	Take the 3rd right on Homer, which is a one-way street.
	
	Follow Homer all the way to Alma (where Homer ends); turn
	right on Alma.

Parking:
	We have arranged to use the parking lot on Alma between
	Homer and Forest.  This lot has a moderately large sign
	that says "Paddleford Oldsmobile" but at the moment it
	is reserved for Digital SSQ parking.  Please park carefully,
	since lots of other people need to use this lot.
	
	If the Paddleford lot is full, you will have to park elsewhere.
	There may be some spaces in the CalTrain pay lots either at
	Alma and Hamilton (across from our building) or on the other
	side of the tracks at the CalTrain station.  If you are
	confused, park on the street in a 1-hour or 2-hour space, and
	ask the receptionist for advice.  We may be able to provide
	other options.

	If you park at the Paddleford lot, you MUST tell the receptionist
	that you have done so, and supply your license plate number,
	unless you want your car towed away.

	If you are planning to come, expect to park a car here, and
	haven't told me that you are coming, you ought to do so.
	You need not let me know in advance in order to attend, but
	then don't expect any sympathy about parking woes.

Questions?  Contact me ASAP, since I'll be leaving for SOSP tomorrow
and won't be back until Dec. 11th.  I might be able to read mail
while I'm away, but don't count on it.  Steve Deering is going to be gone
next week, too.

-Jeff

From mogul  Thu Nov 30 16:49:29 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02017; Thu, 30 Nov 89 16:49:29 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8912010049.AA02017@acetes.pa.dec.com>
Date: 30 Nov 1989 1649-PST (Thursday)
To: Craig Partridge <craig@NNSC.NSF.NET>
Cc: mtudwg
Subject: Re: which protocols does MTUD help?
In-Reply-To: Craig Partridge <craig@NNSC.NSF.NET> / 
		Thu, 30 Nov 89 07:31:07 -0500.
             <8911301233.AA08729@decwrl.dec.com>

	We may also use MTU discovery to help solve FDDI-Ethernet bridging
	problems (mismatched MTUs) -- note this requires the use of an option.

I'm confused.  Please describe in more detail what these problems are,
and why they require the use of an option (as opposed to, say, using
the "report any fragmentation" method, which might not actually work but is
at least conceptually possible).

-Jeff

From sytek!rfox@Sun.COM  Thu Nov 30 18:39:12 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02484; Thu, 30 Nov 89 18:39:12 PST
Received: by decwrl.dec.com; id AA18256; Thu, 30 Nov 89 18:39:08 -0800
Received: from sun.Sun.COM (sun-bb.Corp.Sun.COM) by Sun.COM (4.1/SMI-4.1)
	id AA19712; Thu, 30 Nov 89 18:38:59 PST
Received: from sytek.UUCP by sun.Sun.COM (4.1/SMI-4.1)
	id AA02403; Thu, 30 Nov 89 12:54:44 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA13109; Thu, 30 Nov 89 12:06:00 PST
Date: Thu, 30 Nov 89 12:06:00 PST
From: sytek!rfox@Sun.COM (Rich Fox)
Message-Id: <8911302006.AA13109@sytek.hls.hac.com>
To: mtudwg
Subject: Re: Another proposal 




I think Craig answered the question that was needed to be answered: The 
packetization protocols that were are trying to solve for really is TCP.
Furthermore, I think Noel has limited the choices by saying :


>	Second, as far as the bit in the IP header goes, there are a
>number of proposals to use it in congestion control (e.g. the DEC
>scheme), and from my perspective (as Area Director) that potential use
>is far more critical (in addition to needing that bit far more often,
>making the occasional use for MTU a better bet for the option), so I'd
>be unlikely to support using that bit for MTU.
>	Sorrreeeeee....... just trying to do what's best....
>
>	Noel


  I beleive that this leaves us with the following choices:
    1. RFC1063
    2. ICMP approach
    3. My approach using the MSS option of TCP.



For the sake of this note, I will assume that option 1 is not a viable
option because of the points raised in Steve D's draft paper. I use this
assumption as a starting point for discussing the next options and imply
nothing else.

  Option 2:  The main problem with this option is that this method can break
		down if there is a host that doesn't understand or act on the
		ICMP message. Thus, the numberof messages sent is greatly
		increased with no functionality gain.

  Option 3: The feedback I got for this approach was fairly good except
	one point. Some people feel that sending an MSS option in non-SYN
	packet is changing the meaning of RFC-793. I would like to persue
	this a little further by discussing the various options that can be
 	followed:



   option 3a: Assume that the Host Requirement Doc is the new bible.

	    If we assume that what is written in the HR doc is gospel (which
	    according to others around here implementing products based on
	    TCP believe) then what is stated in this document is true and
	    can be followed as written even if it may change the meaning
	    of an earlier RFC. (This is what is normally meant as being the
	    NEW bible). With this in mind we get the following 2 lines
	    from the HR doc:

	       TCP MUST implement both sending and receiving the Maximum
	       Segment Size option [TCP:4].

	       TCP SHOULD send an MSS (Maximum Segment Size) option in every
	       SYN segment when its receive MSS differs from the default
	       536, and MAY send it always.

	     This doesn't restrict or imply that the MSS option can not or 
	     should not be sent in a non-SYN segment. If the HR doc wanted
	     to imply or forbid the use of the MSS option in a non-SYN
	     segment, then it should have stated. 

	     So if we beleive the statement above then my suggestion as it
	     stood before works without having to change any gateways, or
	     header information in IP. In fact, the only thing needed to 
	     implement this scheme is the ability for IP to inform the
	     packetization protocol that a change in MTU is needed. A fairly
	     simple thing to add.

	     If you do not beleive the statement above then please read on--


    option 3b: MSS-II a new option.

	     It was stated that the problem with my proposal is that a MSS
	     option would be sent in a non-SYN segment. Steve D suggested
	     that to get around this problem we implement a new TCP option
	     that behaves just like the MSS option except it is sent after
	     the connection has been set up (ie: in a non-SYN segment). This
	     is actually an excellent suggestion and adds absolutely no more
	     complexity to the proposal at hand, and I then think we can
	     safely say that RFC-793 has not been affected, the HR doc has
	     not been violated and the benefits stated above are maintained.

    option 3c: Use ICMP.

	     If we are completely opposed to adding any new options even to
	     TCP, then to solve our problem we can replace the MSS-II option
	     with the use of the ICMP message that Steve D has defined in his
	     draft paper. It solves the problem for TCP but may still suffer
	     from all of the problems discussed before for fragmented packets
	     that arrive for NFS or other applications that use UDP etc.




I hope that I have convinced you that option 3 is still a viable solution
and can possibly fulfil the with the least amount of changes.

thanks rich

From smb@research.att.com  Thu Nov 30 19:23:12 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02589; Thu, 30 Nov 89 19:23:12 PST
Received: by decwrl.dec.com; id AA00795; Thu, 30 Nov 89 19:23:09 -0800
From: smb@research.att.com
Message-Id: <8912010322.AA24044@hector.homer.nj.att.com>
Received: by hector.homer.nj.att.com id AA24044; Thu, 30 Nov 89 22:22:57 EST
To: mtudwg
Subject: Re: Another proposal 
Date: Thu, 30 Nov 89 22:22:55 EST
>From: hector!smb

There is in fact a lot of worry about putting any new option in
non-SYN TCP segments; given that it's never been possible, there
are probably lots of hosts out there that will break if they
receive one.  The proposals for expanding TCP's window size
require negotiating the right to use non-SYN options at SYN
time, when everyone is at least looking for some option; only
if you see such an option at SYN time can you later send *any*
options in other packets.  The HR document notwithstanding, hosts
change slowly.  (Quick:  how many hosts out there *still* don't
speak MX records?)

Before we adopt any solution that involves lots of new TCP options,
we should also consider what they would do to header prediction
algorithms, and to current short-circuit fast processing of
default-case packets.

On another tack, Craig Partridge remarked to me that the IAB is
assuming that while hosts do indeed change slowly, routers change
fairly rapidly.  This would imply that solutions that reply on
proper behavior by the end-host -- the IP bit scheme, or my variant
that uses an IP option instead -- will be much less effective for
a long time.  A 1063-like approach, while a bit slower to ramp up,
will provide an excellent approximation to the desired universality
much more quickly.


		--Steve Bellovin

From wickham@decwet.enet  Thu Nov 30 21:59:57 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02947; Thu, 30 Nov 89 21:59:57 PST
Received: by decwrl.dec.com; id AA17996; Thu, 30 Nov 89 21:59:54 -0800
Date: Thu, 30 Nov 89 21:59:53 -0800
Message-Id: <8912010559.AA17996@decwrl.dec.com>
From: wickham@decwet.dec.com (Charlie Wickham, DECWest Engr.  30-Nov-1989 2201)
To: "mtudwg@decwrl.dec.com"
Subject: Scenario using SMB's RF option and different starting algorithm

I believe a combination of reporting fragmentation coupled with a
start-big-and-then-back-off start might help. Here's a scenario:

Force the first mongo-gram (whose size is greater than the nonlocal subnet
MTU) datagram to be fragmented by sending it on the local subnet as
unfragmented. SMB's IP RF option is also set.  While waiting for a reply, send
future datagrams at the normal nonlocal subnet MTU.  This should prevent the
pipe from getting filled with datagrams that need fragmentation. The response
should indicate whether frag'ing occured, e.g., if the path didn't fragment,
then the report option will indicated a size that was the same as the
mongo-gram.

The bad parts are: 1) MTU size isn't discovered until you send something big
enough and 2) there is potentially wasted bandwidth while waiting for the
report to come back. It has the same problems Jeff mentioned earlier (not
finding out the MTU until late in the game), but I think we should concentrate
on the case where a circuit is alive for a period of time. Mail messages
containing postscript will surely figure out the MTU. Do we know what the
average lifetime of a VC is? Has anyone collected any stats on VC life?

Some other random thoughts: it seems like two mechanisms are needed here: one
for short lived VCs such as small mail sessions and another where you want to
know the MTU size but not with alot of initial up-front cost. If an
application can advise the transport how long the circuit will be around, that
could be used to determine the strategy used in determining how soon the MTU
needs to known.

charlie

From craig@NNSC.NSF.NET  Fri Dec  1 05:31:50 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA07214; Fri, 1 Dec 89 05:31:50 PST
Received: by decwrl.dec.com; id AA19465; Fri, 1 Dec 89 05:31:43 -0800
Message-Id: <8912011331.AA19465@decwrl.dec.com>
To: mogul
Cc: mtudwg
Subject: Ethernet-FDDI woes
Date: Fri, 01 Dec 89 08:26:37 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


> I'm confused.  Please describe in more detail what these problems are,
> and why they require the use of an option (as opposed to, say, using
> the "report any fragmentation" method, which might not actually work but is
> at least conceptually possible).

Jeff:

    Here's the problem.

    Folks are building Ethernet-FDDI bridges (1576 MTU to 4096 MTU and
vice-versa).  This is all supposed to be "transparent"  (in fact, it
cannot possibly be -- the bridge has to do some data conversion -- so
we've taken to calling them "translucent").

    The problem comes when a host on the FDDI side decides to send to
an apparently "local" address using the full MTU, and that "local"
address is, in fact, bridged through an Ethernet.  The bridge will
drop the packet on the floor as untransferable.

    There's a way, using the MAC header to detect that you're
on a mixed network, and decide to use the Ethernet for all transfers.
But that makes some of the heavy data transfer folks unhappy.  They want their
Suns on Ethernets to be bridged to their Crays on the FDDI network, which
implies an Ethernet MTU everywhere, but also want the Crays to use the full
FDDI mtu.  One possibility that has been discussed is to allow use of the full
FDDI mtu IFF 

    - the MAC header indicates no Ethernets have been traversed

    - an MTU option is passed indicating the remote host is willing
	to talk in FDDI MTUs  (i.e. it hasn't been wired down to
	the Ethernet MTU for all transfers).

Now, I'm not arguing this is a good idea -- just that it has been
discussed.  And the fragmentation bit doesn't give you the MTU information
you need in this case.

Craig

From craig@NNSC.NSF.NET  Fri Dec  1 05:37:35 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA07524; Fri, 1 Dec 89 05:37:35 PST
Received: by decwrl.dec.com; id AA19714; Fri, 1 Dec 89 05:37:28 -0800
Message-Id: <8912011337.AA19714@decwrl.dec.com>
To: sytek!rfox@sun.com
Cc: mtudwg
Subject: re: Another proposal
Date: Fri, 01 Dec 89 08:30:32 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


> I think Craig answered the question that was needed to be answered: The 
> packetization protocols that were are trying to solve for really is TCP.

WHOA!  I DID NOT SAY THIS!  I SAID TCP + UDP-based protocols!!!!!!!

Craig

From BILLW@MATHOM.CISCO.COM  Fri Dec  1 05:42:17 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA07606; Fri, 1 Dec 89 05:42:17 PST
Received: by decwrl.dec.com; id AA19964; Fri, 1 Dec 89 05:42:11 -0800
Date: Fri 1 Dec 89 05:41:57-PST
From: William Westfield <BILLW@MATHOM.CISCO.COM>
Subject: Re: which protocols does MTUD help?
To: mogul
Cc: craig@NNSC.NSF.NET, mtudwg
In-Reply-To: <8912010049.AA02017@acetes.pa.dec.com>
Message-Id: <12546623614.8.BILLW@MATHOM.CISCO.COM>

In a bridged environment between FDDI and ETHERNet, the systems will
normally assume that the MTU of the connected interface.  The FDDI
system would try to send 4k datagrams (or whatever), and these would
break at the bridge (it not knowing how to fragment).  MTU discovery
might be able to let both systems know more about the world.  (Mind you,
Im not sure how, since the bridge is supposed to be invisible.)

I think the usual case of this is handled by the way the MSS option
works NOW (most systems advertise their interface MTU, and refuse to
send a datagram larger than that even if the other host claims that it
is willing to accept it).  Something new might be needed to handle the
case where the FDDI-ETHER bridge is on some network at an intermediate
point in the path.

Bill W
-------

From BILLW@MATHOM.CISCO.COM  Fri Dec  1 05:54:36 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA07721; Fri, 1 Dec 89 05:54:36 PST
Received: by decwrl.dec.com; id AA20566; Fri, 1 Dec 89 05:54:28 -0800
Date: Fri 1 Dec 89 05:54:06-PST
From: William Westfield <BILLW@MATHOM.CISCO.COM>
Subject: Re: Another proposal to think about
To: mogul
Cc: mtudwg
In-Reply-To: <8911291833.AA00675@acetes.pa.dec.com>
Message-Id: <12546625828.8.BILLW@MATHOM.CISCO.COM>

    NFS (+ Sun RPC) provide a textbook example of both the possibility of
    doing this right, and the dangers of doing this wrong.  Sun RPC loves
    to send 8kb UDP packets over an Ethernet (with a 1.5kb MTU).  This is
    often a disaster when a gateway (or slow receiver interface) is
    involved.

This common example raises some interesting questions.  A SUN knows very
well that the MTU is at most 1500 bytes, and then decides to use 8k packets
anyway.  Since using a smaller packet size allows "slow hosts and routers"
to work better, it is fairly clear that it is slower this way (unless it
doesn't work at all with big packets).  Is fragmentation that occurs at
the originating host that much less "harmfull" than fragmentation that
occurs at routers?  (I think perhaps so.)  Why doesn't sun use 8k tcp
packets too, anyway?

BillW
-------

From mogul  Fri Dec  1 14:46:04 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09536; Fri, 1 Dec 89 14:46:04 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8912012246.AA09536@acetes.pa.dec.com>
Date:  1 Dec 1989 1446-PST (Friday)
To: mtudwg
Cc: 
Subject: Re: Scenario using SMB's RF option and different starting algorithm

Charlie Wickham writes:
	Do we know what the
	average lifetime of a VC is? Has anyone collected any stats on VC life?

Well, I just checked on several different machines here.  One is a
timesharing machine that does a lot of X-windows and telnet
connections; its connection lifetime
	 (packets sent+received)/connections_made
is about 1200 packets per connection.  One is decwrl.dec.com, which is
almost entirely a mail switch (and almost half of the mail connections
are non-local); it runs about 60 packets/connection (but decwrl was
rebooted only an hour ago, and so the average may be skewed by the
startup activities such as reloading the nameserver.)  Finally,
gatekeeper.dec.com, which is at least half used for non-local FTP and
Telnet, averages about 570 packets/connection.

Note that these are averages, and so they could be seriously skewed
by a few long-running connections.  For example, decwrl may be doing
some NNTP (netnews) transfers to internal hosts sending large batches
over a single connection.  It would be a good idea to try to measure
the distribution of connection lifetimes somehow.

-Jeff

From mogul  Fri Dec  1 15:12:41 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09600; Fri, 1 Dec 89 15:12:41 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8912012312.AA09600@acetes.pa.dec.com>
Date:  1 Dec 1989 1512-PST (Friday)
To: mtudwg
Subject: FDDI-Ether bridges

Arggh.  Let's recognize this for what it is: a data-link layer problem.
IP MTU Discovery is (and I'm putting on my chairperson's hat) a network
layer issue.  How the individual hosts and gateways determine the MTU
of the subnets to which they are connected should not be solved by
an IP-layer protocol

Ok, so maybe we have to think about this problem anyway.  I don't suppose
that it's productive to say that people who try to bridge Ether
and FDDI are brain-dead, so I won't.

Let's suppose that FDDI uses something like ARP (I don't know enough
about FDDI to verify this).  What we need is for the ARP entry for
each local (same-subnet) host to be marked with the usable MTU for
that hop.  For Ethernet hosts, that's easy: it's always 1500, even
if the other end is really FDDI.  And (as if by magic) you don't have to
change a single byte of code, since Ethernet hosts already assume
an Ethernet MTU (duh).

OK, so the FDDI hosts have to do something smarter.  Perhaps we need to
run a modified ARP on the FDDI side that communicates the data-link
layer MTU along with the addressing info.  Call this ARP+.

Here is where the translucent bridges come in.  Whenever they see
an ARP+ packet goes between an Ethernet and an FDDI net, the bridge
has to translate the protocols and (on the FDDI side) supply an
MTU of 1500.  This solution doesn't generalize if there are more
than two MTUs in the bridged LAN, unless we change everyone to
run ARP+ and use the translucent bridges to adjust the MTUs in
the ARP+ packets as necessary.

Have I convinced people that the FDDI-Ethernet issue is separable?

-Jeff

From mogul  Fri Dec  1 15:32:37 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09728; Fri, 1 Dec 89 15:32:37 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8912012332.AA09728@acetes.pa.dec.com>
Date:  1 Dec 1989 1532-PST (Friday)
To: William Westfield <BILLW@MATHOM.CISCO.COM>
Cc: mtudwg
Subject: Re: Another proposal to think about
In-Reply-To: William Westfield <BILLW@MATHOM.CISCO.COM> / 
		Fri 1 Dec 89 05:54:06-PST.
             <12546625828.8.BILLW@MATHOM.CISCO.COM>

	NFS (+ Sun RPC) provide a textbook example of both the possibility of
	doing this right, and the dangers of doing this wrong.  Sun RPC loves
	to send 8kb UDP packets over an Ethernet (with a 1.5kb MTU).  This is
	often a disaster when a gateway (or slow receiver interface) is
	involved.
    
    This common example raises some interesting questions.  A SUN knows very
    well that the MTU is at most 1500 bytes, and then decides to use 8k packets
    anyway.  Since using a smaller packet size allows "slow hosts and routers"
    to work better, it is fairly clear that it is slower this way (unless it
    doesn't work at all with big packets).

Not at all clear.  It is entirely possible to use 1500-byte datagrams
[aside for terminology: IP "datagrams" are fragmented into Ethernet
"packets"] to move 8kb NFS buffers without using any more packets than
is used with Suns "fragment immediately" scheme.  The reason that Sun
chose to use fragmentation was that they didn't want to spend the
time (programmer time and CPU time) for a real transport protocol.
We should all be able to design a layer that fits between UDP and
Sun's RPC that allows you to move 8k buffers efficiently without doing
fragmentation.

Another reason that NFS does this is because it works.  As long
as you don't lose fragments, of course.

    Is fragmentation that occurs at
    the originating host that much less "harmfull" than fragmentation that
    occurs at routers?  (I think perhaps so.) 
    
Marginally so, since (if the routers have limited input buffering
abilities) it increases the number of places where a fragment could
be dropped.

    Why doesn't sun use 8k tcp packets too, anyway?

Recall that the fundamental reliability/performance difference
between IP fragmentation and TCP segmentation is that if a TCP
segment in the middle of a burst gets dropped, the TCP ACK mechanism
allows you to make use of the segments that did manage to arrive.
Even if all but the first segment of a window is continually dropped,
you will still make progress.

With fragmentation, on the other hand, you cannot make any progress
until you have received all the fragments of a datagram.  Even if
the sender is able to use the same IP ID for retransmissions, if
there is "deterministic fragmentation loss" (e.g., you always lose
the last fragment of a datagram) there is no way to make any progress.

Using 8k TCP packets would move you from the "can make progress"
to the "can't make progress" domain, without actually reducing
the number of packets that are sent in the best case.

-Jeff

From mogul  Fri Dec  1 15:36:04 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09749; Fri, 1 Dec 89 15:36:04 PST
Date: Fri, 1 Dec 89 15:36:04 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8912012336.AA09749@acetes.pa.dec.com>
To: gw-discovery@gregorio.stanford.edu, mtudwg
Subject: Addendum to message to meeting attendees

Non-experts may wish to note that after parking in the lot on
Alma (between Homer and Forest) they should continue on foot
"north" on Alma (the lot is on the "east" side of Alma) across
Forest Street and almost up to Hamilton Avenue.  Even though
the address of our building is "100 Hamilton", the entrance is
on Alma about 30 paces south of Hamilton.

-Jeff

From wickham@decwet.enet  Fri Dec  1 15:46:23 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09795; Fri, 1 Dec 89 15:46:23 PST
Received: by decwrl.dec.com; id AA16255; Fri, 1 Dec 89 15:46:18 -0800
Date: Fri, 1 Dec 89 15:46:17 -0800
Message-Id: <8912012346.AA16255@decwrl.dec.com>
From: wickham@decwet.dec.com (Charlie Wickham, DECWest Engr.  01-Dec-1989 1549)
To: mtudwg
Subject: Scenario using SMB's RF option and different starting algorithm

I believe a combination of reporting fragmentation coupled with a
start-big-and-then-immediately-back-off start might help. Here's a scenario:

Force the first mongo-gram (whose size is greater than the nonlocal subnet
MTU) datagram to be fragmented by sending it on the local subnet as
unfragmented. SMB's IP RF option is also set.  While waiting for a reply, send
future datagrams at the normal nonlocal subnet MTU.  This should prevent the
pipe from getting filled with datagrams that need fragmentation. The response
should indicate whether frag'ing occured, e.g., if the path didn't fragment,
then the report option will indicated a size that was the same as the
mongo-gram.

The bad parts are: 1) MTU size isn't discovered until you send something big
enough and 2) there is potentially wasted bandwidth while waiting for the
report to come back. It has the same problems Jeff mentioned earlier (not
finding out the MTU until late in the game), but I think we should concentrate
on the case where a circuit is alive for a period of time. Mail messages
containing postscript will surely figure out the MTU. Do we know what the
average lifetime of a VC is? Has anyone collected any stats on VC life?

Some other random thoughts: it seems like two mechanisms are needed here: one
for short lived VCs such as small mail sessions and another where you want to
know the MTU size but not with alot of initial up-front cost. If an
application can advise the transport how long the circuit will be around, that
could be used to determine the strategy used in determining how soon the MTU
needs to known.

charlie


From mogul  Fri Dec  1 16:26:51 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09939; Fri, 1 Dec 89 16:26:51 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8912020026.AA09939@acetes.pa.dec.com>
Date:  1 Dec 1989 1626-PST (Friday)
To: smb@research.att.com
Cc: mtudwg
Subject: Re: Another proposal 
In-Reply-To: Msg from smb@research.att.com dated Thu, 30 Nov 89 22:22:55 EST.
             <8912010322.AA24044@hector.homer.nj.att.com>

    On another tack, Craig Partridge remarked to me that the IAB is
    assuming that while hosts do indeed change slowly, routers change
    fairly rapidly.  This would imply that solutions that reply on
    proper behavior by the end-host -- the IP bit scheme, or my variant
    that uses an IP option instead -- will be much less effective for
    a long time.  A 1063-like approach, while a bit slower to ramp up,
    will provide an excellent approximation to the desired universality
    much more quickly.

This observation (routers change faster than hosts) crystalizes something
I have been thinking about for a few days.  Let me launch another proposal
(just before I leave town for a week) and maybe the rest of you can fight
it out while I'm gone.

Let's also assume that we cannot use the reserved bit in the IP header.
So we are stuck using an IP option (sorry, Rich Fox: I do not think
a transport-level solution is right).  So the gateways are stuck having
to parse the options (but let's make sure that this happens infrequently)
so there isn't much more cost in making the gateways actually process
the options.

Other observations: it would be nice to be able to get useful MTU 
information back to the sender even if the receiving host doesn't understand
the new option.  It would also be nice, as I have stated before, if
the information could be exchanged before any large packets need to
be sent.

One last observation: if we assume that the "multi-MTU" subnet problem
created by translucent FDDI-Ethernet bridges can be solved at the
data-link level, then the last-hop router has all the information necessary
to compute the path MTU.  The participation of the receiving host is
not strictly necessary.

Here's the proposal: As in RFC 1063, the sender attaches an MTU Request
option to some of its outgoing datagrams.  The option is updated by
routers along the way.  When the last-hop router is reached (i.e.,
a router which can deliver the packet directly to the destination
host), that router now knows the path MTU.

At this point, my new proposal (1063a) diverges from RFC1063.  The
last-hop router now sends an ICMP "MTU Reply" (new type) message back
to the source host as it forwards the packet on to the destination.
(If the gateway is congested, the ICMP packet should of course
be dropped instead of the original packet).  The source host receives
the ICMP message and updates its path MTU entry (the ICMP message
provides enough of the original IP header to do this).

Obvious objection: we are now injecting extra packets into the
internet.  True, but if we keep the load relatively low we will
save more from avoiding fragmentation than we lose from these
ICMP messages.  So the problem is "how does the sender decide when
to send the MTU Request Option if the ICMP replies are being dropped?

[Here my proposal starts getting a little fuzzy.  Suggestions welcome.]

Presumably, we don't want to send it more often than once per RTT.
That means that we should not send a second MTU Request Option until
(1) we are asked to retransmit that datagram by the transport level
(which presumably is tracking the RTT) or (2) we receive a packet
from the destination host which is in reply to our original packet.
I.e., we should use our existing RTT information in order to meter
out the MTU Request Options.

Next, how often should we send the MTU Request Option if the last-hop
gateway doesn't understand it and simply isn't replying?  Easy
approach: once per RTT.  It's mostly our own ox being gored by the
cost of the excess option-processing.  Harder approach:  the last-hop
gateway should normally change the option to indicate to the
destination host that the ICMP has been sent.  If the option is not so
marked, the destination host could send the ICMP itself.  (I think this
is too finicky.  We can afford a few extra option transmissions.)
Mostly, we should give up trying to elicit a response after a few
RTTs have gone by (if we have a connection running with the destination
and we aren't getting the ICMPs, the gateway is probably not sending
them!)

Next, how do we detect changes in the path?  One thing to do is
to retransmit the MTU Request Option (if we think we will get an
answer) once every N RTTs or M minutes (i.e., something approaching
the natural frequency of the routing protocols).  This should not
be a serious load.

Another trick is to modify the IP receivers so that if a destination host
receives an MTU Request Option, it interprets this as "Report Fragmentation".
As long as there is good reason to believe that the source host software
has not been downgraded (say, for the next day or so) it should be
safe to send ICMP Fragment Received messages back to the source host,
at which time the source should (1) update its MTU estimate from the
ICMP and (2) retransmit the MTU Request Option.

One more possibility: although we really want to trace the path
in both directions (since the routes may be asymmetric), when the
destination host receives an MTU Request Option it could use the
incoming-path MTU as an estimate until it manages to get a reply
to its own MTU Request.  (It certainly shouldn't send anything
larger than this estimate.)

Note that this new proposal, even with the destination hosts interpreting
the MTU Request Options, is an awful lot simpler than RFC1063 because
(once we have conceded the need to send a few extra ICMP packets) there
is none of the nasty "where to put the reply option" mechanism.
Also, note again that unlike RFC1063, this mechanism does not require
ubiquitous implementation in end hosts before it begins to be useful.
(Note also that Steve Deering's proposal could increase the incidence
of fragmentation, rather than decrease it, before it is ubiquitously
implemented, since it involves "tempting fate".)

Enough for now.  See you in 10 days.

-Jeff

From sytek!rfox@Sun.COM  Fri Dec  1 19:37:28 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA11499; Fri, 1 Dec 89 19:37:28 PST
Received: by decwrl.dec.com; id AA11977; Fri, 1 Dec 89 13:06:22 -0800
Received: from sun.Sun.COM (sun-bb.Corp.Sun.COM) by Sun.COM (4.1/SMI-4.1)
	id AA26696; Fri, 1 Dec 89 13:06:10 PST
Received: from sytek.UUCP by sun.Sun.COM (4.1/SMI-4.1)
	id AA05075; Fri, 1 Dec 89 13:05:35 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA17370; Fri, 1 Dec 89 10:31:23 PST
Date: Fri, 1 Dec 89 10:31:23 PST
From: sytek!rfox@Sun.COM (Rich Fox)
Message-Id: <8912011831.AA17370@sytek.hls.hac.com>
To: mtudwg, smb@research.att.com
Subject: Re: Another proposal


Steve, we discussed the issue of hosts not handling options in non-SYN packets
in Hawaii. I think the consensus was that no one knew of an implementation that
breaks. I have done a fair amount of testing with options as have others and
no hosts have broken. 
  Also, non-SYN options will only (should only) be sent in the MTU discovery
process if both hosts participate, and I think it can be assumed then that both
hosts will be able to support the options. If one of the hosts does not support
the MTU discovery process then the original MSS will probably be the minimum
value.

Your concern about header predictions is a valid one, though I am not so sure
it will be affected, can anybody elaborate?


rich

From jnc@PTT.LCS.MIT.EDU  Sun Dec  3 19:07:08 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA01687; Sun, 3 Dec 89 19:07:08 PST
Received: by decwrl.dec.com; id AA11706; Sun, 3 Dec 89 19:07:04 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA04170; Sun, 3 Dec 89 22:01:41 EST
Date: Sun, 3 Dec 89 22:01:41 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <8912040301.AA04170@PTT.LCS.MIT.EDU>
To: craig@nnsc.nsf.net
Subject: Re:  Ethernet-FDDI woes
Cc: mogul, mtudwg%decwrl.dec.com.jnc@lcs.mit.edu

	Right, there is this Ether-FDDI thing. It turns out there is a new
'Multi-Media Bridges WG' which is going to discuss this (and may recommend
against it; it's up to them), but let me just mention a problem with that
approach.
	The proposal to used 'mixed' MTU's on a single network would require
hosts to keep MTU's on a per-destination basis for destinations on the local
interface, not per interface as per the Host RFC. This is not bad per se, but
the IETF has been requested to 'limit the rate of change', so redoing the
Host RFC anytime soon is out. That being the case, you can imagine a number
of failure modes involving jumbo-grams and 'old' hosts that still follow the
Host RFC.
	I assume all the mechanisms this group are exploring will be able to
fit in in an upwardly compatible way, right?  I mean, we can write the RFC
now, but we can't respin the Host RFC right away to refer to it. In any case,
just because we write in the RFC doesn't mean that overnight all 150K machines
come up to spec!

	Noel

PS: I hope nobody's too bummed at me for the cold water on the fragmentation
bit. It's just that we do only have bit, and Congestion is really a big
problem...




From philipp@gipsi.gipsi.fr  Mon Dec  4 07:14:19 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA08894; Mon, 4 Dec 89 07:14:19 PST
Received: by decwrl.dec.com; id AA00455; Mon, 4 Dec 89 07:14:09 -0800
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA19602; Mon, 4 Dec 89 15:50:05 +0100 (MET)
Received: by gipsi.gipsi.fr; Mon, 4 Dec 89 15:50:35 -0100 (MET)
Date: Mon, 4 Dec 89 15:50:35 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8912041450.AA21460@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: mogul
Subject: Re: SMB's proposal: using an IP option for "Report Fragmentation" flag
Cc: MTU Discovery <mtudwg>

> Perhaps the state of the art in interface and router technology has
> obviated this problem, but I'd rather not make this assumption.

I differ -- the state of the art has created it.  Most routers can
send back to back packets easily enough, but begin to lose on
reception as load increases even marginally.  Thus they are well
suited to fragmentation, but poorly for reassembly.

-Philip

From smb@research.att.com  Mon Dec  4 18:43:07 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA13199; Mon, 4 Dec 89 18:43:07 PST
Received: by decwrl.dec.com; id AA29994; Mon, 4 Dec 89 18:43:04 -0800
From: smb@research.att.com
Message-Id: <8912050242.AA27998@hector.homer.nj.att.com>
Received: by hector.homer.nj.att.com id AA27998; Mon, 4 Dec 89 21:42:44 EST
To: mogul (Jeffrey Mogul)
Cc: mtudwg
Subject: Re: Another proposal 
Date: Mon, 04 Dec 89 21:42:43 EST
>From: hector!smb

	 Here's the proposal: As in RFC 1063, the sender attaches an MTU Request
	 option to some of its outgoing datagrams.  The option is updated by
	 routers along the way.  When the last-hop router is reached (i.e.,
	 a router which can deliver the packet directly to the destination
	 host), that router now knows the path MTU.

Without commenting (for now) on the substance of this proposal, I
should note one or two glitches with it.  First, the last-hop router
does not necessarily know the host's MTU.  From the Host Requirements
RFC, it is not clear that hosts are required to accept packets of
length greater than 576, regardless of the MTU.  (The discussion, at
least as much of it as I could find from home, wasn't that clear.  It
does say explicitly that hosts *should* accept packets up to the
network's MTU after reassembly, and that hosts are only required to
accept 576 bytes.)  If the router has no need to talk directly with the
host, it may not have the positive knowledge required to send packets
of more than 576 bytes.

Second, if ARP fakery is used, the last-hop router may not be the last
hop, even if it thinks it is.  We may not want to cater to such
situations; I confess, though, that I've found ARP fakery exactly the
right technique to use when hanging a few SLIP lines off of a single
host -- otherwise, some IPs require me to use a separate network
number.

		--Steve Bellovin

From @hplabs.hpl.hp.com:sytek!kzm@HPLABS.HP.COM  Tue Dec  5 05:48:02 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA19726; Tue, 5 Dec 89 05:48:02 PST
Received: by decwrl.dec.com; id AA29941; Tue, 5 Dec 89 05:47:56 -0800
Received: from hplabs.hpl.hp.com by RELAY.CS.NET id aa13702; 5 Dec 89 7:48 EST
Received: by hplabs.HP.COM ; Mon, 4 Dec 89 21:11:37 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA21692; Sun, 3 Dec 89 01:14:28 PST
From: Keith Mc Cloghrie <sytek!kzm@HPLABS.HP.COM>
Message-Id: <8912030914.AA21692@sytek.hls.hac.com>
Subject: My comments
To: mtudwg%decwrl.dec.com@RELAY.CS.NET
Date: Sun, 3 Dec 89 1:14:25 PDT
X-Mailer: ELM [version 2.2 PL0]


After reading all the messages, I have a number of points to make.

1. Steve D. asked:

> If a host is not sending datagrams large enough to be fragmented,
> why would it *care* what the path MTU is?  

One reason to care is to provide an accurate answer to the 
GET_MAXSIZES procedure call of the HR RFC's Internet/Transport 
Layer Interface.  

2. I contend that it is architecturally wrong to use TCP's MSS 
to "discover the MTU".  MSS is the receiver's buffer size; this can 
be larger or smaller than the MTU.  The MTU is a property of a route;
it should be discovered at the IP layer, not independently on each 
TCP connection, and should also be available for use by UDP applications.

3. Both the 1063 and the report-fragmentation scheme require that a
path be tested periodically to determine if the MTU has increased.  
The possibility of the loss of the reply to this periodic test *is* 
a factor in the comparison.  In 1063, the loss of the reply merely
causes the test to be repeated with no harm except a delay in discovery 
if the MTU has increased.  In report-fragmentation, the loss of an 
ICMP fragmentation-occurred message causes the sender's estimated 
MTU to remain set at too high a value for longer, which (potentially) 
causes more over-sized messages to be sent and suffer fragmentation.

4. With the spare bit in the IP header not available for our use
and assuming use of MSS is not architecturally sound, then the 
remaining candidate schemes would seem to be 1063 and Steve B's 
variant of the report-fragmentation.  It also seems that because 
it uses an IP option, Steve B's variant of report-fragmentation 
is much more like 1063 than was Steve D's original proposal.  In 
particular, I presume the please-report-if-fragmented IP option 
would be sent periodically rather than on every datagram, in which 
case the choice of period would probably be the same as for 1063.

5. I've tried to summarize a comparison between the two schemes 
in the following table:

                              1063                     RF option

   asking mechanism:    periodic IP option        periodic IP option
                         on next datagram          on larger datagram           

   report mechanism:     reply IP option          extra ICMP msg 
                           on next msg           - doesn't require msg
                        in reverse direction      in reverse direction

   sender overhead:    allow space in msg.s        allow space in msg.s
                      for additional IP option    for additional IP option

   receiver overhead:   allow space in msg.s      fragmentation on round-
                        for reply IP option       trip's worth of msg.s &
                                                  sending extra ICMP msg

   gateway overhead:   processing msg with        processing msg with
                       IP option & updating it         IP option

   introduction cost:    cooperating hosts &      cooperating hosts only
                       every intermed. gateway

Assuming I've got the table right, there's only three issues where
there's a significant difference; these being the ones I called 
"report mechanism", "receiver overhead" and "introduction cost".  

The "report mechanism" difference concerns the sending of responses
back to the sender if there is no traffic in the reverse direction.
I suggest that the 1063 specification could easily be extended to have
IP generate some null-function ICMP message via which the IP option
can be sent, if the reply were to sit for a "long" time awaiting
a datagram with the correct destination.

Thus, if I had to draw a conclusion at this stage, it would be 
the following:

  For MTU-Discovery, we have a choice of waiting for most of the 
  gateways to be updated to support the RFC-1063 IP option, or 
  of using report-fragmentation in which each test for an increase 
  in MTU causes a burst of fragmented messages.

Keith.

From smb@research.att.com  Tue Dec  5 08:21:33 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA20534; Tue, 5 Dec 89 08:21:33 PST
Received: by decwrl.dec.com; id AA18151; Tue, 5 Dec 89 08:21:29 -0800
From: smb@research.att.com
Message-Id: <8912051621.AA06557@hector.homer.nj.att.com>
Received: by hector.homer.nj.att.com id AA06557; Tue, 5 Dec 89 11:21:07 EST
To: mtudwg
Subject: some further musings
Date: Tue, 05 Dec 89 11:21:05 EST
>From: hector!smb

A few more thoughts occurred to me this morning:  maybe we should
re-examine our assumptions.  I'm not sure these all make sense, and
they're a bit contradictory; think of them as monkey wrenches cast upon
the waters...

First:  is it really necessary to reprobe for MTU changes, once the
initial negotiation is complete?  Route changes are comparatively
infrequent, and many -- most? -- routing changes will not affect the
MTU.  For example, if an internal router fails, any new route to my
external gateway will likely be via the same medium, i.e., Ethernet.
For that matter, for the next few years the vast majority of hosts will
be restricted by Ethernet's MTU; most other choices are rather uncommon
or too expensive for workstations (i.e., FDDI).  As long as our
long-haul links have an MTU greater than 1500, few changes in route
will affect the path MTU.

This has several implications.  First, it favors any of the types of
report-fragmentation.  Minimum-MTU requires an active discovery
process; if my hypothesis is correct, we want something that responds
to decreases in MTU, but ignores increases.  Second

A second assumption we have been operating under is that the sender
should initiate the MTU discovery process.  That's true if the 1063
option is used; it's not true with report-fragmentation.  Suppose that
receivers always generated a fragmentation ICMP message, though only
for the first few offenses per connection.  If the sender understands
the ICMP message, it will adjust its behavior accordingly; if not, the
message is mostly harmless except for the minor amount of extra
traffic.  I would define ``first few'' as some small integer (on the
order of 10), or twice the round-trip time -- the receiver should have
a decent idea of it, if only from the initial SYN-ACK handshake if TCP
is used.  If we make the report an IP option instead of a separate
message -- tagged onto an unsolicited ICMP ECHO REPLY or something
else equally harmless -- we could also resend the report any time we
retransmitted an ACK.  (That violates layering a bit; the concept may
need clearer definition to make it work for NFS and the like.)

Finally, if Jeff Mogul's recent proposal is considered useful despite
my nitpicking objections, we can apply his observation to report-
fragmentation:  the last hop router knows the final MTU, so any router
that fragments a packet should send back the ICMP message to the host.
That gives us the advantage of putting the mechanism into the
faster-evolving router population, and getting feedback to the host
more quickly (i.e., from closer to the source).

The obvious objection here is that the router has no knowledge of
connections, and hence wouldn't know when to stop sending these
messages to an uncooperative host.  I'm not convinced that that holds
up.  Conforming hosts today shouldn't be sending packets that need
fragmentation as long as every hop accepts 576 or larger.  This implies
that most jumbograms are from hosts that are trying to do MTU
discovery, in which case they'd understand the ICMP message.  A
comparatively small cache could be kept of source-destination pairs
that had been sent such messages recently.  Since this cache is soft
state, it doesn't matter too much if it's lost on a reboot, unless the
volume of extra ICMP messages gets to be very large.  Does anyone have
any current statistics on the frequency of non-local fragmentation?

Routers that connect to tinygram networks might need a variant on this
strategy, of course; their cache might be too large.

We could further embellish this scheme by using the cache when routes
change.  If the new route to a destination lowers the MTU, flush the
cache for that destination -- you want to send new options.  If it
raises the MTU, flag the cache entries; when any packet flows through
for a source-destination pair that's in the cache -- and hence for
which the sencder has previously been advised of the proper MTU -- send
it a new report to raise the MTU.  This last may be overkill, of
course...


		--Steve Bellovin

From craig@NNSC.NSF.NET  Tue Dec  5 09:06:34 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA20775; Tue, 5 Dec 89 09:06:34 PST
Received: by decwrl.dec.com; id AA24210; Tue, 5 Dec 89 09:06:30 -0800
Message-Id: <8912051706.AA24210@decwrl.dec.com>
To: smb@research.att.com
Cc: mtudwg
Subject: re: some further musings
Date: Tue, 05 Dec 89 12:05:04 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


> First:  is it really necessary to reprobe for MTU changes, once the
> initial negotiation is complete?  Route changes are comparatively
> infrequent, and many -- most? -- routing changes will not affect the
> MTU.

Steve:

I think you are making two separate points here:

    (1) Do we need to probe very often?  Your answer (and mine)
    is no.  Once you know the MTU, you shouldn't have to check
    it very often because the path shouldn't change.

    (2) Are the MTUs very diverse?  If not, again, you shouldn't
    need to probe often.

I object to question (2) on philosophical grounds.  IP is intended
to run over diverse networks, and we should assume the MTU varies
widely, even if it doesn't in practice.  (Indeed, given FDDI MTUs
and Jacobson's small MTUs [256byte if I remember right] for his
header-compressed SLIP links I think MTU varies quite widely in
practice too).

Craig

From philipp@gipsi.gipsi.fr  Tue Dec  5 09:15:23 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA20846; Tue, 5 Dec 89 09:15:23 PST
Received: by decwrl.dec.com; id AA25219; Tue, 5 Dec 89 09:15:15 -0800
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA29560; Tue, 5 Dec 89 18:14:23 +0100 (MET)
Received: by gipsi.gipsi.fr; Tue, 5 Dec 89 18:14:53 -0100 (MET)
Date: Tue, 5 Dec 89 18:14:53 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8912051714.AA25461@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: smb@research.att.com
Subject: Re:  some further musings
Cc: MTU Discovery <mtudwg>

	up.  Conforming hosts today shouldn't be sending packets that need
	fragmentation as long as every hop accepts 576 or larger.  This implies
	that most jumbograms are from hosts that are trying to do MTU
	discovery, in which case they'd understand the ICMP message.  A

Except for SUNs with RPC and NFS (but that's hardly any ;-).

	comparatively small cache could be kept of source-destination pairs
	that had been sent such messages recently.  Since this cache is soft
	state, it doesn't matter too much if it's lost on a reboot, unless the

Ah, the dirty word: state.  I don't like building this into IP.

	We could further embellish this scheme by using the cache when routes
	change.  If the new route to a destination lowers the MTU, flush the
	cache for that destination -- you want to send new options.  If it
	raises the MTU, flag the cache entries; when any packet flows through
	for a source-destination pair that's in the cache -- and hence for
	which the sencder has previously been advised of the proper MTU -- send
	it a new report to raise the MTU.  This last may be overkill, of
	course...

It seems to me that routers are starting to pick up a lot of
complex associations here (read: excess baggage).  I don't like
this.

It seems to me that a lot of this "when to" and "when not to"
and "what if he won't cooperate" questions (regarding throttle
control of Report Fragmentation) messages must have been faced
by the Source Quench designers.  Perhaps we can draw on their
experience?

-Philip

From sytek!kzm@hplabs.HP.COM  Tue Dec  5 11:22:55 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA21724; Tue, 5 Dec 89 11:22:55 PST
Received: by decwrl.dec.com; id AA13096; Tue, 5 Dec 89 11:22:45 -0800
Received: by hplabs.HP.COM ; Tue, 5 Dec 89 11:22:25 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA02285; Tue, 5 Dec 89 09:46:41 PST
From: sytek!kzm@hplabs.HP.COM (Keith Mc Cloghrie)
Message-Id: <8912051746.AA02285@sytek.hls.hac.com>
Subject: Re: Scenario using SMB's RF option and different starting algorithm
To: mtudwg
Date: Tue, 5 Dec 89 9:46:35 PDT
In-Reply-To: <8912010559.AA17996@decwrl.dec.com>; from "Charlie Wickham, DECWest Engr.  30-Nov-1989 2201" at Nov 30, 89 9:59 pm
X-Mailer: ELM [version 2.2 PL0]

> Force the first mongo-gram (whose size is greater than the nonlocal subnet
> MTU) datagram to be fragmented by sending it on the local subnet as
> unfragmented. SMB's IP RF option is also set.  While waiting for a reply, send
> future datagrams at the normal nonlocal subnet MTU.  This should prevent the
> pipe from getting filled with datagrams that need fragmentation. The response
> should indicate whether frag'ing occured, e.g., if the path didn't fragment,
> then the report option will indicated a size that was the same as the
> mongo-gram.

Two comments:

1. In order to send only one "mongo-gram" followed by normal 
nonlocal MTU sized datagrams, the probing would have to be 
driven from the TCP (or UDP application) level.  Which means 
that every new connection/application would be doing it.  With 
a busy host, that would be many concurrent MTU-discovery 
attempts being done in parallel and no caching of knowledge 
from one connection/application to the next.  In order to 
avoid this, the probing needs to be driven from the IP level.

2. Your example of "the report option will indicate ..." suggests
you are using a 1063-like option, even though you said SMB's IP RF
option would be set.  I agree, though, that a size-reporting option 
is needed in this scheme, since with report-fragmentation there 
would be no deterministic way to distinguish between no-fragmentation 
and loss of the mongo-gram or responding ICMP message (which means 
you have to re-transmit it enough times so that the statistical
liklihood of a loss is neglible).

Keith.

From sytek!kzm@hplabs.HP.COM  Tue Dec  5 11:33:56 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA21825; Tue, 5 Dec 89 11:33:56 PST
Received: by decwrl.dec.com; id AA14570; Tue, 5 Dec 89 11:33:48 -0800
Received: by hplabs.HP.COM ; Tue, 5 Dec 89 11:33:38 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA21503; Tue, 5 Dec 89 11:17:28 PST
From: sytek!kzm@hplabs.HP.COM (Keith Mc Cloghrie)
Message-Id: <8912051917.AA21503@sytek.hls.hac.com>
Subject: Re: Another proposal 
To: mtudwg
Date: Tue, 5 Dec 89 11:17:18 PDT
In-Reply-To: <8912050242.AA27998@hector.homer.nj.att.com>; from " hector!smb" at Dec 04, 89 9:42 pm
X-Mailer: ELM [version 2.2 PL0]

> 	 Here's the proposal: As in RFC 1063, the sender attaches an MTU Request
> 	 option to some of its outgoing datagrams.  The option is updated by
> 	 routers along the way.  When the last-hop router is reached (i.e.,
> 	 a router which can deliver the packet directly to the destination
> 	 host), that router now knows the path MTU.
> 
> Without commenting (for now) on the substance of this proposal, I
> should note one or two glitches with it.  First, the last-hop router
> does not necessarily know the host's MTU.  From the Host Requirements
> RFC, it is not clear that hosts are required to accept packets of
> length greater than 576, regardless of the MTU.  

Are you referring to paragraph 3.3.3-Discussion-a) of HR RFC.
If so, I think that paragraph is considering the case of MTU < 576, 
where the fragments need to be put back together; as such, it is not
requiring the receiver to be able to re-assemble a datagram 
larger than 576.

In general, there's a danger of confusing MTU and MSS here.
If the transport-layer/application cannot accept a datagram 
of at least the local MTU size, then it must use MSS (or some 
equivalent) to limit the size of the incoming messages, i.e.
set MSS < MTU.  The purpose of MTU-Discovery is for the case 
where MSS > MTU.

This leads me to a further thought: I suggest that responding
to MTU-Discovery should be mandatory, but being able to invoke 
MTU-Discovery should be optional, i.e. all Hosts MUST respond 
to MTU-Discovery mechanisms, but hosts MAY implement the invocation
of MTU-Discovery mechanisms.

Keith.

From deering@Pescadero.Stanford.EDU  Tue Dec  5 13:53:30 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA22898; Tue, 5 Dec 89 13:53:30 PST
Received: by decwrl.dec.com; id AA04225; Tue, 5 Dec 89 13:53:24 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA01227; Tue, 5 Dec 89 13:53:19 PDT
Date: 5 Dec 1989 13:17-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: RF flag
To: mtudwg
Message-Id: <89/12/05 1317.877@pescadero.stanford.edu>
In-Reply-To: jnc's message of Sun, 3 Dec 89 220141 EST

I don't have time at the moment to respond to all the good suggestions
that are being bounced around, but I'd just like to say that, from my
point of view, use of the spare IP header flag as an RF flag is *not*
yet out of the question, despite Noel's attempt to pull rank on us.
In other words, my answer to Noel's comment:

	I hope nobody's too bummed at me for the cold water on the
	fragmentation bit. It's just that we do only have bit, and
	Congestion is really a big problem...

is yes, I'm bummed (but maybe not *too* bummed).

It is understood that Congestion is a Really Big Problem, but it is
far from agreed that the DEC bit is the solution.  Jacobson's approach
of discarding packets as a congestion "signal" has the advantages of
(a) immediately reducing the number of packets in the network, and
(b) working with existing host implementations.

Sure there's only one spare bit and we don't want to squander it,
but unless you are saying it can  *never* be used, I think we should
be able to weigh the needs and benefits of any competing proposals
and pick one accordingly.  By "we", I guess I mean the IESG, since
it's a trans-working-group issue.  More than just Noel, in any case.

Respectfully yours,
Steve


From art@sage.acc.com  Tue Dec  5 15:23:30 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA23536; Tue, 5 Dec 89 15:23:30 PST
Received: by decwrl.dec.com; id AA16012; Tue, 5 Dec 89 15:23:23 -0800
Message-Id: <8912052323.AA16012@decwrl.dec.com>
Date: 5 Dec 89 15:22:00 PST
From: art@sage.acc.com
Subject: Re: RF flag
To: "mtudwg" <mtudwg>

>It is understood that Congestion is a Really Big Problem, but it is
>far from agreed that the DEC bit is the solution.  Jacobson's approach
>of discarding packets as a congestion "signal" has the advantages of
>(a) immediately reducing the number of packets in the network, and
>(b) working with existing host implementations.

Any time that you push the net to the point of dropping packets, the
total useful throughput drops.

I think that Van might even agree that the DEC Bit has some advantages.
The DEC Bit tends to detect congestion when it first appears and attempts
to signal this to the end systems before the congestion gets out of hand.
Van's algorithm uses the only currently available signal, congestive
loss.  In this mode, the routers are forced to operate near what DEC
calls the "cliff".  Any surge in load at this operating point causes
large losses.  The DEC Bit attempts to keep the router at an operating
point (the "knee") which can still cope with traffic fluctuations.
This point also optimizes the throughput/delay ratio.  Also the DEC Bit
is better at discriminating between congestion and real loss.

>Respectfully yours,
>Steve

+-----------------------------------------------------------------------+
|	Art Berggreen		Advanced Computer Communications	|
|	<art@sage.acc.com>	Santa Barbara Street			|
|	(805)963-9431		Santa Barbara, CA 93101			|
+-----------------------------------------------------------------------+



From deering@Pescadero.Stanford.EDU  Tue Dec  5 16:08:52 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA23976; Tue, 5 Dec 89 16:08:52 PST
Received: by decwrl.dec.com; id AA21813; Tue, 5 Dec 89 16:08:45 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA01576; Tue, 5 Dec 89 16:07:47 PDT
Date: 5 Dec 1989 15:44-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: RF flag
To: art@sage.acc.com
Cc: "mtudwg" <mtudwg>
Message-Id: <89/12/05 1544.071@pescadero.stanford.edu>
In-Reply-To: art's message of 5 Dec 89 152200 PST

> I think that Van might even agree that the DEC Bit has some advantages.

Actually, I don't think he would.  I've argued with him several times
about this issue, basically taking the same position as you, but I've
never heard him say a kind word about the DEC bit (except when compared
to doing *nothing* for congestion control).  I suppose we could ask him.

> The DEC Bit tends to detect congestion when it first appears and attempts
> to signal this to the end systems before the congestion gets out of hand.

You can do the same thing with packet loss, by intentionally discarding
some packets before it's actually necessary to do so.  I believe this is
what Van advocates.

Anyway, this is off the topic of this mailing list and out of my depth.
I just wanted to make the point that the DEC bit approach is controversial,
and I don't think it should have the only claim on the spare IP header flag.

Steve

From sytek!kzm@hplabs.HP.COM  Tue Dec  5 17:45:58 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA24600; Tue, 5 Dec 89 17:45:58 PST
Received: by decwrl.dec.com; id AA01058; Tue, 5 Dec 89 17:45:55 -0800
Received: by hplabs.HP.COM ; Tue, 5 Dec 89 17:45:38 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA18227; Tue, 5 Dec 89 17:22:51 PST
From: sytek!kzm@hplabs.HP.COM (Keith Mc Cloghrie)
Message-Id: <8912060122.AA18227@sytek.hls.hac.com>
Subject: re: some further musings
To: craig@nnsc.nsf.net (Craig Partridge)
Date: Tue, 5 Dec 89 17:22:42 PDT
Cc: smb@research.att.com, mtudwg
In-Reply-To: <8912051706.AA24210@decwrl.dec.com>; from "Craig Partridge" at Dec 05, 89 12:05 pm
X-Mailer: ELM [version 2.2 PL0]

> > First:  is it really necessary to reprobe for MTU changes, once the
> > initial negotiation is complete?  Route changes are comparatively
> > infrequent, and many -- most? -- routing changes will not affect the
> > MTU.
> 
> Steve:
> 
> I think you are making two separate points here:
> 
>     (1) Do we need to probe very often?  Your answer (and mine)
>     is no.  Once you know the MTU, you shouldn't have to check
>     it very often because the path shouldn't change.
> 
>     (2) Are the ... 
> 
> Craig

I think there are actually two parts to the first point:

  (1a) Do we need to probe very often **for MTU increases** ?

       I agree that in this case, we do NOT need to probe very 
       often; however, we DO need to probe occasionally.  Example 
       scenario: hosts on LANs at sites joined by two serial lines, 
       a T1 with MTU of 1500, and a 19200 back-up line with MTU of 
       256.  On an outage of the T1 line, the path MTU goes down 
       to 256.  Without an occasional probe, every existing and 
       new connection/application would continue to use an MTU of 
       256 after the T1 line comes back (until the next reboot ?).
       I would say it's worth a one IP-option every 30 minute probe.  

  (1b) Do we need to probe very often **for MTU decreases** ?

       I suggest we need to probe more often in this case, since
       if we probe once every N minutes, then an MTU decrease
       will on average cause N/2 minutes of fragmentation.
       Is once every 2 minutes often enough ?

In fact, to take this further, maybe we should consider these
two cases separately.  

  For (1a), I suggest 1063 has advantages over report-fragmentation
  because it doesn't have to send a bigger datagram just to see if 
  it gets fragmented (c.f. banging your head against a brick wall 
  just to check if the wall is still there).  

  For (1b), however, both our current IP option schemes have the
  bad characteristic that frgamentation starts when the MTU decreases
  but we don't find out until the next time we send a datagram with 
  the IP option.  As an alternative, how about the following:

    define a new IP-option called "report-N-fragmentations" which 
    requests N fragmentation-reports, (NOT one iff the containing 
    message is fragmented, but rather) one ICMP message on the occurrence 
    of each of the next N fragmented datagrams.  This would allow the 
    destination to react immediately after an MTU decrease by sending 
    a limited number of ICMP messages to tell the source that 
    fragmentation has started occurring.  The setting of the value of N 
    would be to balance the number of redundant ICMP report messages 
    against the loss of some of them.  I suggest the value of N be 
    sent in the IP Option, and be considered "N more" so that if the 
    receiver already were primed to send an ICMP message for the next 2, 
    then another such request for 2, would raise the total to the next 4.  
    (there should probably be a maximum for the total).  By this means, 
    the sender could send several of these, thereby protecting against 
    loss of the datagram containing the option.

What would folks think about combining these two schemes.  That is
defining both IP options: 1063's for infrequent but periodic usage
for determining MTU increases; and the report-N-fragmentations for
setting-up triggers for the immedaite discovery of MTU decreases.

Keith.

From sytek!kzm@hplabs.HP.COM  Wed Dec  6 00:38:56 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA27232; Wed, 6 Dec 89 00:38:56 PST
Received: by decwrl.dec.com; id AA06569; Wed, 6 Dec 89 00:38:53 -0800
Received: by hplabs.HP.COM ; Wed, 6 Dec 89 00:38:45 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA00645; Wed, 6 Dec 89 00:00:27 PST
From: sytek!kzm@hplabs.HP.COM (Keith Mc Cloghrie)
Message-Id: <8912060800.AA00645@sytek.hls.hac.com>
Subject: Re: Another proposal 
To: mogul (Jeffrey Mogul)
Date: Wed, 6 Dec 89 0:00:24 PDT
Cc: mtudwg
In-Reply-To: <8912020026.AA09939@acetes.pa.dec.com>; from "Jeffrey Mogul" at Dec 1, 89 1626
X-Mailer: ELM [version 2.2 PL0]

Jeff,

> [Here my proposal starts getting a little fuzzy.  Suggestions welcome.]
> 
> Presumably, we don't want to send it more often than once per RTT.
> That means that we should not send a second MTU Request Option until
> (1) we are asked to retransmit that datagram by the transport level
> (which presumably is tracking the RTT) or (2) we receive a packet
> from the destination host which is in reply to our original packet.
> I.e., we should use our existing RTT information in order to meter
> out the MTU Request Options.
 
I'm not sure the idea of using an RTT estimate is a good thing.
The time when you most want to get the information back, is when 
the route just changed, but if the route just changed, there's a 
good chance that the RTT also just changed.  So any RTT estimate
is not a good thing to use.  (I also dislike IP having to ask the
transport protocol what the RTT is, especially if it's UDP !!).

For discovering MTU increases, I suggest you don't need to retransmit.
Assuming that the caching of MTU is done in the IP layer, then MTU
increases only occur on the first use of a path after reboot and
on route-changes.  Route-changes are infrequent (hopefully reboots
are also !) and keeping the datagrams at the same smaller-than-path-MTU 
size for a little longer (i.e. until the next periodic request is sent)
doesn't do any harm; it just delays the good.

For discovering MTU decreases, see my suggested "report-N-fragmentations"
in my last message, in which I addressed the issue of loss.

> Next, how often should we send the MTU Request Option if the last-hop
> gateway doesn't understand it and simply isn't replying?  Easy
> approach: once per RTT.  It's mostly our own ox being gored by the
> cost of the excess option-processing.  Harder approach:  the last-hop
> gateway should normally change the option to indicate to the
> destination host that the ICMP has been sent.  If the option is not so
> marked, the destination host could send the ICMP itself.  (I think this
> is too finicky.  We can afford a few extra option transmissions.)

Are you here suggesting that the last-hop router and the destination 
host both send replies (or ICMP messages) ?

Your mention of the last-hop router not understanding raises
a different disturbing thought.  If both end-hosts and some (but not
all) of the intermediate routers understand the option, how do 
the hosts know that they can use the "discovered MTU", i.e. what
if the routers, which don't understand the option, are the ones at 
either end of the link with the smallest MTU ??  
 
Keith.

From philipp@gipsi.gipsi.fr  Wed Dec  6 08:39:42 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02944; Wed, 6 Dec 89 08:39:42 PST
Received: by decwrl.dec.com; id AA21983; Wed, 6 Dec 89 08:39:33 -0800
Received: by mcsun.EU.net with SMTP; Wed, 6 Dec 89 17:39:25 +0100 (MET)
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA20989; Wed, 6 Dec 89 14:12:12 +0100 (MET)
Received: by gipsi.gipsi.fr; Wed, 6 Dec 89 14:12:40 -0100 (MET)
Date: Wed, 6 Dec 89 14:12:40 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8912061312.AA00342@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: MTU Discovery <mtudwg>
Subject: Re: Another proposal

Just out of curiousity, how rampant (for lack of a better word) is
1063 deployment?  I know that Wellfleet routers have been doing it
since August (at least the IS portion).

-Philip

From philipp@gipsi.gipsi.fr  Wed Dec  6 08:40:09 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02965; Wed, 6 Dec 89 08:40:09 PST
Received: by decwrl.dec.com; id AA22064; Wed, 6 Dec 89 08:40:00 -0800
Received: by mcsun.EU.net with SMTP; Wed, 6 Dec 89 17:39:46 +0100 (MET)
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA21569; Wed, 6 Dec 89 14:33:54 +0100 (MET)
Received: by gipsi.gipsi.fr; Wed, 6 Dec 89 14:34:18 -0100 (MET)
Date: Wed, 6 Dec 89 14:34:18 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8912061334.AA00404@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: MTU Discovery <mtudwg>
Subject: Routing and MTUs

I know this is not a new idea, and no doubt there will be some groans
at the mention of it again, but isn't MTU one of the type-of-service
parameters that should be conveyed with routing information?  I know
that someone mentioned (sorry, mailing lists never stay in my already
voluminous mailbox for long) that it isn't reasonable to maintain a
subnet MTU for each subnet at MIT in the Stanford routing tables.

Everyone will (I hope) agree with this.  But as most of the last
few scenarios have pointed out, it is usually the transit links
between complete autonomous systems/domains that have the widely
differing MTUs.  And most FDDI sites will be using FDDI to hang
ethernet (etc) off, not as a direct connection.  Therefore, in
most cases, the limiting factor of an AS MTU will be a near-universal
average (ie. ethernet is everywhere) or a border-gateways MTU.

So maybe this idea is worth revisiting.

-Philip

From philipp@gipsi.gipsi.fr  Wed Dec  6 08:40:35 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02997; Wed, 6 Dec 89 08:40:35 PST
Received: by decwrl.dec.com; id AA22119; Wed, 6 Dec 89 08:40:25 -0800
Received: by mcsun.EU.net with SMTP; Wed, 6 Dec 89 17:39:36 +0100 (MET)
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA21418; Wed, 6 Dec 89 14:27:48 +0100 (MET)
Received: by gipsi.gipsi.fr; Wed, 6 Dec 89 14:28:16 -0100 (MET)
Date: Wed, 6 Dec 89 14:28:16 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8912061328.AA00390@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: MTU Discovery <mtudwg>
Subject: re: some further musings

	What would folks think about combining these two schemes.  That is
	defining both IP options: 1063's for infrequent but periodic usage
	for determining MTU increases; and the report-N-fragmentations for
	setting-up triggers for the immedaite discovery of MTU decreases.

What do I think?  I think any sort of connection state should be
maintained by the connection end-points.  Thus, requiring routers
to maintain counters on associative flows is not reasonable.
Routers will have to switch packets faster and faster in the
future (though arguably, larger packets will need to be switched
less often than smaller ones), and this can only really be done
if there is no state associated with each packet.  Any proposal
the builds state into IP receives my dead opposition.

-Philip

From art@sage.acc.com  Wed Dec  6 10:26:15 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA03779; Wed, 6 Dec 89 10:26:15 PST
Received: by decwrl.dec.com; id AA05553; Wed, 6 Dec 89 10:25:52 -0800
Message-Id: <8912061825.AA05553@decwrl.dec.com>
Date: 6 Dec 89 08:34:00 PST
From: art@sage.acc.com
Subject: re: some further musings
To: "mtudwg" <mtudwg>

>What would folks think about combining these two schemes.  That is
>defining both IP options: 1063's for infrequent but periodic usage
>for determining MTU increases; and the report-N-fragmentations for
>setting-up triggers for the immedaite discovery of MTU decreases.
>
>Keith.

Keith,

If I understand your "report-N-fragmentations", then I am concerned about
the state that must be kept.  If the state is only in the end system, then
state must be kept for each IP source.  If state is kept in the router,
then state must be kept for each IP source/destination pair.
Also, would the report be generated for N successive fragmentations
(probably not), N fragmentations within M packets, N framentations
in time T, or ???

+-----------------------------------------------------------------------+
|	Art Berggreen		Advanced Computer Communications	|
|	<art@sage.acc.com>	Santa Barbara Street			|
|	(805)963-9431		Santa Barbara, CA 93101			|
+-----------------------------------------------------------------------+



From sytek!kzm@hplabs.HP.COM  Wed Dec  6 15:17:57 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA05420; Wed, 6 Dec 89 15:17:57 PST
Received: by decwrl.dec.com; id AA20833; Wed, 6 Dec 89 15:17:43 -0800
Received: by hplabs.HP.COM ; Wed, 6 Dec 89 15:07:00 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA07191; Wed, 6 Dec 89 12:47:18 PST
From: sytek!kzm@hplabs.HP.COM (Keith Mc Cloghrie)
Message-Id: <8912062047.AA07191@sytek.hls.hac.com>
Subject: re: some further musings
To: art%sage.acc.com@relay.cs.net
Date: Wed, 6 Dec 89 12:47:11 PDT
Cc: mtudwg
In-Reply-To: <8912061825.AA05553@decwrl.dec.com>; from "art@sage.acc.com" at Dec 6, 89 8:34 am
X-Mailer: ELM [version 2.2 PL0]

Art,
 
> If I understand your "report-N-fragmentations", then I am concerned about
> the state that must be kept.  If the state is only in the end system, then
> state must be kept for each IP source.  If state is kept in the router,
> then state must be kept for each IP source/destination pair.
> Also, would the report be generated for N successive fragmentations
> (probably not), N fragmentations within M packets, N framentations
> in time T, or ???

Yes, this requires that state be kept, but it requires no more
than 1063 does.  As for doing this in routers, I had not thought of
that before reading Jeff's suggestion for sending ICMP messages back 
from the last-hop router.  I agree that keeping this much state in 
routers is bad, and to be avoided.  

It was indeed for "N successive fragmentations".  I suppose the fact 
that you say "probably not" means that I explained it badly.  The 
intent was to send back one ICMP message for EACH of the next N 
fragmentations.  Given the assumption that any fragmentation 
is harmful, what I was looking to do was to trigger the ICMP 
message IMMEDIATELY on the very next receipt of a fragmented 
datagram.  My reason for specifying N (rather than 1) was so 
that even though some of the ICMP messages get lost on the return 
trip, there's a high probability that one of them gets through.  
On further thought, I guess it's still not guaranteed that at least 
one of them gets through, for which case I'm not sure how to recover.  
I'll have to think more about that.

Keith.

From smb@research.att.com  Sat Dec  9 11:12:46 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA10533; Sat, 9 Dec 89 11:12:46 PST
Received: by decwrl.dec.com; id AA08364; Sat, 9 Dec 89 11:12:43 -0800
From: smb@research.att.com
Message-Id: <8912091710.AA20665@hector.homer.nj.att.com>
Received: by hector.homer.nj.att.com id AA20665; Sat, 9 Dec 89 12:10:34 EST
To: mtudwg
Subject: last-hop routers, raising the MTU
Date: Sat, 09 Dec 89 12:10:33 EST
>From: hector!smb

When Jeff proposed that the last-hop router could send back the requisite
message, I objected.  I no longer consider my objections to be valid.

First, I said that the router might not know the host's MTU.  It has to,
or it wouldn't know how to fragment packets addressed to that host.
In fact, theoretically it needs to know that hosts can handle, say,
1500 bytes on an Ethernet-to-Ethernet relay, or it would be obligated
to use 576 bytes.

Second, I said that what appeared to be the last hop might not be the
last hop, if ARP-fakery is going on.  Again, this doesn't matter much.
Both confused router and the smarter one doing the fakery can send back
MTU messages; the originating host should simply believe the lowest MTU
reported to it.


On another matter, in response to my suggestion that perhaps it wasn't
necessary to ever raise an MTU, several people suggested slowing down
the rate drastically, say to every 30 minutes.  I don't buy that.  The
programming complexity necessary to reprobe is the same whether the
interval is every 30 seconds or every 30 minutes.  Then we have to
worry about what rate is right for what net, or for the metric as
reported by the router, how to make it adaptive (slow-start MTU discovery?),
etc.  I'd be much happier with a passive mechanism that only reduced
the MTU, and never mind trying to increase it later during the connection.


		--Steve Bellovin

From art@sage.acc.com  Sat Dec  9 17:53:52 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA12967; Sat, 9 Dec 89 17:53:52 PST
Received: by decwrl.dec.com; id AA16296; Sat, 9 Dec 89 17:53:33 -0800
Message-Id: <8912100153.AA16296@decwrl.dec.com>
Date: 7 Dec 89 21:44:00 PST
From: art@sage.acc.com
Subject: YAMDI (Yet Another Mtu Discovery Idea)
To: "mtudwg" <mtudwg>

In thinking about the issue, I've developed the following preferences:
1)  The mechanism should allow discovery before fragmentation is required
    if possible.
2)  The mechanism should be at the IP level and information cached at that
    level, but the mechanism can be requested at the transport level.
3)  One end of a connection should be able to take advantage of the
    mechanism, even if the other host doesn't support it.
4)  There should little if any state maintained.
5)  Most of the routers are expected to be updated before most of the
    hosts.
6)  Any extra net traffic should only be a direct consequence of a host 
    probing for the MTU.

Based on these, I propose:

A Report MTU IP option which carries the current path estimate and an
ICMP MTU Change Error message which also carries an MTU estimate.

If there is no cached estimate for the path MTU then the IP option is
initialized with the MTU of the directly attached I/F, otherwise the
current estimate is used.
Any router (or the end host) which detects a smaller MTU will update the
option and send an ICMP report back to the source indicating the current
MTU.  Any router (or the end host) which receives fragment 0 of a fragmented
packet, with the option indicating an MTU larger than the fragment, will
update the option and generate an ICMP report.

This option should be used infrequently.  It should probably be used at
initial connection establishment, if no cached value is available.  Thereafter,
it should be inserted occassionally to probe for MTU reduction.  On an even
less frequent interval, it could be sent with the local I/F MTU to probe
for MTU increases.

An end host which receives the option may cache the value for the receive
path, but should endeavor to learn the  MTU for the transmit path to deal
with asymetric routes.  In the absense of a transmit MTU estimate, a receive
MTU estimate may be reasonable candidate.

Feel free to paint a large bull's eye on this and use for target practice.

+-----------------------------------------------------------------------+
|	Art Berggreen		Advanced Computer Communications	|
|	<art@sage.acc.com>	Santa Barbara Street			|
|	(805)963-9431		Santa Barbara, CA 93101			|
+-----------------------------------------------------------------------+



From jnc@PTT.LCS.MIT.EDU  Sun Dec 10 19:05:51 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA24242; Sun, 10 Dec 89 19:05:51 PST
Received: by decwrl.dec.com; id AA23226; Sun, 10 Dec 89 19:05:47 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA25533; Sun, 10 Dec 89 22:05:23 EST
Date: Sun, 10 Dec 89 22:05:23 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <8912110305.AA25533@PTT.LCS.MIT.EDU>
To: deering@pescadero.stanford.edu
Subject: Re:  RF flag
Cc: jnc@lcs.mit.edu, mtudwg

	Well, actually, it turns out congestion is also stuck in my area,
but yes, your point is well taken. We have an IESG meeting tomorrow and
I will ask whether people want to release this bit toMTU discovery or
whetehr to save it for the congestion stuff. I'll let you all know ASAP
what the general consensus is.

	noel

From jnc@PTT.LCS.MIT.EDU  Sun Dec 10 19:22:43 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA24330; Sun, 10 Dec 89 19:22:43 PST
Received: by decwrl.dec.com; id AA24220; Sun, 10 Dec 89 19:22:40 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA25559; Sun, 10 Dec 89 22:22:04 EST
Date: Sun, 10 Dec 89 22:22:04 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <8912110322.AA25559@PTT.LCS.MIT.EDU>
To: sytek!kzm@hplabs.hp.com
Subject: Re:  My comments
Cc: jnc@lcs.mit.edu, mtudwg

	Keith, I think your analysis and summary is right on the nose. I
guess I have a couple of 'off the cuff' (i.e. I may be full of s^&*)
engineering taste reactions to your summary.
	While it's true that something requiring an extra option to be
recognized and acted on by routers will take a while, it will take just
as long (and probably longer) to get all the *hosts* modified to recognize
an option. Remember, whatever scheme is devised must work *reasonably* well
in the presence of hosts and/or routers which have not yet been upgraded to
recognize it. This argues for something (possibly kludgy) using existing
things that everyone is guaranteed to have (such as the idea of sending just
a large first fragment and looking at the 'fragment time exceeded' messages
that come back).
	However, I always favor doing the 'technically right' thing over the
'expedient' thing, if at all possible. However, in this case, I'm not sure
how useful that is, since in the long run the Open Routing architecture will
allow you to discover the MTU of a route (or even ask for a route with an
MTU larger than the shortes). However, the 'long run' could be quite a while.
	Where does this leave me? I'm not sure, unfortunately. I guess my
initial reaction is that I could see living with any of the three schemes;
1063, RF option, and sending only the first fragment; each has advantages
and disadvantages in terms of deployment. Does any of them give us some
capability the other does not, or cost a lot less in operation?

	Noel


From jnc@PTT.LCS.MIT.EDU  Sun Dec 10 19:55:52 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA24512; Sun, 10 Dec 89 19:55:52 PST
Received: by decwrl.dec.com; id AA26788; Sun, 10 Dec 89 19:55:47 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA25661; Sun, 10 Dec 89 22:55:41 EST
Date: Sun, 10 Dec 89 22:55:41 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <8912110355.AA25661@PTT.LCS.MIT.EDU>
To: smb@research.att.com
Subject: Re:  last-hop routers, raising the MTU
Cc: jnc@lcs.mit.edu, mtudwg

	Whoa! I don't think your assertion that the last hop router will
know the host's MTU is correct. Routers have to be able to receive and
send the MTU on any interface, but they aren't required to know what any
host is using (and have no way of finding that info out anyway). The rule
is that 'a host must not send a larger datagram [than 576] without explicit
knowledge or prior arrangement with the destination host'. This puts the
onus on the end hosts, and frees the routers from getting involved in the
game. It is perfectly possible to send a packet to a host that's bigger than
the host is ready to receive....

	However, this gives me an idea: the bug with 1063 is that it doesn't
work if all the intermediate routers (and end host) don't understand it.
Maybe we can tell if one of the routers along the way didn't grok it?  I
thought of a number of algorithms, but this one seems best: suppose each hop
puts the address of the next hop in the option; when the option is seen in
incoming processing, you check the address to see if it's yours. If not,
somebody didn't grok the option, and you set the MTU to 576.
	I don't think this will be massively expensive; it's only a couple
of instructions in router codes I have looked at to check the packet against
your IP addresses on the incoming interface. Also, it handles the incremental
deployment issues I raised in a previous message.
	Of course, it won't work with ARP subnet rouing (unless you special
case it to assume that a packet with the 'next hop' on another subnet was
actually to you), but to my mind that's a feature, not a bug!

	Noel


From art@sage.acc.com  Sun Dec 10 21:06:06 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA24887; Sun, 10 Dec 89 21:06:06 PST
Received: by decwrl.dec.com; id AA01989; Sun, 10 Dec 89 21:06:01 -0800
Message-Id: <8912110506.AA01989@decwrl.dec.com>
Date: 10 Dec 89 21:00:00 PST
From: art@sage.acc.com
Subject: MTUs on different paths
To: "mtudwg" <mtudwg>


I hadn't seen anyone point out an obvious point, so I thought that I'd
add it to the discussion.

Not only can the MTUs in both directions differ (because of asymetric
paths), but the MTUs between a pair of hosts can potentially depend
on TOS, precedence, and/or policy if any of these ever gets implemented.

We should probably consider this in any MTU discovery mechanism.

+-----------------------------------------------------------------------+
|	Art Berggreen		Advanced Computer Communications	|
|	<art@sage.acc.com>	Santa Barbara Street			|
|	(805)963-9431		Santa Barbara, CA 93101			|
+-----------------------------------------------------------------------+



From deering@Pescadero.Stanford.EDU  Mon Dec 11 01:34:21 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA26546; Mon, 11 Dec 89 01:34:21 PST
Received: by decwrl.dec.com; id AA21521; Mon, 11 Dec 89 01:34:15 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA04791; Mon, 11 Dec 89 01:33:54 PDT
Date: 11 Dec 1989 1:20-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: FDDI-Ether bridges
To: mtudwg
Message-Id: <89/12/11 0120.002@pescadero.stanford.edu>
In-Reply-To: Craig Partridge's message of Thu, 30 Nov 89 073107 -0500

Craig wrote:

>	We may also use MTU discovery to help solve FDDI-Ethernet bridging
>	problems (mismatched MTUs) -- note this requires the use of an option.

Well, last week I had the dubious pleasure of attending the FDDI Plenary
meeting in San Diego, and there I learned that the current thinking on
FDDI-Ether bridges is that, to handle the changes of MTU, the bridges
are going to ... wait for it ... perform IP fragmentation!

In other words, they are going to build IP routers and call them
"bridges" for marketing reasons.

In that case, my report-fragmentation approach will do the right thing.
If you want the MTU option approach to work with such "bridges", you'd
better make sure they include IP option handling, as well as
fragmentation.

>	(But I don't hold with folks who say let FDDI-Ethernet bridge
>	builders stew).

No.  They should be exterminated immediately!

Steve

From deering@Pescadero.Stanford.EDU  Mon Dec 11 02:52:06 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA26902; Mon, 11 Dec 89 02:52:06 PST
Received: by decwrl.dec.com; id AA27026; Mon, 11 Dec 89 02:52:02 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA06695; Mon, 11 Dec 89 02:50:49 PDT
Date: 11 Dec 1989 1:41-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: MTU stuff
To: mtudwg
Message-Id: <89/12/11 0141.001@pescadero.stanford.edu>

Some more random comments.

I'm puzzled.  Some of you reject the report-fragmentation approach
because it causes fragmentation to occur every once in a while.
Instead, you suggest the use of an IP option to discover the
MTU in advance.  For performance reasons, you realize you don't
want to send the option very often.  But that means that a
downward change in MTU can cause *many* more of the dreaded
fragmentations to occur, until you get around to asking for the
MTU again.

Keith's report-next-N-fragmentations scheme addresses this problem,
but requires messy state maintenance and probably degrades performance
(matching the state -- dest/TOS/etc. -- and counting up to N).

Assuming an IP-layer MTU cache, my scheme causes fragmentation to occur
for one RTT every 10 or 15 minutes, only on those paths whose MTU is
smaller than you want to send [i.e., less than MIN(MSS,first-hop-MTU)].
Doesn't sound like such a big deal to me.  This strategy of "banging
your head against a brick wall just to check if the wall is still there"
(in Keith's words) is exactly analogous to Van's algorithm for
determining the optimum window size, in which an occasional packet
loss is tolerated.

On the question of whether or not a gateway can tell if it is the last
hop for a particular datagram, the semantics of strict source routing
make it mandatory that a gateway be able to tell if a destination
is directly reachable.  If proxy ARP or subnetting implementations are
deceiving some gateways, then they are violating the security assumptions
behind strict source routing.

Furthermore, while it may be true that a gateway may not know the
MTU of a neighboring host, the gateway is only required to fragment
a datagram to the "natural" MTU of the intervening subnet.  That means,
if a host advertises an MSS of any value less than or equal to the natural
MTU of its connected subnet, then the host's MTU must be at least as
big as that MSS.  That is:

	host-MTU must be >= MIN (advertised-MSS, subnet-MTU)

	e.g., an Ethernet host must not advertise an MSS of 1500
	      if its MTU is only 576.

(Not exactly right, since MTUs include space for the IP header and MSSs
don't, but you get the idea.  I also am overlookng the issue of subnets
with no "natural" MTU, such as HyperChannel, or with more than one
"natural" MTU, such as bridged abominations.)

Steve

From deering@Pescadero.Stanford.EDU  Mon Dec 11 03:17:18 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA27046; Mon, 11 Dec 89 03:17:18 PST
Received: by decwrl.dec.com; id AA29085; Mon, 11 Dec 89 03:17:14 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA07189; Mon, 11 Dec 89 03:16:56 PDT
Date: 11 Dec 1989 2:53-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: MTUs on different paths
To: art@sage.acc.com
Cc: mtudwg
Message-Id: <89/12/11 0253.319@pescadero.stanford.edu>
In-Reply-To: art's message of 10 Dec 89 210000 PST

>	I hadn't seen anyone point out an obvious point, so I thought that
>	I'd add it to the discussion.
>
>	Not only can the MTUs in both directions differ (because of asymetric
>	paths), but the MTUs between a pair of hosts can potentially depend
>	on TOS, precedence, and/or policy if any of these ever gets
>	implemented.

You are right that it hasn't come up in the discussions, but it is
mentioned in both of the written proposals: in the second paragraph
on page 6 of RFC-1063, and in the last paragraph on page 6 of my
draft RFC.

There is, however, a problem with the RFC-1063 approach of allowing
the Reply MTU to be piggybacked on any returning datagram -- the
association between the MTU and its corresponding TOS or other
route-influencing options may be lost.  This leads me to suggest
that there are only three reasonable ways of returning MTU information
to a host:

	(1) in an ICMP message, with the header of the MTU-seeking
	    datagram included.

	(2) in an IP or higher-layer option attached to a higher-layer
	    acknowledgement of an MTU-seeking datagram.

	(3) in an IP option that contains *all* of the relevent
	    information (TOS, security, etc.), attached to any datagram
	    returning to the source of an MTU-seeking datagram.

Steve

From craig@NNSC.NSF.NET  Mon Dec 11 05:41:35 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA01418; Mon, 11 Dec 89 05:41:35 PST
Received: by decwrl.dec.com; id AA10836; Mon, 11 Dec 89 05:41:32 -0800
Message-Id: <8912111341.AA10836@decwrl.dec.com>
To: jnc@allspice.lcs.mit.edu
Cc: mtudwg
Subject: rfc 1063 and intermediate routers
Date: Mon, 11 Dec 89 08:39:39 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


>	However, this gives me an idea: the bug with 1063 is that it doesn't
> work if all the intermediate routers (and end host) don't understand it.

Noel:

    Actually, RFC 1063 works fine in the face of one or two non cooperating
routers.  The requirement is that you take lower of the MTU of the inbound
*and* outbound interfaces and compare with the option.  So if someone in
the path drops the ball, its OK.

    Note routers have to have a time when they know both inbound and outbond
interfaces (or ICMP redirects can't be done) but some folks have grumbled
they didn't buy into option processing there...  Dunno if that's proper
of them....

Craig

From craig@NNSC.NSF.NET  Mon Dec 11 05:49:35 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA01590; Mon, 11 Dec 89 05:49:35 PST
Received: by decwrl.dec.com; id AA11386; Mon, 11 Dec 89 05:49:32 -0800
Message-Id: <8912111349.AA11386@decwrl.dec.com>
To: deering@pescadero.stanford.edu
Cc: mtudwg
Subject: re: MTUs on different paths
Date: Mon, 11 Dec 89 08:49:01 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


> There is, however, a problem with the RFC-1063 approach of allowing
> the Reply MTU to be piggybacked on any returning datagram -- the
> association between the MTU and its corresponding TOS or other
> route-influencing options may be lost.

Steve:
    
    Well, this is one of the two approaches.

    The other approach has TCP initiating the options and TCP, could
conceivably, retrieve the option and direct IP as to the TOS being used.

Craig

From jnc@PTT.LCS.MIT.EDU  Mon Dec 11 08:18:55 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02435; Mon, 11 Dec 89 08:18:55 PST
Received: by decwrl.dec.com; id AA06327; Mon, 11 Dec 89 08:18:35 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA27518; Mon, 11 Dec 89 11:18:01 EST
Date: Mon, 11 Dec 89 11:18:01 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <8912111618.AA27518@PTT.LCS.MIT.EDU>
To: craig@nnsc.nsf.net
Subject: Re:  rfc 1063 and intermediate routers
Cc: jnc@PTT.LCS.MIT.EDU, mtudwg

	Craig, that algorithm doesn't work if you have two non-knowing routers
connected by a network with a very small MTU; neither the router before or
after the pair knows about the small MTU. (That was one of the algorithms I
discarded.) I thought about adding something like that as an optimization to
my algorithm, but you have to be able to guarantee that there is at most one
intervening router, and I couldn't think of a good one. Making a copy of
the hop count might work, I suppose. Still, is the optimization worth it
if we expect the option to be widely deployed quickly?

	Also, I think Steve's point about the costs of fragmentation not
being excessive is a good one.
	Still, I think we need to look for a mechanism that will work OK (i.e.
produce smaller packets rather than fragmented packets) if it encounters a
host or router which has not yet been upgraded. Schemes that use fragmentation
look more attractive to me now because of this.

	Noel


From mogul  Mon Dec 11 13:38:39 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA05041; Mon, 11 Dec 89 13:38:39 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8912112138.AA05041@acetes.pa.dec.com>
Date: 11 Dec 1989 1338-PST (Monday)
To: gw-discovery@gregorio.stanford.edu, mtudwg
Subject: UPDATE ON PARKING - Working Group Meeting tomorror

Over the weekend, the people around here who do such things "improved"
the "Paddleford Oldsmobile" parking lot by adding about 15 more spaces.
The bad news is that they also removed the "Paddleford Oldsmobile" sign.
So, this lot is now almost entirely anonymous.

The best way to recognize it is that it is the first, and only, parking
lot mostly enclosed with a tall cyclone fence on the (logical) east
side of Alma between Homer and Forest.  Also, on the wall of the building
at the north end of the lot, it says something like "towing   Ellison's".

Remember, if you get confused or if the lot is full or if a large
hungry lion is roaming around when you try to park there, park
temporarily on the street near our building and ask the receptionist
(probably named "Suzy" or "Susie", we have one of each) for help.

-Jeff

From philipp@gipsi.gipsi.fr  Mon Dec 11 15:51:49 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA06062; Mon, 11 Dec 89 15:51:49 PST
Received: by decwrl.dec.com; id AA08007; Mon, 11 Dec 89 15:51:42 -0800
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA19894; Mon, 11 Dec 89 23:49:29 +0100 (MET)
Received: by gipsi.gipsi.fr; Mon, 11 Dec 89 16:10:42 -0100 (MET)
Date: Mon, 11 Dec 89 16:10:42 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8912111510.AA16797@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: jnc@ALLSPICE.LCS.MIT.EDU
Subject: Re:  last-hop routers, raising the MTU
Cc: MTU Discovery <mtudwg>

		However, this gives me an idea: the bug with 1063 is that it
	doesn't work if all the intermediate routers (and end host) don't
	understand it.  Maybe we can tell if one of the routers along the way
	didn't grok it?  I thought of a number of algorithms, but this one seems
	best: suppose each hop puts the address of the next hop in the option;
	when the option is seen in incoming processing, you check the address to
	see if it's yours. If not, somebody didn't grok the option, and you set
	the MTU to 576.

"Loose source route record", "Strict Source Route Record", now "Source Route
and MTU Record"...

This sounds really broken.  One wants to find out the MTU of a dynamic
route (yes, I know it doesn't change that often), rather than fix the
route and then discover (almost by hazard) the MTU.  It is putting the
cart before the horse (mixing apples and oranges, and half a dozen other
cliche's).

-Philip

From jnc@PTT.LCS.MIT.EDU  Mon Dec 11 15:54:22 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA06096; Mon, 11 Dec 89 15:54:22 PST
Received: by decwrl.dec.com; id AA08414; Mon, 11 Dec 89 15:54:09 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA29180; Mon, 11 Dec 89 18:53:46 EST
Date: Mon, 11 Dec 89 18:53:46 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <8912112353.AA29180@PTT.LCS.MIT.EDU>
To: jnc@PTT.LCS.MIT.EDU
Subject: Re:  RF flag
Cc: deering@pescadero.stanford.edu, jnc@lcs.mit.edu.mtudwg

	Well, I checked with the IESG about 'The Bit', and while there wasn't
a clear consensus about what we *should* use it for, the general feeling was
that MTU discovery probably wasn't it. So, that one's out (although you could
still have such a bit, albeit in an option which you insert every so often).

	Noel

From jnc@PTT.LCS.MIT.EDU  Mon Dec 11 16:09:48 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA06186; Mon, 11 Dec 89 16:09:48 PST
Received: by decwrl.dec.com; id AA10322; Mon, 11 Dec 89 16:09:45 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA29266; Mon, 11 Dec 89 19:09:40 EST
Date: Mon, 11 Dec 89 19:09:40 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <8912120009.AA29266@PTT.LCS.MIT.EDU>
To: philipp@gipsi.gipsi.fr
Subject: Re:  last-hop routers, raising the MTU
Cc: jnc@PTT.LCS.MIT.EDU, mtudwg

	Apparently I phrased that suggestion unclearly. Only *one* address
would be in the option; the next hop. At each router, the 'next hop' address
would be checked to see if it was that router. If not, some router in the
middle did not understand (and correctly update) the option.
	I'm not saying this is a great idea; it's just a way of telling (in
that particular scheme) if some box in the middle isn't with it. Remember,
incremental deployment is one thing we have to worry about. One thing I
think we *don't* want MTU discovery to do is cause *every* packet to be
fragmented because some intermediate router has a small MTU but didn't say
so. On the other hand, maybe we do want to punish people who don't do MTU
discovery fairly quickly! :-)

	Noel


From deering@Pescadero.Stanford.EDU  Mon Dec 11 17:02:17 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA06428; Mon, 11 Dec 89 17:02:17 PST
Received: by decwrl.dec.com; id AA16926; Mon, 11 Dec 89 17:02:13 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA11654; Mon, 11 Dec 89 17:02:04 PDT
Date: 11 Dec 1989 16:32-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re:  RF flag
To: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Cc: mtudwg
Message-Id: <89/12/11 1632.052@pescadero.stanford.edu>
In-Reply-To: jnc's message of Mon, 11 Dec 89 185346 EST


>	...the general feeling was that MTU discovery probably wasn't it.
>	So, that one's out...

The second phrase does not follow from the first.  I would interpret
the first phrase as an invitation to convince the IESG that MTU
discovery *is* what the bit should be used for.  Or was the decision
really, "It *shall* not be used for that purpose," and you were just
trying to be gentle?

>	(although you could still have such a bit, albeit in an option
>	which you insert every so often).

That's greatly inferior, as you know.  If the header bit is unavailable,
I'd be interested in exploring some of the approaches that Rich Fox
has suggested.  That is, let the transport protocol inform its peer
that it is willing to receive fragmentation reports.  The way of
asking for reports may in fact be an IP option inserted by the
transport protocol at connection-setup time (for connection or session
oriented protocols, at least), and the way of informing the sender that
fragmentation occurred may in fact be an ICMP message sent by the
transport protocol.  IP-layer MTU caching could still be used to
share discovered MTU info between multiple transport connections, and
to reduce the frequency of sending first-hop-MTU-size datagrams to
probe for MTU increases.  It would require minimal additional host
state (one extra bit in the state already maintained for each
connection/session/association/whatever), and, like the RF header
bit scheme, would detect an MTU decrease in the shortest possible time
(one RTT).

Steve

From mogul  Mon Dec 11 18:27:55 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA06895; Mon, 11 Dec 89 18:27:55 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8912120227.AA06895@acetes.pa.dec.com>
Date: 11 Dec 1989 1827-PST (Monday)
To: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Cc: mtudwg
Subject: Re:  last-hop routers, raising the MTU
In-Reply-To: jnc@PTT.LCS.MIT.EDU (Noel Chiappa) / Sun, 10 Dec 89 22:55:41 EST.
             <8912110355.AA25661@PTT.LCS.MIT.EDU>

	    Whoa! I don't think your assertion that the last hop router will
    know the host's MTU is correct. Routers have to be able to receive and
    send the MTU on any interface, but they aren't required to know what any
    host is using (and have no way of finding that info out anyway). The rule
    is that 'a host must not send a larger datagram [than 576] without explicit
    knowledge or prior arrangement with the destination host'. This puts the
    onus on the end hosts, and frees the routers from getting involved in the
    game. It is perfectly possible to send a packet to a host that's bigger than
    the host is ready to receive....

Noel, you're confusing MTU and MSS.  The assertion is correct, ignoring
the possibility of translucent bridges, or else how could fragmentation
possibly work?!

-Jeff

From deering@Pescadero.Stanford.EDU  Mon Dec 11 20:40:28 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA07497; Mon, 11 Dec 89 20:40:28 PST
Received: by decwrl.dec.com; id AA11390; Mon, 11 Dec 89 20:40:25 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA12530; Mon, 11 Dec 89 20:40:12 PDT
Date: 11 Dec 1989 20:33-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: MTUs on different paths
To: Craig Partridge <craig@NNSC.NSF.NET>
Cc: mtudwg
Message-Id: <89/12/11 2033.712@pescadero.stanford.edu>
In-Reply-To: Craig Partridge's message of Mon, 11 Dec 89 084901 -0500

me:	There is, however, a problem with the RFC-1063 approach of allowing
	the Reply MTU to be piggybacked on any returning datagram -- the
	association between the MTU and its corresponding TOS or other
	route-influencing options may be lost.

Craig:	Well, this is one of the two approaches.
	The other approach has TCP initiating the options and TCP, could
	conceivably, retrieve the option and direct IP as to the TOS being
	used.

Yes, that's the second of my "three reasonable ways to return MTU
information".

Steve

From philipp@gipsi.gipsi.fr  Tue Dec 12 04:01:12 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09491; Tue, 12 Dec 89 04:01:12 PST
Received: by decwrl.dec.com; id AA21315; Tue, 12 Dec 89 04:01:06 -0800
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA18585; Tue, 12 Dec 89 13:00:20 +0100 (MET)
Received: by gipsi.gipsi.fr; Tue, 12 Dec 89 13:00:53 -0100 (MET)
Date: Tue, 12 Dec 89 13:00:53 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8912121200.AA01896@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: art@sage.acc.com
Subject: Re:  YAMDI (Yet Another Mtu Discovery Idea)
Cc: MTU Discovery <mtudwg>

I suggest that it should have NO state in the ISs and (any) state
be confined to the ESs (possibly the transport layers, where it
belongs)...

-Philip

From philipp@gipsi.gipsi.fr  Tue Dec 12 05:52:33 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA13434; Tue, 12 Dec 89 05:52:33 PST
Received: by decwrl.dec.com; id AA01718; Tue, 12 Dec 89 05:52:26 -0800
Received: from gipsi.gipsi.fr by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA08185; Tue, 12 Dec 89 14:51:32 +0100 (MET)
Received: by gipsi.gipsi.fr; Tue, 12 Dec 89 14:52:05 -0100 (MET)
Date: Tue, 12 Dec 89 14:52:05 -0100
From: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <8912121352.AA02310@gipsi.gipsi.fr>
Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: art@sage.acc.com
Subject: Re:  MTUs on different paths
Cc: MTU Discovery <mtudwg>

When TCP receives a connection request, is it compelled to
complete the connect (SYN-ACK, and all that) at the same TOS?
If so, then the piggy-backing problem isn't (a problem), since
the information will be symmetrically conveyed...

-Philip

From mogul  Tue Dec 12 18:35:51 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA17191; Tue, 12 Dec 89 18:35:51 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8912130235.AA17191@acetes.pa.dec.com>
Date: 12 Dec 1989 1835-PST (Tuesday)
To: mtudwg
Cc: 
Subject: Meeting report

This is the result of about 45 minutes of frenzied typing; I wanted
to get this down before I forgot anything.  Doubtless I have both
put too much in, and left a lot out.  Meeting attendees, please correct
me if I have made any serious mistakes.  I will then send a corrected
report to the IETF poobahs.

Please do NOT try to re-argue things over this report; I am trying
to record what happened, not continue our arguments.  After the final
draft of the meeting report is agreed upon, we can start arguing protocols
again.

Thank you.

-Jeff

	MTU Discovery Working Group
	Chairperson: Jeffrey Mogul/DECWRL

	CURRENT MEETING REPORT
	Reported by Jeffrey Mogul

	AGENDA

		a) Discuss proposed MTU Discovery protocols
		b) Attempt a consensus protocol
		c) Find a victim to write up a draft
		d) Set next meeting date

	ATTENDEES

	Art Berggreen		art@salt.acc.com
	Noel Chiappa		jnc@PTT.LCS.MIT.EDU
	Farokh Deboo		sun!iruucp!ntrlink!fjd
	Steve Deering		deering@pescadero.stanford.edu
	Rich Fox		sytek!rfox@sun.com
	Ivan Liu		iliu@orville.nas.nasa.gov
	Keith Mc Cloghrie	sytek!kzm@hplabs.HP.COM
	Jeff Mogul		mogul@decwrl.dec.com
	Nuggehalli Pradeep	pradeep@orville.nas.nasa.gov
	Stephanie Price		cmcvax!price@hub.ucsb.edu

	[Noel Chiappa participated via telephone]

	MINUTES

	This was the first meeting of the MTU Discovery Working Group.
	We had already made and discussed a number of proposals for
	a protocol design, and had also discussed (over the mailing
	list) a number of technical and non-technical constraints
	on such a protocol.
	
	The most important non-technical constraint was that we wanted
	to devise a protocol that would work fairly well, or at least
	no worse than "no protocol at all", in the presence of large
	numbers of unconverted hosts and routers.
	
	Technical constraints include issues such as the cost of
	processing options; the possible use of the reserved bit
	in the IP header [probably not available to us]; the layers
	in which the MTU discovery protocol is implemented; the need
	to support TOS, security, and asymmetric paths; deciding when
	to send IP options; the problem of LANs with more than one
	MTU [a possible consequence of the use of bridges between
	Ethernets and FDDI]; the delays in propagation of information
	through the network; the realization that the path MTU is
	first known at the wrong end of the path;

	The proposals made before the meeting basically fell into two
	categories: those that probed the network to find out the path
	MTU (the minimum MTU over a path), essentially by asking the
	routers along the path to report the MTU, and those that asked
	the receiving host to report fragmentation when it occurs, with
	the understanding that the size of first fragment of a packet
	received probably reflects the path MTU.  In the latter case,
	the sender must send large packets occasionally in order to
	discover if they will be fragmented.
	
	The "Report Fragmentation" approach would be cleanest if we
	could have used the reserved bit in the IP header as a flag
	to tell the receiver that the sender is willing to receive
	and utilize a (new) ICMP Fragmentation Occured message.  However,
	we were told that this bit is unlikely to be released for this
	purpose.  "Report Fragmentation" (R-F) can also be done using an
	IP header option, again "allowing" the receiver to send the
	ICMP report.
	
	R-F has the advantage that it requires no changes in the routers,
	but the disadvantage that it requires changes in most end-hosts
	before it does much good.  (If the receiving host does not implement
	it, the sending host could obliviously continue to send packets
	that are being fragmented and perhaps lost.)  During the meeting,
	we discussed how to decide when and how often to send the ICMP
	Fragmentation Occurred message, and which layer should send it.

	Since option-processing is expensive for routers, we believe
	that the RF option cannot be sent on every packet.  Thus, the
	receiving host should remember that a sender has specified
	Report Fragmentation, and if fragmentation does occur later
	on, the ICMP should be sent even if the fragmented packet did
	not carry the option.

	Since some protocols on the sending host (e.g., NFS) might not
	be able to use the MTU information even thought others (e.g., TCP)
	might have requested it, we felt that it was necessary to send
	fragmentation reports in response only to those host+protocol+port
	tuples that had sent the RF option; this means that the receiving
	host must keep a table keyed in this way, and probably that it
	has to be maintained by the transport protocols (TCP, UDP, etc.)
	At the same time, it was felt to be unfortunate that the transport
	protocols would be burdened with this chore; we consider it an
	"implementation suggestion" rather than a protocol specification.
	
	Talk then turned to the "MTU Probe Option" approach.  In this
	approach (as it evolved from RFC1063 before the meeting), the
	sender would (occasionally) send this option on packets flowing
	on the connection.  The option would have three fields: a "next
	hop IP address field", an "OK" field, and an "minimum MTU" field.
	The initial values would be the first hop router address, "true",
	and the MTU of the first-hop link.  Each router along the path
	would set the MTU to the min of the current value and the MTUs
	of the incoming and outgoing paths.  If its own address was NOT
	the same as the "next hop" field, it would set the OK field to
	"false"; otherwise, it would change the next-hop field.  In any
	case, the option is forwarded (but not copied on fragmentation).
	
	The last-hop router (it should be able tell that it is such;
	we'll address the FDDI-Ethernet bridge issue somehow) does the
	same thing to the option as the previous routers, but if the OK
	field is still "true", it now knows the path MTU.  It therefore
	sends a (new) ICMP Path MTU message back to the sender, including
	the usual IP header info for matching at the sender.  In any
	case, the option continues to the receiving host.
	
	Note that the sender will not get a Path MTU message unless
	every router along the way understands this protocol.  This
	is because we could otherwise be misled by a low-MTU link
	bordered by two unconverted routers.  However, we believe that
	routers will be converted much sooner than most end hosts.
	
	Since the option is also received by the ultimate receiving host,
	that host can also interpret this option as "Report Fragmentation"
	flag (as above).  This is a backup mechanism; if the Path MTU
	message is not generated, or if the MTU then decreases enough
	to cause fragmentation, the sender will still find out.  Of course,
	the sender cannot know that the receiver is doing this.  One
	partial solution is that if the receiver gets a MTU Probe option
	with the OK field = false, then it should send an Path MTU message
	to the sender with a code indicating "unknown"; this tells the
	sender that it is OK to use the "Report Fragmentation" approach.
	If the sender receives neither kind of Path MTU message, then it
	must assume that it will not receive Fragmentation Occurred
	reports, and it should stick to the current "no more than 576
	bytes if non-local" rule.
	
	This hybrid approach seems (to the attendees, at least) to
	combine the best of both methods: it gives accurate, early
	results (i.e., before a connection has to start sending
	big datagrams) without incurring fragmentation if the routers
	cooperate, it detects fragmentation if the receiver cooperates,
	and it causes conservative behavior otherwise.
	
	There are still several issues to nail down, including
	how often to send the MTU Probe option, how many times to
	send the Fragmentation Occurred ICMP message, etc.
	
	Keith McCloghrie and Rich Fox were volunteered to write up
	a draft RFC, which we hope to circulate several weeks before
	the next IETF meeting.
	
	We expect to meet again at the February IETF meeting.

From craig@NNSC.NSF.NET  Wed Dec 13 06:00:31 1989
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA23927; Wed, 13 Dec 89 06:00:31 PST
Received: by decwrl.dec.com; id AA24077; Wed, 13 Dec 89 06:00:24 -0800
Message-Id: <8912131400.AA24077@decwrl.dec.com>
To: mtudwg
Subject: quibbling with Meeting report
Date: Wed, 13 Dec 89 08:59:50 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


Hi Jeff:

    The meeting report looks very nice (you guys didi some hard work).

    But... I'd like to urge you all to reconsider the notion the MTU
is stored per transport protocol.  NFS *CAN* use MTU information
as can most other applications if it is made available to them....

Craig

From mogul  Wed Dec 13 13:37:30 1989
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA26146; Wed, 13 Dec 89 13:37:30 PST
From: mogul (Jeffrey Mogul)
Message-Id: <8912132137.AA26146@acetes.pa.dec.com>
Date: 13 Dec 1989 1337-PST (Wednesday)
To: Craig Partridge <craig@nnsc.nsf.net>
Cc: mtudwg
Subject: Re: quibbling with Meeting report
In-Reply-To: Craig Partridge <craig@NNSC.NSF.NET> / 
		Wed, 13 Dec 89 08:59:50 -0500.
             <8912131400.AA24077@decwrl.dec.com>

	But... I'd like to urge you all to reconsider the notion the MTU
    is stored per transport protocol.  NFS *CAN* use MTU information
    as can most other applications if it is made available to them....

A misimpression conveyed by my summary, I guess.  Senders store MTU
per destination (i.e., in the IP layer).  The receiver, we decided,
should not send an ICMP Fragmentation Report message in reply to
an NFS packet unless it has received an option from that host+port
indicating that the NFS implementation ON THAT HOST is willing to
do something with this ICMP.  Otherwise, we are just filling the
internet with useless ICMPs.

Consider the case where one pair of hosts simultaneously has an
NFS and a TCP connection in progress.  Suppose that the receiver
stored the "sent RF" per-host, rather than per-port.  Then, suppose
that the sender TCP is sending the RF flag (in an option or wherever)
but the NFS is not (because, for whatever reason, the sender's NFS
is not willing to listen to the Fragmentation Reports).  Then, the
receiver will continually send Frag Reports to the sender in response
to NFS packets, even though (1) the sender's TCP may never cause
fragmentation and (2) the sender's NFS will never do anything with
these ICMPs.  Wasted bandwidth.

But this is an "implementation suggestion", perhaps even a "good
citizen requirement", not a part of the actual protocol spec.

-Jeff

From mogul  Fri Jan 12 15:35:25 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA26646; Fri, 12 Jan 90 15:35:25 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9001122335.AA26646@acetes.pa.dec.com>
Date: 12 Jan 1990 1535-PST (Friday)
To: mtudwg
Cc: 
Subject: Finally, some visible progress

Most of you may have wondered what has happened to this working group.
Well, as you may remember, Keith McCloghrie and Rich Fox volunteered at
the meeting (exactly one month ago today) to draft an RFC describing
the protocol we arrived at during the meeting.

Keith, Rich, and I have exchanged numerous messages and several drafts
of the RFC, and (because the February IETF is less than a month away)
it is now time to circulate it among the members of the group.

Some of you might notice on your own that we've made some changes from
the consensus proposal that emerged from the meeting.  Most importantly,
we have eliminated any transport-level involvement in the discovery
protocol itself.  I don't think any of you actually wanted transport-level
involvement, although some argued that it appeared to be necessary.
Keith and Rich have worked out a simple, although fairly subtle, mechanism
that allows all the work to be done at the IP level and yet doesn't pollute
the net with lots of ICMPs if someone happens to run NFS at the wrong time.

The very astute reader will realize that this is no longer really Steve
Deering's "Report Fragmentation" scheme at all, but something that we
are calling "Unexpected Fragment Report" which tracks changes in the
apparent MTU rather than simply the occurrence of fragmentation.  For
the less-astute reader: well, now you know anyway.

We have also simplified the format of the IP Path MTU (PMTU) Query
option; this was driven by the scarcity of space in the IP header
option area.  The "Valid" flag is now implicitly encoded in the
next-hop address field, saving one bit.  The "Fragmentation Report
Allocation" (original Keith's send-N reports mechanism) has been
changed, from something sent in the option by the sender, to an
architected constant; this is because we didn't expect the senders to
actually excercise any discretion in the value, and we saved another
few bits in the IP option (meaning at least one byte!).

My hope is that during the next 3 weeks we will be able to arrive at a
consensus that the basic scheme is either sound or unsound, and argue
about some of the details.  At the February IETF meeting (which Keith,
Rich, and I plan to attend) we have a half-afternoon session scheduled
(Wednesday, Feb. 7), and I hope that at that meeting we can lay to rest
any remaining doubts.  In other words, allowing some time for final
draft preparation, we should have an RFC out in early March.

The RFC itself follows in another message.

-Jeff

From mogul  Fri Jan 12 15:40:58 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA26665; Fri, 12 Jan 90 15:40:58 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9001122340.AA26665@acetes.pa.dec.com>
Date: 12 Jan 1990 1540-PST (Friday)
To: mtudwg
Cc: 
Subject: Draft RFC on Path-MTU Discovery

Network Working Group                K.McCloghrie, Hughes LAN Systems
Request for Comments: DRAFT                R. Fox, Hughes LAN Systems
                                          J. Mogul, Digital Equipment
                                                      12 January 1990

		    WORKING DRAFT - Do not circulate

                       Path-MTU Discovery Protocol


     1.  Status of this Memo

     This memo describes a protocol for discovering the maximum
     transmission unit of an internet path, using one new IP option
     and two new ICMP messages.  This is proposed as an alternative
     to the procedures described in RFC-1063.  This memo does not
     define an Internet standard.   Distribution of this memo is
     unlimited.


     2.  Introduction

     When one IP host has a large amount of data to send to another
     host, the data is transmitted as a series of IP datagrams. It is
     preferable, in the general case, that these datagrams be of the
     largest size which does not require fragmentation during
     transmission.  This size is referred to as the Path-MTU (PMTU)
     of the path from the source to the destination, and is equal to
     the minimum of the MTUs of each hop in the path, where the MTU
     of a hop is the maximum size of an IP datagram on that hop.  A
     shortcoming of the current Internet protocol suite is the lack
     of a standard mechanism for a host to discover the PMTU of an
     arbitrary path.

     The reasons to avoid fragmentation and the problems it incurs
     are well-documented in [1].  Some of these problems include:

        - use of fragmentation can sometimes lead to "deterministic
          fragment loss", where something in the internetwork causes
          certain fragments to be lost with higher than usual
          probability.  For example, a router with insufficient
          buffer capacity might always drop the 4th packet in a
          burst.  Since fragments are not individually acknowledged,
          this leads to miserable performance, or total failure,
          since retransmissions of the original datagram suffer the
          same fate.  (If the datagrams are not fragmented, even when



     McCloghrie/Fox/Mogul  DRAFT                              [page 1]






     RFC DRAFT              Path-MTU Discovery            January 1990


          they are lost deterministically a protocol such as TCP will
          make slow but steady progress.)

        - sending datagrams of a size just larger than the PMTU
          causes each original datagram to be fragmented into one
          full-size and one tiny fragment.  So, half the datagrams
          are tiny fragments which makes not only for inefficient use
          of the bandwidth, but also results in the gateways having
          to forward twice as many datagrams as necessary.

        - IP reassembly depends on having unique IP Identification
          values in each in-flight datagram.  With the Ident field
          being only 16 bits wide, the need to guarantee that every
          datagram in flight from one host to another has a unique
          Ident, imposes a restriction on the maximum datagram
          transmission rate.  (See [1] for an example.)

        - IP reassembly is inherently less efficient than transport
          layer "reassembly".  (Again, see [1] for the arguments.)


     3.  Summary of the Protocol

     The PMTU Discovery Protocol proposed in this memo is a hybrid of
     two different mechanisms.  Both mechanisms are invoked by the
     sender of a datagram, using the IP PMTU-Query Option.  In the
     primary mechanism, gateways along the path use this option to
     compute the minimum MTU of any hop on the path; the last-hop
     gateway then uses an ICMP Path-MTU message to report the PMTU to
     the sending host. Provisions are made to detect if any of the
     gateways do not implement this option (in which case, the
     computed value is only an upper bound on the PMTU).  This
     mechanism does not involve participation by the receiving host,
     and so can be used without upgrading all end hosts.  The IP
     PMTU-Query option is transmitted periodically, not on all
     datagrams, so that the gateways will not be burdened by
     excessive option-processing.

     The secondary mechanism is used as a backup, in case the IP
     PMTU-Query option is not supported by all the gateways, or in
     case the route changes to one with a lower PMTU before the
     source resends the PMTU-Query.  It does require support from the
     receiving host.  The receiver uses the reception of an IP PMTU-
   ! Query as an indication that the sender has invoked the protocol,
     and as a request to cache the PMTU of the path from the sender.
     This cached value provides the receiver with a way to detect



     McCloghrie/Fox/Mogul  DRAFT                              [page 2]






     RFC DRAFT              Path-MTU Discovery            January 1990


     changes in the PMTU, by comparing the size of incoming
     fragmented datagrams against the cached PMTU. When a change in
     the PMTU value is detected, the sender is notified through the
     use of an ICMP Unexpected Fragment Report message. Mechanisms
     are provided to limit how many ICMP Unexpected Fragment Report
     messages are sent, to avoid polluting the network.


     4.  Analysis of Previous Approaches

     4.1.  RFC-1063

     RFC-1063 [2] describes one solution to the PMTU Discovery
     problem. It defines a new IP option that is examined and
     possibly updated by each gateway along a path in such a way that
     it contains the PMTU when it arrives at its destination.
     Another new IP option is used to convey the PMTU back to the
     sender, piggybacked on a datagram going in the other direction.
     Discussion of the RFC-1063 proposal (e.g. in [4]) has
     highlighted a number of drawbacks:

        - for correct operation of the scheme, all gateways along a
          path must be updated to support the new IP option, which,
          for some paths, may take a long time.  If hosts start using
          the scheme before all the gateways have been updated, they
          may end up incurring more fragmentation than if not using
          it, because they may conclude that the PMTU of a given path
          is larger than it really is, for example: when the two
          gateways connected by the hop with the minimum MTU do not
          support the new option.

        - this scheme does not work in cases where there is no return
          traffic on which to piggyback the discovered PMTU.  For
          example, a host sending unsolicited datagram "trap" or
          "event" messages to a network monitoring center would be
          unable to discover the PMTU to the monitoring center.

        - most gateways are optimized for forwarding datagrams which
          do not contain IP options.  Thus, an overhead is imposed on
          the gateways' throughput if the MTU option is sent too
          frequently.  However, sending the MTU option too
          infrequently can also cause additional overhead when a
          decrease in the PMTU occurs (e.g. due to an alternate
          routing around a link outage), since the sender will
          continue sending datagrams that need to be fragmented on
          the new path until it next uses the option and discovers



     McCloghrie/Fox/Mogul  DRAFT                              [page 3]






     RFC DRAFT              Path-MTU Discovery            January 1990


          the decrease.

     4.2.  Report Fragmentation

     To counteract these drawbacks, alternative schemes have been
     suggested (e.g. in [4]) based on the receiver reporting the
     occurrence of fragmentation to the sender via a new ICMP
     message. Such schemes have been called "report-fragmentation".
     They too, however, have a number of drawbacks:

        - to discover increases in the PMTU, report-fragmentation
          schemes require that larger datagrams are occasionally
          sent, to probe the path to determine whether they get
          fragmented.  Since the PMTU of a path changes only
          infrequently, most of these "on-purpose" fragmentations are
          otherwise unnecessary.

        - in situations where data is to be sent to a new
          destination, for which the sender has no (cached) PMTU
          information, the PMTU Discovery cannot take place until
          there is a large datagram to be sent.  In reality, most
          applications initially exchange a number of small messages
          (e.g. connection establishment messages) prior to sending
          their first large datagram. In contrast, a query-based
          scheme (like RFC-1063) can send its probe piggybacked on a
          datagram of any size, and receive the reply containing the
          PMTU during the exchange of the initial small messages so
          that all the subsequent large datagrams can be optimally
          sized.

        - a report-fragmentation scheme must specify which arriving
          fragments cause the sending of a ICMP message to report the
          fragmentation.  Sending on all occurrences would be
          excessive since there can be a round-trip time's worth of
          datagrams in-flight concurrently, each of which would
          generate an ICMP message; on a high-bandwidth/long-delay
          path this could generate hundreds or more unnecessary ICMP
          messages.  It would also be wasteful to send report
          messages to a source which would ignore them.  Alternately,
          datagrams could be marked to request that if they arrive
          fragmented, an ICMP message is to be generated.  The ideal
          way to do this is if there were a spare bit in the IP
          header (see [4]).  If no spare bit is available, then the
          mark presumably needs to be carried via an IP option, but
          this now inherits some of the drawbacks of the RFC-1063
          scheme mentioned above.



     McCloghrie/Fox/Mogul  DRAFT                              [page 4]






     RFC DRAFT              Path-MTU Discovery            January 1990


        - there are existing applications which ignore the PMTU, and
          always send larger datagrams regardless of whether
          fragmentation will result.  In order not to send
          unnecessary ICMP messages reporting the fragmentation of
          such datagrams, (until now) it has been necessary for an
          implementation to keep track of which applications are
          mindful of PMTU Discovery and which applications ignore it.
          In practice, this is probably excessive state information
          for it to be kept in the IP layer.  Thus, some amount of
          the implementation must be done in every transport/
          application layer which cares about avoiding fragmentation.
          This not only duplicates implementation effort and code,
          but probably requires separate ICMP messages to be sent for
          each transport/application which results in a significant
          increase in the overhead.


     5.  The Proposed Protocol

     5.1.  Description

     The PMTU Discovery protocol proposed in this memo defines one
     new IP option and two new ICMP messages.  The new IP option is
     the PMTU-Query option; the two new ICMP messages are the Path-
     MTU message and the Unexpected Fragment Report message.  These
     are used as follows:

          The IP PMTU-Query option can be carried on any datagram and
          asks the gateways through which it passes to update, if
          necessary, its minimum MTU value (like RFC-1063).
          However, the PMTU-Query option also contains other
          information which must be updated by each gateway
          supporting the option.  This provides the means for the
          destination to determine whether all gateways on the path
          taken by that datagram do support the option, and therefore
          whether the minimum MTU value it contains is indeed the
          PMTU or just an upper bound.

          The ICMP Path-MTU message is used to reply to a PMTU-Query
          option in order to carry the PMTU information back to the
          sender.  Since this is sent as an ICMP message (in contrast
          to RFC-1063's replying IP option), it does not require
          there to be return traffic in the other direction.  In
          addition, it can be sent immediately on receipt of the
          PMTU-Query option, rather than having to be queued in the
          receiver awaiting a datagram on which to piggyback it.



     McCloghrie/Fox/Mogul  DRAFT                              [page 5]






     RFC DRAFT              Path-MTU Discovery            January 1990


          The ICMP Unexpected Fragment Report message is sent by a
          host receiving a fragment of an unexpected size to the
          sender of the fragmented datagram.  These messages are sent
          because the unexpected size indicates that the PMTU has
          changed (i.e., no ICMP message is sent on receiving a
          fragment of the expected size).  After sending a limited
          number of ICMP Unexpected Fragment Report messages, the
          expected size is updated, so that no more will be sent
          before the next change in the PMTU.

          The PMTU-Query option contains a minimum-MTU-so-far field
          and a next-hop address field.  The minimum-MTU-so-far field
          is decreased by any gateway on the path if the MTU of the
          next/previous hop is less than the value which the field
          currently contains.  The next-hop address field is set to
          the address of the next IP gateway to which it is
          forwarded.  As each gateway processes the option, it
          expects to find its own address in the next-hop address
          field; if it does then it updates the next-hop field to the
          address to which it next forwards the datagram; otherwise,
          it sets the next-hop field to zero.  Thus, if the option
          arrives at the destination with its next-hop field non-
          zero, then all gateways along that path have updated the
          option and the minimum-MTU-so-far value is indeed the PMTU;
          otherwise, it is just a best-guess.

          The ICMP Path-MTU message is sent either by the "last-hop"
          gateway or by the destination host.  The "last-hop" gateway
          is the gateway which in processing the datagram recognizes
          that it does not need to be forwarded via any more
          gateways, but can now be sent directly to the destination
          host.  The last-hop gateway sends the ICMP Path-MTU if and
          only if the PMTU-Query's next-hop field contains the
          gateway's own address.  The ICMP Path-MTU message is sent
          by the destination host only if it receives the option with
          its next-hop field set to zero and if the destination host
          is willing to send ICMP Unexpected Fragment Report
          messages.  Notice that the MTU of the last hop (from the
          last-hop gateway to the destination host) is known by the
          last-hop gateway; thus if all gateways along the path
          support the option, the PMTU can be determined and
          communicated back to the source host even if the
          destination host does not support PMTU Discovery.

          The number of ICMP Unexpected Fragment Report messages that
          the destination host is allowed to send for each PMTU



     McCloghrie/Fox/Mogul  DRAFT                              [page 6]






     RFC DRAFT              Path-MTU Discovery            January 1990


          change is limited. The value of the limit is a configured
          parameter in the destination, but each PMTU-Query option
          carries an implicit refresh of that limit, which restores
          the remaining count of subsequent messages that can be sent
          to the full limit.  The destination host caches both the
          current PMTU value and the remaining count of Unexpected
          Fragment Report messages it can still send.  Whenever the
          destination host receives a fragment (actually, only
          fragment-0 of a datagram), it compares the size of this
          fragment to its cached value of the PMTU; if they are
          different and the remaining count has not yet decremented
          to zero, then it sends a Unexpected Fragment Report message
          and decrements the remaining count; otherwise, no ICMP
          Unexpected Fragment Report message is generated.

          The destination host maintains its cached value of the PMTU
          both from the MTU-value field in a received PMTU-Query
          option, and from the size of arriving fragments (when the
          remaining count gets decremented to zero).  Both the MTU-
          value in a PMTU-Query option with its next-hop field
          containing a valid address and the size of a fragment-0 are
          considered accurate indications of the current PMTU of the
          path, and overwrite the destination host's cached value.
          However, the MTU-value in a PMTU-Query option with its
          next-hop field set to zero is considered only an upper-
          bound on the PMTU of the path, and is never used to
          increase (only to decrease or to initialize) the cached
          PMTU value.

          The source host caches the PMTU information it learns as
          part of its information about the route to each non-local-
          network destination, i.e. as an extension to its IP Route
          Cache. Whenever a Route Cache entry is created, the initial
          value for PMTU is set to 576 and an PMTU-Query option is
          sent with the first datagram.  Then, if no further
          information is obtained, the PMTU value will remain at 576
          for the life of the cache entry.

          When an PMTU-Query option is sent, it may fail to get an
          answer. One reason for this is because at least one gateway
          and the destination host do not support the option.
          Another reason is that the datagram carrying it, or the
          replying ICMP Path-MTU message might get lost in the
          network.  To cater for the latter case, the option needs to
          be retransmitted until an answering Path-MTU message is
          received or a retry count is exhausted.



     McCloghrie/Fox/Mogul  DRAFT                              [page 7]






     RFC DRAFT              Path-MTU Discovery            January 1990


          In addition, the PMTU-Query option needs to be resent
          periodically to determine if the PMTU has changed, or if
          the status of support for PMTU queries by the gateways on
          the current route has changed.  Maximum and minimum values
          for the period between resends are suggested elsewhere in
          this memo.  The period remains at the minimum while there
          is enough support for the protocol on the current path such
          that at least one of the protocol's mechanisms is working.
          If there is insufficient support for either mechanism, then
          the query is still resent (in order to detect changes in
          the level of support) but the period is exponentially
          backed-off up to the maximum value.

     5.2.  Advantages

     The advantages of the proposed protocol are:

        - the protocol works even when only some of the gateways and
          hosts implement the procedures.

        - its benefits increase incrementally as more of the gateways
          and hosts implement the procedures,

        - it does not require there to be any return traffic, and
          replies to the PMTU-Query are transmitted immediately
          instead of having to be queued waiting for a datagram to be
          sent in the reverse direction.

        - it does not involve sending any large datagrams which are
          expected to get fragmented just to test if the PMTU has
          increased.

        - the number of additional datagrams and IP options due to
          this scheme is limited.

        - this protocol accommodates the fact that existing
          applications do (and will likely continue to) ignore PMTU
          sizes in the datagrams they send.  Such behaviour does not
          induce additional overhead with this scheme, since it is
          NOT the fragmentation of these jumbo datagrams which
          generates the ICMP messages; rather, it is the change in
          the size of the fragments which generates the messages.  In
          fact, only a small specified number of ICMP Unexpected
          Fragment Report messages are sent after a change in the
          PMTU, regardless of whether or not the source
          transport/applications adjust the size of the datagrams



     McCloghrie/Fox/Mogul  DRAFT                              [page 8]






     RFC DRAFT              Path-MTU Discovery            January 1990


          they send.

        - this protocol can be implemented entirely within the IP
          layer (without needing to keep per-protocol/port state
          information).  This avoids the duplications of implementing
          in each transport and/or application layer, and of having
          each transport/application sending its own
          queries/responses.  Interaction with the
          transport/application layer is only necessary in the source
          host, where the transport/ application can ask IP for the
          PMTU to a particular destination (see GET_MAXSIZES in [3]),
          and be informed when sending a datagram larger than the
          current PMTU (e.g. because the PMTU just decreased).




































     McCloghrie/Fox/Mogul  DRAFT                              [page 9]






     RFC DRAFT              Path-MTU Discovery            January 1990


     6.  IP Option and ICMP Message Formats

     The formats of the new IP option and the new ICMP messages are
     given in the following sections.


     6.1.  IP PMTU-Query Option

     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |      Type     |     Length    |            Min-MTU            |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                            Next-Hop                           |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

     Type       <<to be assigned>>

     Length     8

     Min-MTU    The minimum of the MTU values of each hop through
                which the datagram containing this IP option has so
                far been transmitted.

     Next-Hop   Either the Internet address of the next IP entity to
                which this datagram is being forwarded, or zero.  The
                field is set to zero when the option is processed by
                an IP entity if this field does not contain the IP
                address of that entity.  Thus a zero value indicates
                that the Min-MTU field is not necessarily accurate.

     (This option is not copied on fragmentation).

















     McCloghrie/Fox/Mogul  DRAFT                             [page 10]






     RFC DRAFT              Path-MTU Discovery            January 1990


     6.2.  ICMP Path-MTU Message

     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |      Type     |      Code     |           Checksum            |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |            Reserved           |             PMTU              |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |      Internet Header + 64 bits of Original Datagram Data      |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

     Type       <<to be assigned>>

     Code       0 - Valid
                1 - Upper-Bound

     Checksum   The 16-bit one's complement of the one's complement
                sum of the ICMP message, starting with the Type
                field.  For computing the checksum, the Checksum
                field is initialized to zero.

     Reserved   Sent as zero; ignored on reception.

     PMTU       The PMTU value.  If Code = Valid, this is the known
                value; if Code = Upper-Bound, this is the best-guess
                value.  The value is the PMTU of the path taken by the
                PMTU-Query to which this message is a response.

     Internet Header + 64 bits of Original Datagram Data
                These are extracted from the datagram containing
                the IP PMTU-Query option to which this message is a
                response.
















     McCloghrie/Fox/Mogul  DRAFT                             [page 11]






     RFC DRAFT              Path-MTU Discovery            January 1990


     6.3.  ICMP Unexpected Fragment Report Message

     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     Type      |     Code      |           Checksum            |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                           Reserved                            |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |      Internet Header + 64 bits of Original Datagram Data      |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

     Type       <<to be assigned>>

     Code       0

     Checksum   The 16-bit one's complement of the one's complement
                sum of the ICMP message, starting with the Type
                field.  For computing the checksum, the Checksum
                field is initialized to zero.

     Reserved   Sent as zero; ignored on reception.

     Internet Header + 64 bits of Original Datagram Data
                These are extracted from the datagram, for which
                fragment 0 has been received.


     (This message is a member of the class of ICMP error messages.)




















     McCloghrie/Fox/Mogul  DRAFT                             [page 12]






     RFC DRAFT              Path-MTU Discovery            January 1990


     7.  Use and Implementation of the PMTU Discovery Protocol

     The PMTU Discovery protocol proposed in this memo requires
     enhancements to the procedures implemented by both gateways and
     hosts.  These are explained in the following sections.


     7.1.  Gateways

     Gateways should recognize and process the IP PMTU-Query option
     when it occurs in a datagram they are forwarding.  The
     processing is as follows:

       compare the three values: the Min-MTU field of the PMTU-Query
       option; the MTU of the interface on which it was received; and
       the MTU of the interface through which it will be forwarded.
       If necessary, update the Min-MTU field to contain the minimum
       of the three values.

       compare the Internet Address in the Next-Hop field in the
       PMTU-Query option to the address of the interface on which it
       was received:

         - if not equal, set the Next-Hop field in the option to
         zero.

         - if equal, determine whether the datagram can now be sent
         directly to the destination host or whether it must be
         forwarded via another gateway:

           - if via another gateway, set the Next-Hop field to the
           address of the next gateway.

           - if directly to the destination host, then set the Next-
           Hop field to the destination host's address and generate
           an ICMP Path-MTU Code=Valid message with its PMTU field
           copied from the Min-MTU field in the PMTU-Query option,
           and send it to the source address of the datagram which
           contained the PMTU-Query option.


     7.2.  Source Hosts

     A host which implements this scheme to determine the PMTU of its
     paths to other hosts, needs to keep a cache of state information
     for each non-local-network destination.  This state information



     McCloghrie/Fox/Mogul  DRAFT                             [page 13]






     RFC DRAFT              Path-MTU Discovery            January 1990


     is an extension of the state information which a host should
     already be keeping in its Route Cache (see section 3.3.1.3 in
     the Host Requirements RFC [3]).  The additional state
     information to be kept for PMTU Discovery is as follows:

       Src_PMTU  -  the PMTU of the path which has the local host as
               the source and this cache entry's host as the
               destination.  If the PMTU has not yet been discovered
               then this value must be DEFAULT_NONLOCAL_PMTU; else,
               this value will equal the known or best-guess PMTU.

       Resend_Interval  -  the frequency at which to send PMTU-Query
               options.  This is initially set to the value
               MIN_PERIOD, and increased exponentially by doubling up
               to a maximum value of MAX_PERIOD when no answering
               ICMP Path-MTU message is being received.  It is reset
               to MIN_PERIOD when either an ICMP PATH-MTU or an
               Unexpected Fragment Report message is received.

       Retry_Count  -  the count of remaining retries of the IP
               PMTU-Query option while awaiting an answering ICMP
               Path-MTU message.  It is set to zero after the
               answering Path-MTU message is received, to indicate
               that the PMTU-Query is no longer being retried.

       Query_Flag  -  set to indicate a PMTU-Query option should be
               sent on the next datagram to this destination.

     This scheme also requires a timer to be associated with each
     entry in the Route Cache.  At different times during the
     protocol exchanges, this timer operates either as a retry-timer
     or as a resend-timer.

     The procedures followed by a source host need to be updated with
     the following additions:

       1) When IP creates an entry in its Route Cache, the PMTU
          Discovery fields should be initialized as:

               Src_PMTU        = DEFAULT_NONLOCAL_PMTU,
               Resend_Interval = MIN_PERIOD,
               Retry_Count     = QUERY_RETRIES,
               Query_Flag      = set

       2) if IP receives a request to send a datagram to a non-
          local-net destination for which the Route Cache entry has



     McCloghrie/Fox/Mogul  DRAFT                             [page 14]






     RFC DRAFT              Path-MTU Discovery            January 1990


          its Query_Flag set, then add an IP PMTU-Query option to the
          datagram prior to sending it. The PMTU-Query option should
          be initialized with:

               Min-MTU   = MTU of interface on which the datagram is
                           to be transmitted,
               Next-Hop  = address of first-hop gateway.

          Then, clear the Query_Flag and start a retry timer for this
          Cache entry to go off after an interval of time larger than
          the round-trip time to the destination.

       3) If an ICMP Path-MTU message is received, find the Cache
          entry for the appropriate host.  Set Retry_Count to zero to
          indicate that a response has been received for the last
          PMTU-Query option sent, and set the Src_PMTU value from the
          Min-MTU field in the ICMP message.  Also, set the value of
          Resend_Interval to MIN_PERIOD since there is at least some
          support for PMTU Discovery on the path to this destination.
          Lastly, (re-)start this Cache entry's timer to go off after
          MIN_PERIOD, when the next PMTU-Query needs to be sent.

       4) When a Cache entry's timer goes off, examine the value of
          Retry_Count.  If Retry_Count is zero, then this was a
          resend-timer and it is now time to send a new PMTU-Query,
          so set Retry_Count to QUERY_RETRIES and set the Query_Flag.
          Otherwise (Retry_Count is greater than zero), then this was
          a retry-timer and no ICMP Path-MTU message has been
          received in response to the last PMTU-Query sent; so,
          decrement Retry_Count.  Providing that the decrementing of
          Retry_Count does not make it become zero, then the PMTU-
          Query needs to be retransmitted, so set the Query_Flag.

          If Retry_Count has been decremented to zero, then the retry
          limit is exhausted, so the Src_PMTU value must be reset to
          DEFAULT_NONLOCAL_PMTU; this reset of Src_PMTU is necessary
          because the lack of a response could indicate the route has
          changed and that now neither all the gateways nor the
          destination host support this protocol.  Also, increase the
          value of Resend_Interval to twice its current value but not
          greater than MAX_PERIOD.  Then, start a timer to go off
          after the interval given by Resend_Interval, when the next
          PMTU-Query needs to be sent.

       5) If an ICMP Unexpected Fragment Report message is received
          from a host for which there is a Cache entry, and the size



     McCloghrie/Fox/Mogul  DRAFT                             [page 15]






     RFC DRAFT              Path-MTU Discovery            January 1990


          of the fragment-0 as reported in the message is not equal
          to the cached Src_PMTU, then update the cached Src_PMTU to
          the fragment-0 size and set the Cache entry's Query_Flag.
          Setting the Query_Flag here is intended to send another
          PMTU-Query option not only to determine if the PMTU change
          has also caused a change in how many gateways on the path
          support the option, but just as importantly, to restore the
          destination's count of ICMP Unexpected Fragment Report
          messages it can send.


     7.3.  Destination Hosts

     To implement this scheme as a destination host, IP must maintain
     a cache of information with one entry per host from which it has
     received an IP PMTU-Query option.  The cache entries should be
     deleted if they have not been referenced for some DCACHE_TIMER
     period.  Each cache entry maintains the following information:

       Address  -  the Internet address of this entry's host.

       UFR_Count -  the remaining count of subsequent ICMP Unexpected
               Fragment Report messages that may be sent to this
               entry's host.

       Dest_PMTU  -  set to the (known or best-guess) PMTU of the
               path which has the local host as the destination and
               this entry's host as the source.

     The procedures followed by a destination host need to be updated
     with the following additions:

       1) On receiving a datagram with an PMTU-Query option, the
          option's Min-MTU and Next-Hop fields should first be
          updated according to the local interface on which the
          datagram was received.  The Min-MTU field should be set to
          the minimum of its own value and the MTU of local
          interface; the Next-Hop field should be set to zero if its
          value is not the address of the local interface.

          Next, locate the cache entry for the source of the
          datagram; if none exists create one and initialize its
          Dest_PMTU value from the Min-MTU in the option.

          Next, if the Next-Hop field in the option has a non-zero
          value or if the Dest_PMTU value would be decreased, then



     McCloghrie/Fox/Mogul  DRAFT                             [page 16]






     RFC DRAFT              Path-MTU Discovery            January 1990


          set the Dest_PMTU value from the Min-MTU field in the
          option.  (Note, do not increase Dest_PMTU if the Next-Hop
          field is zero.)

          Lastly, set UFR_Count to the value UFR_LIMIT, and if the
          Next-Hop field in the option has a zero value, generate an
          ICMP Path-MTU message Code=Upper-Bound with its Path-MTU
          field set to the value of Dest_PMTU.

       2) When a datagram fragment is received and it is fragment-0,
          then locate the cache entry for sending Host.  If there is
          no cache information for the sending host, then there is no
          PMTU Discovery processing to be done.  This could be the
          case where the source does not implement this PMTU
          Discovery protocol.

          Next, compare the size of the fragment-0 with the Dest_PMTU
          value.  If they are equal then there is nothing to be done
          since this is not a change in the PMTU, i.e., the receipt
          of this fragment provides no new PMTU information.

          However, if the size of fragment-0 is not equal to the
          value of Dest_PMTU, and UFR_Count is greater than zero,
          then decrement UFR_Count and send an ICMP Unexpected
          Fragment Report message.

          If UFR_Count was zero or is now zero, then set the value of
          Dest_PMTU to the size of the fragment.  This is now the
          expected size of incoming datagram initial fragments.



     8.  Discussion

     8.1.  Timers

     The PMTU Discovery protocol proposed in this memo uses a number
     of timers: a query-retry timer, a query-resend timer, and a
     destination cache timer.  It is important that the intervals of
     these timers be set correctly.

     For the retry timer, it is ideal to have the interval be just
     larger than the round-trip time (RTT) to the destination, but it
     is important that it not be smaller than the RTT.  Typically, IP
     has no knowledge of the RTT to a particular destination.  One
     possibility is to set the retry interval to a constant which is



     McCloghrie/Fox/Mogul  DRAFT                             [page 17]






     RFC DRAFT              Path-MTU Discovery            January 1990


     larger than the maximum RTT to any destination, e.g. 2*MSL, i.e.
     4 minutes.  Alternatively, the RTT could be initially set to a
     smaller value (e.g. 30 seconds) and doubled for every retry.

     For the resend-query timer, the interval is set according to the
     degree of support for the protocol on the current path to a
     destination.  In most cases, the interval determines for how
     long fragmentation will occur after a PMTU change.  For example,
     if all gateways are supporting the protocol but not the
     destination host, then it is only these resends which will
     detect a PMTU change.  So the interval needs to be small enough
     to limit the amount of fragmentation if the PMTU decreases. If
     the destination host supports the protocol, then there is (at
     least some) reliance on ICMP Unexpected Fragment Report messages
     to detect PMTU changes.  Here also, the interval needs to be set
     to limit the amount of fragmentation which would occur if all
     the Unexpected Fragment Report messages were to get lost (or the
     destination were rebooted).  Only if neither all the gateways
     nor the destination host supports the protocol can the interval
     be made longer, since in this case the reason to resend the
     query is to occasionally test if the set of gateways on the path
     has changed such that they all now support the protocol.

     The interval of the destination cache timer determines how long
     unreferenced PMTU information stays in the destination host's
     cache before being deleted.  Besides being needed to prevent the
     destination's cache growing too large, this timer is also
     necessary in case the source host's IP address is re-assigned to
     another host which may not implement PMTU Discovery.  Note,
     however, that the destination host's cache is only referenced by
     received PMTU-Query options and by received fragments.  Since
     there may not be any fragments received over a period when the
     PMTU has not decreased, it is important that this destination
     cache timer be at least several times larger than the
     corresponding value of the resend-query timer (i.e. the value of
     the resend-query timer when the destination-host supports the
     protocol).


     8.2.  Host Requirements

     The Host Requirements RFC [3] requires transport/applications to
     call IP via the GET_MAXSIZES function when they wish to (re-
     )determine the PMTU.  (Section 3.4 of [3] specifies that
     GET_MAXSIZES returns the PMTU value as MMS_S).  With this
     already required, this PMTU Discovery protocol places no new



     McCloghrie/Fox/Mogul  DRAFT                             [page 18]






     RFC DRAFT              Path-MTU Discovery            January 1990


     requirements on transport/applications.  However, it is
     suggested that IP return a warning indication on a send call, in
     the event that the packet-size is larger than the current PMTU,
     to indicate that the transport/application SHOULD call
     GET_MAXSIZES.  [Note that [3] provides no way for a transport/
     application to determine the MTU of a local interface; this may
     be an omission.]


     8.3.  Mixed Support by Transport/Applications

     The benefits from implementing this PMTU Discovery protocol in a
     source host are likely to be incrementally achieved, as each of
     the transport and/or application protocols takes advantage by
     creating packets at the full PMTU size.  During this incremental
     evolution, a source host may have some protocols dynamically
     adjusting to changing PMTU sizes and some which are still
     sending jumbo datagrams which ignore PMTU sizes.  In this
     situation, this proposal does not need to associate PMTU sizes
     with specific protocols (or connections).  In particular, if all
     a source host's protocols ignore PMTU Discovery, then that host
     should not be sending PMTU-Query options; otherwise, the
     Unexpected Fragment Report messages are sent not because some
     applications' (e.g. NFS) datagrams are getting fragmented, but
     because the PMTU has changed and the Unexpected Fragment Report
     messages pass that information back to the sender so that that
     other protocols (which are not ignoring PMTU) can be informed.


     8.4.  Making Room for Options

     One of the disadvantages of any usage of IP options (including
     usage of the PMTU-Query option) is that they increase the size
     of datagrams.  It is the transport/application layers which
     decide on the size of a packet they give IP to send as a
     datagram.  When IP has its own algorithms for deciding which
     datagrams need to have IP options added to them, there is the
     chance that the increased size of a datagram will be larger than
     the PMTU, and thus will result in fragmentation.  There are two
     ways to avoid this:

        - have some additional communication between IP and the
          transport/applications whereby IP can request the next send
          be of a smaller packet-size such that the addition of the
          option will not exceed the PMTU.  This approach complicates
          the interface between IP and TCP and between IP and UDP-



     McCloghrie/Fox/Mogul  DRAFT                             [page 19]






     RFC DRAFT              Path-MTU Discovery            January 1990


          based applications, especially since IP doesn't know which
          of them will next send to a particular destination.

        - decrease the PMTU which IP advertises to the transport/
          applications such that when IP adds an IP option to a
          packet of the decreased size the resulting IP datagram does
          not exceed the real PMTU.  This approach does not
          complicate the interface to IP from above, but has the
          disadvantage that a small fraction of the bandwidth is
          wasted since those datagrams to which no IP option is added
          are not quite as large as the PMTU.  (See the discussion of
          this approach in section 3.3.3 of the Host Requirement RFC
          [3].)


     8.5.  No Local Network Usage

     Notice that using the protocol proposed in this memo, a PMTU-
     Query option is never sent between two hosts on the same (sub-
     )network.  Since no PMTU-Query option is ever sent, neither will
     any ICMP Path-MTU messages nor any Unexpected Fragment Report
     messages ever be sent between two hosts on the same (sub-
     )network.


     8.6.  Dual-MTU Networks

     A dual-MTU network is a network containing multiple types of
     media with each media having its own MTU value.  An example is
     an FDDI/Ethernet network in which a bridge interconnects an
     Ethernet (MTU = 1500) with an FDDI network (MTU = 4K).  A host
     on the FDDI part of the network has an MTU of 4K when
     communicating with another host to which an all FDDI path
     exists, but an MTU of only 1500 when communicating with an
     Ethernet host, or via an Ethernet to another FDDI host.  The
     method by which the MTU can be determined for a particular
     destination is not yet specified, but the significance from an
     IP host/gateway's perspective, is that the MTU of such a network
     can be different for different destinations, and will probably
     have to be determined dynamically.

     Note that the task of obtaining the MTU of such a data link is
     required in any event, for the router to determine if the
     datagram must be fragmented; processing of the PMTU Query option
     requires no additional determination.  Also note that the data
     link MTU must be determined by some other means; the protocol



     McCloghrie/Fox/Mogul  DRAFT                             [page 20]






     RFC DRAFT              Path-MTU Discovery            January 1990


     described in this RFC is not meant for that purpose.



     9.  Suggested Values

     This section provides suggested values for the configured
     parameters required by protocol implementations.

     MIN_PERIOD

          Suggested Value: 15 minutes

          This value is the interval between sending the IP PMTU-
          Query option if either all the gateways in the path or the
          destination host support the PMTU Discovery protocol.

     MAX_PERIOD

          Suggested Value: 2 hours

          This value is the maximum interval between sending the IP
          PMTU-Query option if no ICMP Path-MTU message is being
          received in response.

     DCACHE_TIMER

          Suggested Value:  35 minutes

          This value is the minimum time that a destination's cached
          PMTU information for a particular source should be kept
          without being referenced.

     QUERY_RETRIES

          Suggested Value: 3

          This value is the number of times a PMTU-Query option is
          retried if no answering ICMP Path-MTU message is received
          in response, before the source concludes that both the
          destination host and at least one gateway on the current
          path do not support this PMTU Discovery protocol.







     McCloghrie/Fox/Mogul  DRAFT                             [page 21]






     RFC DRAFT              Path-MTU Discovery            January 1990


     UFR_LIMIT

          Suggested value: 3

          This value is the maximum number of ICMP Unexpected
          Fragment Report messages the receiver can send between
          receiving PMTU-Query options.  The only reason to set this
          greater than one is to protect against the possibility of
          an ICMP Unexpected Fragment Report getting lost.  Providing
          at least one ICMP Unexpected Fragment Report message
          arrives, the source will update its Src_PMTU value and send
          another PMTU-Query which will refresh the destination's
          remaining count to its maximum value ready for the next
          PMTU change.

     DEFAULT_NONLOCAL_PMTU

          Suggested value: 576

          This is the value to which the PMTU should be set if no
          answering ICMP-MTU messages have been received (recently).


     10.  Acknowledgements

     This proposal is the output of the IETF MTU Discovery Working
     Group.  It is a combination of the ideas of many people.  At one
     time or another, Steve Deering, Chris Kent, Charles Lynn, and
     Jeff Mogul all suggested using an ICMP message to report the
     size of fragments. Noel Chiappa suggested the use of the next-
     hop field in order to know whether all gateways on the path
     support the protocol.  Others who have contributed to this
     proposal are:

          Art Berggreen (ACC),
          etc.
          etc.












     McCloghrie/Fox/Mogul  DRAFT                             [page 22]






     RFC DRAFT              Path-MTU Discovery            January 1990


     References

     [1]   C. Kent and J. Mogul.
           Fragmentation Considered Harmful.
           Proc. ACM SIGCOMM '87 Workshop, August 1987.

     [2]   J. Mogul, C. Kent, C. Partridge and K. McCloghrie.
           IP MTU Discovery Options.
           RFC 1063, SRI Network Information Center, July 1988.

     [3]   R. Braden.
           Host Requirements - Communication Layer.
           RFC 1122, SRI Network Information Center, September 1989.

     [4]   S. Deering.
           IP and ICMP Extensions for MTU Discovery.
           Draft Memo, October 1989.
































     McCloghrie/Fox/Mogul  DRAFT                             [page 23]



From mogul  Thu Jan 18 19:43:44 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA07390; Thu, 18 Jan 90 19:43:44 PST
Date: Thu, 18 Jan 90 19:43:44 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9001190343.AA07390@acetes.pa.dec.com>
To: mtudwg
Subject: Mail problems

You should all have received the draft RFC that I sent out 6
days ago.  Some of you may have realized, from the tardy delivery,
that one of our mail systems delayed the message by several days.
Mail via decwrl.dec.com should be flowing again, and so it should
be possible to discuss things via the mailing list.

I'll be away all next week, so if things go wrong again, I won't
be able to do much about it.

-Jeff

From pradeep@orville.nas.nasa.gov  Fri Jan 26 19:00:54 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA12107; Fri, 26 Jan 90 19:00:54 PST
Received: by decwrl.dec.com; id AA07392; Fri, 26 Jan 90 19:00:50 -0800
Received: Fri, 26 Jan 90 18:12:43 PST by orville.nas.nasa.gov (5.59/1.2)
Date: Fri, 26 Jan 90 18:12:43 PST
From: Nuggehalli Pradeep <pradeep@orville.nas.nasa.gov>
Message-Id: <9001270212.AA00653@orville.nas.nasa.gov>
To: mtudwg
Subject: Comments on PMTU-Draft-RFC

Comments on the PMTU Discovery Draft-RFC:

1.  > ...   ...   ...   ...   ...   ...    Thus, if the option
    > arrives at the destination with its next-hop field non-
    > zero, then all gateways along that path have updated the
    > option and the minimum-MTU-so-far value is indeed the PMTU;

Not true! (or else I'm missing something here!) It should read:
"If the option arrives at the destination with its next-hop field *same
as destination address*, then all routers along that path have updated the
option and the minimum-MTU-so-far value is indeed the PMTU."
The destination host should check whether or not the next-hop field
has the same address as the destination address (not check for zero/non-zero). 
This applies to all references in the document where the destination checks
for zero/non-zero.
Consider the case where the last-hop router, or the n, n+1, ...thru...
the last-hop router are non-cooperating. Then the option would arrive at
the destination host with its next-hop field non-zero (and not the same as
destination address).

2. Next-Hop-Address:

I don't see the full justification of using this field.
The only thing it helps us in detecting is the case of two consecutive
non-cooperating routers with a low-MTU link when probing. I am inclined
to think that this case would not be very common. Even so, this case
would later be detected by the backup fragment-report mechanism.
Even without this field, isolated non-cooperating routers would not cause a
problem because the neighboring routers would handle the case.
But this is only an opinion and I leave it to the group to decide on this.

3. IP PMTU-Query Option:

The length of the Min-MTU field of 2 bytes is sufficient for almost
all currently available networks, as it allows a max value of 64 KBytes.
But, for example, UltraNet is already using an MTU value of 32 KB,
and I think that new network technologies would soon reach and exceed 
the limit of 64 KB for the MTU. So, could we consider increasing the
length of the Min-MTU field in the option to 3 or perhaps 4 bytes.
Possible option format:
------------------------------------------------------------
|     Type    |    Length    |  Reserved (for future use)  |
------------------------------------------------------------
|                     Min-MTU                              |
------------------------------------------------------------
|                     Next-Hop                             |
------------------------------------------------------------

4.  > ...     ...      ...      and the size of a fragment-0 are
    > considered accurate indications of the current PMTU of the
    > path, ...   ...   ...

Not true! because the fragments of a datagram could take different
paths, and some of those fragments could get re-fragmented, and we
don't know which of these paths the subsequent datagrams will take.
Perhaps we could use the size of the largest fragment, but this would 
still be a guess.  So, I prefer to use the size of fragment-0.
Thus, the size of fragment-0 is only a best-guess. 

Overall, the new hybrid scheme seems to be a pretty good scheme.

--- Pradeep

From sytek!kzm@hplabs.HP.COM  Sat Jan 27 19:10:58 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA20484; Sat, 27 Jan 90 19:10:58 PST
Received: by decwrl.dec.com; id AA22297; Sat, 27 Jan 90 19:10:54 -0800
Received: by hplabs.HP.COM ; Sat, 27 Jan 90 19:11:04 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA20060; Sat, 27 Jan 90 18:56:38 PST
From: sytek!kzm@hplabs.HP.COM (Keith Mc Cloghrie)
Message-Id: <9001280256.AA20060@sytek.hls.hac.com>
Subject: Re: Comments on PMTU-Draft-RFC
To: pradeep@orville.nas.nasa.gov (Nuggehalli Pradeep)
Date: Sat, 27 Jan 90 18:56:35 PDT
Cc: mtudwg (mtudwg)
In-Reply-To: <9001270212.AA00653@orville.nas.nasa.gov>; from "Nuggehalli Pradeep" at Jan 26, 90 6:12 pm
X-Mailer: ELM [version 2.2 PL0]



> 1.  > ...   ...   ...   ...   ...   ...    Thus, if the option
>     > arrives at the destination with its next-hop field non-
>     > zero, then all gateways along that path have updated the
>     > option and the minimum-MTU-so-far value is indeed the PMTU;
> 
> Not true! (or else I'm missing something here!) It should read:
> "If the option arrives at the destination with its next-hop field *same
> as destination address*, then all routers along that path have updated the
> option and the minimum-MTU-so-far value is indeed the PMTU."
> The destination host should check whether or not the next-hop field
> has the same address as the destination address (not check for zero/non-zero) 

The first thing that the destination host does on receiving this
option is to update the Min-MTU and Next-Hop fields according to the 
interface on which it was received (see section 7.3); thereafter, it 
can indeed test for zero/non-zero.  However, in this descriptive 
section, I agree that the words should be updated as you suggest.  

> 2. Next-Hop-Address:
> 
> I don't see the full justification of using this field.
> The only thing it helps us in detecting is the case of two consecutive
> non-cooperating routers with a low-MTU link when probing. I am inclined
> to think that this case would not be very common. Even so, this case
> would later be detected by the backup fragment-report mechanism.
> Even without this field, isolated non-cooperating routers would not cause a
> problem because the neighboring routers would handle the case.
> But this is only an opinion and I leave it to the group to decide on this.

This is what the group did decide at the December meeting.  It's difficult
to predict which gateways will get updated and which won't, and so I'd
not hazard a guess as to how common your case might be.  However, if 
the destination does not support the backup unexpected-fragment-size
message, then the option is the only indication you have.  In your
case, the low-MTU link is probably the bottleneck in speed as well
as in MTU, and thus having fragmentation on it will really hurt.

> 3. IP PMTU-Query Option:
> 
> The length of the Min-MTU field of 2 bytes is sufficient for almost
> all currently available networks, as it allows a max value of 64 KBytes.
> But, for example, UltraNet is already using an MTU value of 32 KB,
> and I think that new network technologies would soon reach and exceed 
> the limit of 64 KB for the MTU. So, could we consider increasing the
> length of the Min-MTU field in the option to 3 or perhaps 4 bytes.

Jeff, Rich and I did consider that, but decided that there are so
many other fields in IP/ICMP formats where the max is 64K, that it
was not worth making the option any bigger than necessary to allow
for this.  (Note the size of the option reduces the useable PMTU for
at least some, possible all, datagrams.)

> 4.  > ...     ...      ...      and the size of a fragment-0 are
>     > considered accurate indications of the current PMTU of the
>     > path, ...   ...   ...
> 
> Not true! because the fragments of a datagram could take different
> paths, and some of those fragments could get re-fragmented, and we
> don't know which of these paths the subsequent datagrams will take.
> Perhaps we could use the size of the largest fragment, but this would 
> still be a guess.  So, I prefer to use the size of fragment-0.
> Thus, the size of fragment-0 is only a best-guess. 

Whether we call it "a best-guess" or we consider it an "accurate
indication" does not seem important.  What is important is that
in the event that datagrams or their fragments are taking different 
paths with different PMTUs, then the overall-PMTU is the minimum of 
the MTUs of any/all hops of these various paths, and the proposed 
scheme produces a PMTU value which converges to the correct (minimum) 
value.

> Overall, the new hybrid scheme seems to be a pretty good scheme.

Yes, I think so too.
 
Keith.

From deering@Pescadero.Stanford.EDU  Mon Jan 29 18:32:05 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09668; Mon, 29 Jan 90 18:32:05 PST
Received: by decwrl.dec.com; id AA19838; Mon, 29 Jan 90 18:32:02 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA18281; Mon, 29 Jan 90 18:31:58 PDT
Date: 29 Jan 1990 18:18-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: Comments on PMTU-Draft-RFC
To: mtudwg
Message-Id: <90/01/29 1818.266@pescadero.stanford.edu>

Here's my two cents worth:

page 4, last item/paragraph: the first two sentences could be clarified to
indicate that the problem is deciding which *initial* fragments (i.e.,
fragments with offset 0) should elicit fragmentation reports.  Nobody has
ever suggested sending reports in response to non-initial fragments.  The
way it is written makes the problem sound much worse than it is.

page 5, first item/paragraph: I had to read this over several times to
understand what you were talking about.  In my RF-bit scheme, there is no
need for receiver state to indicate which applications understand
fragmentation reports -- the bit in the IP header tells the receiver.  The
problem you identify arises only with the IP option approach to report-
fragmentation, and only because sending an option on every datagram is too
expensive.  Could this paragraph be made clearer and more accurate?

(By the way, it was pointed out to me that the "RF-bit" is *not* the only
unused bit in the IP header -- there are two more unused bits in the
type-of-service byte.  I think that weakens the case of those who oppose
the use of the RF-bit for fragmentation detection; if there should arise
other needs for new IP header bits, such as DEC-bit-style congestion control,
they could be satisfied with the spare TOS bits.  But I digress.)

page 6, third paragraph: I agree with Pradeep, concerning the confusion over
whether or not the next-hop field contains zero.  Seems to me there is *no*
need ever to set it to zero -- the decision can always be: "is this my address
or not".  As it is, you've introduced three states (my address, zero, other),
when only two are needed (my address, other), making it harder to understand
the protocol.  Or have I missed some subtle requirement for three states?

page 7 and 22: change all occurrences of 576 to MIN(576,first-hop-MTU)
That is, you don't use 576 as the default PMTU if your first-hop MTU is
less than 576.

page 9, last item/paragraph (also, page 19, first paragraph): you fail to
mention how the transport/application layer detects increases of PMTU;
presumably it requires periodic calls to GET_MAXSIZES.  (Or, you could argue
that the transport/application layer need not detect increases.  In any case,
it should be discussed.)

page 14, definition of Src_PMTU: change "this cache entry's host" to "this
cache entry's host and type-of-servce".

page 16, second paragraph: change "one entry per host" to "one entry per host
and type-of-service", or something like that.  (This gets even worse when
routes may be influenced by security options, policy-based routing, etc, which
does not bode well for the notion of caching per-route info at a destination.
Do you want to mention this somewhere?)

page 16, list of destination cache fields: should include an "Age" field for
timing out old cache entries?

page 19, first paragraph, last (bracketed) sentence: the GET_MAXSIZES
operation does provide the first-hop MTU, if you pass it the address of a
neighbor.  Why do need/want a more general operation to query the MTU of a
connected network, given the way your protocol works?  (I know that *my*
proposal would require the new operation, because it puts more burden on the
transport/application layer, but it's not clear why your protocol needs it.)

page 19, second paragraph: the long, last sentence beginning "In
particular,..." is very confusing.  Can you fix this somehow?

page 20, section 8.5: do you want to mention proxy-ARP situations?  That's
a case where PMTU discovery would be useful, but the sender thinks it is
sending to a neighbor.  Of course, in that case, the next-hop field doesn't
work too well.  Is proxy ARP being actively discouraged yet?

do you want to mention anywhere that the PMTU derived from a fragment 0 may
be as much as 7 bytes less than the true PMTU, due to fragmentation on 8-byte
boundaries?

grammatical nits:

	page 13, last paragraph: remove comma after "paths to other hosts".

	page 17, third paragraph, first sentence: change "for sending Host"
	to "for the sending host".

	the word "which" should be changed to "that" in many places.

concluding remark: it's too bad the protocol ended up so complicated.

Steve

From mogul  Tue Jan 30 11:14:39 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA18379; Tue, 30 Jan 90 11:14:39 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9001301914.AA18379@acetes.pa.dec.com>
Date: 30 Jan 1990 1114-PST (Tuesday)
To: mtudwg
Cc: 
Subject: Proposal from a new member of the group

I received this message from Fred Bohle of ACC.  Apparently, he
composed his proposal without knowing of the activities of our
working group, but he is now on the mailing list and has been
sent a copy of the mailing list log.  I encourage people to read
this in the hopes that there may be some interesting material
to be mined out of it; however, I have already pointed out to
Fred that RFC1063 is pretty darn dead.

-Jeff

------- Forwarded Message

Return-Path: <fab@saturn.ACC.COM>
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA17186; Tue, 30 Jan 90 07:51:08 PST
Received: by decwrl.dec.com; id AA13328; Tue, 30 Jan 90 07:50:58 -0800
Received: from SATURN.ACC.COM by salt.acc.com (5.61/1.34)
	id AA02434; Tue, 30 Jan 90 07:51:41 -0800
Received: by saturn.acc.com (5.51/1.28)
	id AA01760; Tue, 30 Jan 90 10:49:12 EST
Date: Tue, 30 Jan 90 10:49:12 EST
From: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc)
Message-Id: <9001301549.AA01760@saturn.acc.com>
To: mogul
Subject: RFC 1063 working group
Cc: cam@saturn.ACC.COM, spm@saturn.ACC.COM


Jeffery,

	Enclosed is a copy of an RFC I had proposed to Jon Postel.  He referred
it to Noel Chiappa, who referred me to you and your Working Group.  I have asked
my system administrator to send you a request to add us to your mailing list,
so that will come separately.  I did want to show you my idea for implementing
MTU discovery in TCP.  I would like to get a copy of your draft RFC and
also get a copy of your archives for the mtudwg discussions.

	I am in the process of going through ACC's ACCES/MVS code for conform-
ance to the Host Requirements RFC's.  I am also considering including other
enhancements to the product at the same time,  so this is a good time for
me to implement new ideas, or experiment with them.

	I look forward to hearing from you.

Fred.

---------------------cut here--------------------------------------------------
	IP MTU Discovery (RFC 1063) Revisited

	I have a suggestion for implementing and using the IP MTU
Discovery option.  Please consider this as a possible RFC:

1. STATUS OF THIS MEMO

This memo describes a strategy for using the IP MTU Discovery options [1]
from the TCP layer.  This is a proposal for a simple, effective implementation
of this option.  Distribution of this memo is unlimited.

2. INTRODUCTION

The original description of the IP MTU Discovery option requires a considerable
amount of logic in the IP layer to implement.  On one hand, it must be an IP
option for gateways to process it.  On the other hand, it is TCP which
really needs the information in order to set its MSS properly.

With the specifications in the Host Requirements RFC [2], the specification
and processing of IP options from the next higher layer must be available.
Therefore TCP has the ability to specivy the IP MTU Discovery Probe option
(Probe), Process a Probe when received, specify an IP MTU Discovery Reply
option (Reply), and process a Reply when received.

3. IMPLEMENTATION APPROACH.

Combine the sending of the TCP MSS option withe the specification of a
Probe option.  Combine the processing of the MSS option with the processing
of the Probe option and generate a Reply option.  The three-way handshake
of TCP is ideal for piggy-backing this option.

3.1 ORIGINAL-SYN:  In this state the packets sent will have only the SYN
bit and the TCP MSS option is typically sent here.  Add to it a request
for IP to send a Probe option.

3.2 SYN-ACK: In this state an ORIGINAL-SYN packet has been received.
Process the TCP MSS option in the usual way.  When generating the SYN-ACK
packet, the TCP MSS option is typically sent here also. Add to it a
request for IP to send a Reply option using the value from the received
Probe option.  Also add to it a request for IP to send a Probe option.

3.3 ACK-OF-SYN:  This packet will complete the three-way handshake and
establish the session.  Process the received TCP MSS option in the usual
way.  Calculate an MSS value from the MTU in the Reply option, and use
the lesser MSS.  In the ACK-OF-SYN packet, specify a Reply option using
the value from the received Probe option.

3.4 ESTABLISHED STATE: This state will be entered from the receipt of the
ACK-OF-SYN packet.  This packet will contain the Reply option.  Calculate
an MSS value from the MTU and use the lesser MSS.

This mechanism will allow TCP to retransmit if packets are dropped and
still discover the minimum MTU for the session.  It avoids such interface
problems as UDP receiving some of the Reply options, and IP having to
inform TCP of the minimum MTU somehow.  It also removes some complexity
from the IP layer cacheing this information, although this information 
may still be maintained, if desired.

UDP code which uses comparable methods may make similar use of this option.

REFERENCES

[1] Mogul, J., C. Kent, C. Partridge, K. McCloghrie, "IP MTU Discovery
Options", RFC-1063, USC/Information Sciences Institute, Marina del Rey,
CA, July 1988.

[2] Braden, R., Ed., "Requirements for Internet Hosts -- Communication
Layers", RFC-1122, USC/Information Sciences Institute, Marina del Rey,
CA, July 1988.



----------------------cut here---------------------------------------------

------------------------------------------------------------------------
Fred Bohle			EMAIL: fab@saturn.acc.com
ACC				AT&T : 301-290-8100 
10220 Old Columbia Road
Columbia, MD 21046
------------------------------------------------------------------------




------- End of Forwarded Message

From fab@saturn.ACC.COM  Tue Jan 30 15:39:06 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA19590; Tue, 30 Jan 90 15:39:06 PST
Received: by decwrl.dec.com; id AA02331; Tue, 30 Jan 90 15:38:48 -0800
Received: from SATURN.ACC.COM by salt.acc.com (5.61/1.34)
	id AA02540; Tue, 30 Jan 90 15:39:11 -0800
Received: by saturn.acc.com (5.51/1.28)
	id AA07051; Tue, 30 Jan 90 18:36:42 EST
Date: Tue, 30 Jan 90 18:36:42 EST
From: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc)
Message-Id: <9001302336.AA07051@saturn.acc.com>
To: mtudwg
Subject: draft RFC comments



Folks,

	What I was trying to accomplish in my suggestion was a way
to tie together discovery of the MTU with the three-way handshake
in TCP.  Having reviewed the working group log and the draft RFC,
I have some comments and proposals:

1.  Add a PMTU query option, as in the original RFC1063.  The receiving
TCP can retrieve the PMTU query option and respond with a PMTU reply
option and a new PMTU query of its own.  The point to doing this is the
retransmission and sequence number processing of TCP will guarantee the
delivery of this information.

2.  TCP would have to do this only if the call to GET_MAXSIZES call
indicated the real size was unknown.  If it is known, the MTU size
would be used in calculating the MSS size in the MSS option.  If it
is unknown, the PMTU query option would be specified by TCP.

3.  Allowing TCP to generate the reply guarantees retransmission of the
reply.  Tying it to the SYN, SYN-ACK, ACK-of-SYN sequence gets the
MSS decided in a predictable sequence.  There is no way to do this with
an ICMP response.  

4.  UDP and other protocols at that layer could use the information
since the IP layer still maintains a cache of MTU sizes.  

5.  I agree with Pradeep that the next-hop field seems redundant, since
non-cooperating gateways will ignore this option.  The result is that
the minMTU is not updated.  Subsequent fragmentation will correct this.
The objection raised to his point was if the destination host did not
support Unexpected Fragment messages, the fragmentation would go
unnoticed (unpunished?).  Suppose we have the fragmenting gateway
return an Unexpected Fragment message?  This will requre more state in
the gateway, but would protect against non-cooperating hosts.
(Maybe this requires too much state in the gateway. What say you all?)

Overall, I am impressed with the development of the MTU discovery working
group, and only wish I had been involved from the beginning.  Since I am
currently working on the TCP/IP implementation in ACC's ACCES/MVS product,
this is great timing for working on IP options and any TCP changes
necessary.  When it comes time to experiment, I am anxious to participate.

Light up your flaming arrows, warm up your blowtorches, and let me know
what you think.

Fred


From philipp@Gipsi.Gipsi.Fr  Tue Jan 30 19:06:35 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA20349; Tue, 30 Jan 90 19:06:35 PST
Received: by decwrl.dec.com; id AA29749; Tue, 30 Jan 90 19:06:24 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA26599; Wed, 31 Jan 90 02:48:00 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA08050; Wed, 31 Jan 90 02:48:36 -0100 (MET)
Date: Wed, 31 Jan 90 02:48:36 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9001310148.AA08050@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: MTU Discovery <mtudwg>
Subject: "Fragmentation considered harmful"

Going over the DECWRL report (not the ACM paper) I was thinking
that the IPMP protocol is a good idea, and it offers the chance
to kill several birds with one stone by collecting a lot more
than just the MTU along a path.  Additionally, I would suggest
collecting security levels available and type-of-service levels
available.  Perhaps a space for route recording too, since an IP
option is limited to 7.

-Philip

P.S.	Some might argue it is a security breach to let one
	level convey information about (the existance of)
	other levels.  I will leave that to the spooks to
	answer...

From mogul  Tue Jan 30 19:20:23 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA20385; Tue, 30 Jan 90 19:20:23 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9001310320.AA20385@acetes.pa.dec.com>
Date: 30 Jan 1990 1920-PST (Tuesday)
To: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Cc: MTU Discovery <mtudwg>
Subject: Re: "Fragmentation considered harmful"
In-Reply-To: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr> / 
		Wed, 31 Jan 90 02:48:36 -0100.
             <9001310148.AA08050@gipsi.Gipsi.Fr>

    Going over the DECWRL report (not the ACM paper) I was thinking
    that the IPMP protocol is a good idea, and it offers the chance
    to kill several birds with one stone by collecting a lot more
    than just the MTU along a path.  Additionally, I would suggest
    collecting security levels available and type-of-service levels
    available.  Perhaps a space for route recording too, since an IP
    option is limited to 7.
    
Thanks for the praise!  (For those of you who don't know, IPMP
stands for Internet Probe Message Protocol.  We made it parallel to,
rather than part of, ICMP, so that gateways wouldn't have to parse
every ICMP packet that went by.)  However, I suggest that given
the current direction of the MTU discovery working group, it might
be better to consider the IPMP in a different WG, and more along
the lines of a management aid or an augmentation to the routing
protocols.  Someone could volunteer to JNC to head a new Working
Group.

If enough people request it (mail to me, not the list) I will
post the IPMP protocol proposal to this list, but that will be
the end of it.

	Some might argue it is a security breach to let one
	level convey information about (the existance of)
	other levels.  I will leave that to the spooks to
	answer...

I think you're confusing protocol archictectural layering with
multi-level security.  Any correctly-implemented multilevel
security system wouldn't let this information leak out, via
IPMP or otherwise, if it shouldn't be allowed to leak.

-Jeff

From galvin@TIS.COM  Wed Jan 31 05:35:38 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA27233; Wed, 31 Jan 90 05:35:38 PST
Received: by decwrl.dec.com; id AA02106; Wed, 31 Jan 90 05:33:16 -0800
Received: from SPARKY.TIS.COM by TIS.COM (5.61/1.34)
	id AA20715; Wed, 31 Jan 90 08:33:00 -0500
Reply-To: James M Galvin <galvin@TIS.COM>
To: mogul (Jeffrey Mogul)
Cc: Philippe Prindeville <philipp@gipsy.Gipsi.FR>, MTU Discovery <mtudwg>
Subject: Re: "Fragmentation considered harmful" 
In-Reply-To: Your message of Tue, 30 Jan 90 19:20:00 PST.
             <9001310320.AA20385@acetes.pa.dec.com> 
Date: Wed, 31 Jan 90 08:33:43 -0500
Message-Id: <25177.633792823@tis.com>
From: James M Galvin <galvin@TIS.COM>

		Some might argue it is a security breach to let one
		level convey information about (the existance of)
		other levels.  I will leave that to the spooks to
		answer...

	I think you're confusing protocol archictectural layering with
	multi-level security.  Any correctly-implemented multilevel
	security system wouldn't let this information leak out, via
	IPMP or otherwise, if it shouldn't be allowed to leak.

That is one interpretation.  Another is to realize my network may be
"private", and I do not wish to explicitly tell you anything about it,
including its MTU size, regardless of level.

Now I realize that given sufficient trials something like the MTU could
probably be "learned", which is why I said "explicitly" above.  However, I
could also make the learning process hard by going out of my way to confuse
you.

Jim

From fab@saturn.ACC.COM  Wed Jan 31 08:39:33 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA28302; Wed, 31 Jan 90 08:39:33 PST
Received: by decwrl.dec.com; id AA03603; Wed, 31 Jan 90 08:39:23 -0800
Received: from SATURN.ACC.COM by salt.acc.com (5.61/1.34)
	id AA10960; Wed, 31 Jan 90 08:40:04 -0800
Received: by saturn.acc.com (5.51/1.28)
	id AA14571; Wed, 31 Jan 90 11:37:36 EST
Date: Wed, 31 Jan 90 11:37:36 EST
From: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc)
Message-Id: <9001311637.AA14571@saturn.acc.com>
To: mtudwg
Subject: draft RFC comments


Folks,

	What I was trying to accomplish in my suggestion was a way
to tie together discovery of the MTU with the three-way handshake
in TCP.  Having reviewed the working group log and the draft RFC,
I have some comments and proposals:

1.  Add a PMTU query option, as in the original RFC1063.  The receiving
TCP can retrieve the PMTU query option and respond with a PMTU reply
option and a new PMTU query of its own.  The point to doing this is the
retransmission and sequence number processing of TCP will guarantee the
delivery of this information.

2.  TCP would have to do this only if the call to GET_MAXSIZES call
indicated the real size was unknown.  If it is known, the MTU size
would be used in calculating the MSS size in the MSS option.  If it
is unknown, the PMTU query option would be specified by TCP.

3.  Allowing TCP to generate the reply guarantees retransmission of the
reply.  Tying it to the SYN, SYN-ACK, ACK-of-SYN sequence gets the
MSS decided in a predictable sequence.  There is no way to do this with
an ICMP response.  

4.  UDP and other protocols at that layer could use the information
since the IP layer still maintains a cache of MTU sizes.  

5.  I agree with Pradeep that the next-hop field seems redundant, since
non-cooperating gateways will ignore this option.  The result is that
the minMTU is not updated.  Subsequent fragmentation will correct this.
The objection raised to his point was if the destination host did not
support Unexpected Fragment messages, the fragmentation would go
unnoticed (unpunished?).  Suppose we have the fragmenting gateway
return an Unexpected Fragment message?  This will requre more state in
the gateway, but would protect against non-cooperating hosts.
(Maybe this requires too much state in the gateway. What say you all?)

Overall, I am impressed with the development of the MTU discovery working
group, and only wish I had been involved from the beginning.  Since I am
currently working on the TCP/IP implementation in ACC's ACCES/MVS product,
this is great timing for working on IP options and any TCP changes
necessary.  When it comes time to experiment, I am anxious to participate.

Light up your flaming arrows, warm up your blowtorches, and let me know
what you think.

Fred



From mogul  Wed Jan 31 16:03:29 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA29947; Wed, 31 Jan 90 16:03:29 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002010003.AA29947@acetes.pa.dec.com>
Date: 31 Jan 1990 1603-PST (Wednesday)
To: James M Galvin <galvin@TIS.COM>
Cc: MTU Discovery <mtudwg>
Subject: Re: "Fragmentation considered harmful" 
In-Reply-To: James M Galvin <galvin@TIS.COM> / Wed, 31 Jan 90 08:33:43 -0500.
             <25177.633792823@tis.com>

    That is one interpretation.  Another is to realize my network may be
    "private", and I do not wish to explicitly tell you anything about it,
    including its MTU size, regardless of level.
    
    Now I realize that given sufficient trials something like the MTU could
    probably be "learned", which is why I said "explicitly" above.  However, I
    could also make the learning process hard by going out of my way to confuse
    you.

I find it hard to believe ("incredible" in the dictionary sense) that
anyone would allow me to route packets through their network but not
let me know what their MTU is.  Even less likely is that they would
expend resources (their own, as well as mine) to make it hard for me
to find out.

-Jeff

From philipp@Gipsi.Gipsi.Fr  Wed Jan 31 17:43:09 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA00466; Wed, 31 Jan 90 17:43:09 PST
Received: by decwrl.dec.com; id AA05540; Wed, 31 Jan 90 17:43:02 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA27833; Thu, 1 Feb 90 01:57:51 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA11875; Thu, 1 Feb 90 01:58:25 -0100 (MET)
Date: Thu, 1 Feb 90 01:58:25 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002010058.AA11875@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: mogul
Subject: Re: "Fragmentation considered harmful"
Cc: MTU Discovery <mtudwg>

	I find it hard to believe ("incredible" in the dictionary sense) that
	anyone would allow me to route packets through their network but not
	let me know what their MTU is.  Even less likely is that they would
	expend resources (their own, as well as mine) to make it hard for me
	to find out.
	
Jeff, you do seem to have a point.  I guess it would be easier to put
a brick-wall filter (to abuse a EE term) at the organization's border
to stop unwanted packets (such as probes).  An example is of course
VISA gateways or policy-based route hiding...

-Philip

From mogul  Fri Feb  2 09:40:48 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA18426; Fri, 2 Feb 90 09:40:48 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002021740.AA18426@acetes.pa.dec.com>
Date:  2 Feb 1990 0940-PST (Friday)
To: mtudwg
Cc: 
Subject: Re: Comments on PMTU-Draft-RFC

I'll save the hard ones for the IETF meeting, but there are a few of
Steve Deering's comments that are easy to take care of:

    page 6, third paragraph: I agree with Pradeep, concerning the
    confusion over whether or not the next-hop field contains zero.
    Seems to me there is *no* need ever to set it to zero -- the
    decision can always be: "is this my address or not".  As it is,
    you've introduced three states (my address, zero, other), when only
    two are needed (my address, other), making it harder to understand
    the protocol.  Or have I missed some subtle requirement for three
    states?

One thing that some people apparently have missed is that the whole
point of this next-hop business is so that when the option reaches
the last-hop router, it is possible to know if ALL the routers on
the path have correctly updated the MTU value.  Steve is correct, though,
that if we change the protocol so that a router simply stops updating
the next-hop field if it isn't "right", rather than setting it to zero,
it will be "wrong" when it reaches the last-hop router; that is, there
is no need for the zero state.  Keith pointed out to me that this
change means that, at least at the receiver, you automatically get the
address of the (first) router that doesn't understand the option.  This
might make finger-pointing easier!

    page 20, section 8.5: do you want to mention proxy-ARP situations?  That's
    a case where PMTU discovery would be useful, but the sender thinks it is
    sending to a neighbor.  Of course, in that case, the next-hop field doesn't
    work too well.  Is proxy ARP being actively discouraged yet?

Proxy ARP is only "used" (unwittingly) by senders that have not been
upgraded to support subnetting (or more precisely, RFC950).  I see no
reason to expect that a sender that is upgraded to support MTU discovery
would not also be upgraded to meet the existing mandatory standards.
Does the RFC have to include explicit prohibitions against stupidity?

-Jeff

From fab@saturn.ACC.COM  Fri Feb  2 10:34:24 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA18595; Fri, 2 Feb 90 10:34:24 PST
Received: by decwrl.dec.com; id AA13009; Fri, 2 Feb 90 10:33:33 -0800
Received: from SATURN.ACC.COM by salt.acc.com (5.61/1.34)
	id AA00162; Thu, 1 Feb 90 13:14:30 -0800
Received: by saturn.acc.com (5.51/1.28)
	id AA29867; Thu, 1 Feb 90 16:12:01 EST
Date: Thu, 1 Feb 90 16:12:01 EST
From: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc)
Message-Id: <9002012112.AA29867@saturn.acc.com>
To: mtudwg
Subject: draft rfc comments again


My mailer bounced my first attempt, so I will try again.

----------------------------cut here--------------------------------
From fab Tue Jan 30 18:36:40 1990
To: mtudwg@decwrl.dec.com
Subject: draft RFC comments
Status: RO



Folks,

	What I was trying to accomplish in my suggestion was a way
to tie together discovery of the MTU with the three-way handshake
in TCP.  Having reviewed the working group log and the draft RFC,
I have some comments and proposals:

1.  Add a PMTU query option, as in the original RFC1063.  The receiving
TCP can retrieve the PMTU query option and respond with a PMTU reply
option and a new PMTU query of its own.  The point to doing this is the
retransmission and sequence number processing of TCP will guarantee the
delivery of this information.

2.  TCP would have to do this only if the call to GET_MAXSIZES call
indicated the real size was unknown.  If it is known, the MTU size
would be used in calculating the MSS size in the MSS option.  If it
is unknown, the PMTU query option would be specified by TCP.

3.  Allowing TCP to generate the reply guarantees retransmission of the
reply.  Tying it to the SYN, SYN-ACK, ACK-of-SYN sequence gets the
MSS decided in a predictable sequence.  There is no way to do this with
an ICMP response.  

4.  UDP and other protocols at that layer could use the information
since the IP layer still maintains a cache of MTU sizes.  

5.  I agree with Pradeep that the next-hop field seems redundant, since
non-cooperating gateways will ignore this option.  The result is that
the minMTU is not updated.  Subsequent fragmentation will correct this.
The objection raised to his point was if the destination host did not
support Unexpected Fragment messages, the fragmentation would go
unnoticed (unpunished?).  Suppose we have the fragmenting gateway
return an Unexpected Fragment message?  This will requre more state in
the gateway, but would protect against non-cooperating hosts.
(Maybe this requires too much state in the gateway. What say you all?)

Overall, I am impressed with the development of the MTU discovery working
group, and only wish I had been involved from the beginning.  Since I am
currently working on the TCP/IP implementation in ACC's ACCES/MVS product,
this is great timing for working on IP options and any TCP changes
necessary.  When it comes time to experiment, I am anxious to participate.

Light up your flaming arrows, warm up your blowtorches, and let me know
what you think.

Fred


----------------------------cut here--------------------------------

------------------------------------------------------------------------
Fred Bohle			EMAIL: fab@saturn.acc.com
ACC				AT&T : 301-290-8100 
10220 Old Columbia Road
Columbia, MD 21046
------------------------------------------------------------------------


From deering@Pescadero.Stanford.EDU  Fri Feb  2 18:26:54 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA19925; Fri, 2 Feb 90 18:26:54 PST
Received: by decwrl.dec.com; id AA27611; Fri, 2 Feb 90 12:36:12 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA01866; Thu, 1 Feb 90 12:56:55 PDT
Date: 1 Feb 1990 12:46-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: draft RFC comments
To: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc)
Cc: mtudwg
Message-Id: <90/02/01 1246.202@pescadero.stanford.edu>
In-Reply-To: fab%saturn.ACC.COM's message of Tue, 30 Jan 90 183642 EST

Fred,

If I understand your proposal, it does not handle the situation where
the PMTU decreases after the TCP connection has been established.
We'd like to have a scheme that detects and adjusts to PMTU changes,
which can occur whenever the dynamic routing changes.

Steve

From deering@pescadero.stanford.edu  Fri Feb  2 22:17:07 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA20473; Fri, 2 Feb 90 22:17:07 PST
Received: by decwrl.dec.com; id AA02460; Fri, 2 Feb 90 13:12:12 -0800
Received: from Pescadero.Stanford.EDU by gregorio.stanford.edu with TCP; Fri, 2 Feb 90 02:46:53 PST
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA04789; Fri, 2 Feb 90 02:46:48 PDT
Date: 2 Feb 1990 2:41-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: draft RFC comments
To: mtudwg%decwrl.dec.com@gregorio.stanford.edu
Message-Id: <90/02/02 0241.352@pescadero.stanford.edu>
In-Reply-To: Steve Deering's message of 1 Feb 1990 1246-PST

[This is a message I sent to Fred Bohle and cc'd to the mtudwg list.
For some unknown reason, the cc copy has been sitting in pescadero's
output queue all day long, refusing to go to decwrl.  So I'm sending
it via another host.  Sorry for any duplicates.  - Steve]

Fred,

If I understand your proposal, it does not handle the situation where
the PMTU decreases after the TCP connection has been established.
We'd like to have a scheme that detects and adjusts to PMTU changes,
which can occur whenever the dynamic routing changes.

Steve

From philipp@Gipsi.Gipsi.Fr  Mon Feb  5 05:02:20 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA01379; Mon, 5 Feb 90 05:02:20 PST
Received: by decwrl.dec.com; id AA09399; Mon, 5 Feb 90 05:02:02 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA15746; Mon, 5 Feb 90 14:01:49 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA05555; Mon, 5 Feb 90 02:39:16 -0100 (MET)
Date: Mon, 5 Feb 90 02:39:16 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002050139.AA05555@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: MTU Discovery <mtudwg>
Subject: Re: Comments on PMTU-Draft-RFC

As for the two-byte MTU field, you could change the units to 8 byte
chunks (the granularity of fragmentation).  This would yield an MTU
maximum of 512KBytes.

-Philip

From philipp@Gipsi.Gipsi.Fr  Mon Feb  5 05:03:29 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA01386; Mon, 5 Feb 90 05:03:29 PST
Received: by decwrl.dec.com; id AA09603; Mon, 5 Feb 90 05:03:22 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA15760; Mon, 5 Feb 90 14:02:28 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA05588; Mon, 5 Feb 90 02:50:15 -0100 (MET)
Date: Mon, 5 Feb 90 02:50:15 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002050150.AA05588@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: deering@pescadero.stanford.edu
Subject: Re: Comments on PMTU-Draft-RFC
Cc: MTU Discovery <mtudwg>

> concluding remark: it's too bad the protocol ended up so complicated.

Yes, I agree.  My suggestion to reconsider the Mogul/Kent probe
protocol raised a bit of dust about privacy, but no one said what
was inherently wrong with it.  I think we need some discussion on
this (though it is a bit late, admittedly).  If this comes up at
IETF, can someone make notes?  I think Steve and I shall be absent.

Thanks,

-Philip

From jnc@PTT.LCS.MIT.EDU  Mon Feb  5 12:05:00 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA03326; Mon, 5 Feb 90 12:05:00 PST
Received: by decwrl.dec.com; id AA15796; Mon, 5 Feb 90 12:04:56 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA26179; Mon, 5 Feb 90 15:04:49 EST
Date: Mon, 5 Feb 90 15:04:49 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <9002052004.AA26179@PTT.LCS.MIT.EDU>
To: mtudwg
Subject: Someone' mailer did something wierd.....

From: MAILER-DAEMON@PTT.LCS.MIT.EDU (Mail Delivery Subsystem)
Subject: Returned mail: Deferred: Host Name Lookup Failure
Message-Id: <9002012038.AA13329@PTT.LCS.MIT.EDU>
To: jnc@PTT.LCS.MIT.EDU
Status: R

   ----- Transcript of session follows -----
550 mtudwg@ptt.lcs.mit.edu... User unknown

   ----- Unsent message follows -----
Date: Thu, 1 Feb 90 15:38:09 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <9002012038.AA13326@PTT.LCS.MIT.EDU>
To: mogul@decwrl.dec.com
Subject: Re: "Fragmentation considered harmful"
Cc: jnc@PTT.LCS.MIT.EDU, mtudwg@PTT.LCS.MIT.EDU

	Well, I'm not sure how applicable this will be in the medium term,
since we are starting to see routing protocols that make decisions based on
TOS, and routers are marking interfaces with security levels. So, if you say
TOS '001', there is an increasing likelihood that *all* your links will have
TOS '001'; if you have TS traffic, it will only go over TS links. The probe
wouldn't return you much useful information in that case!
	On the other hand, maybe it will be useful in the short term; I just
don't have a good feel for how useful. I'd only like to add features (i.e.
complexity) to the architecture if there is a demonstrated need, and I don't
recall any agitation for it. Is there need and use for this?
	Also, as Jeff points out, let's not divert effort from the MTU stuff
at hand. We have to get this out!

	Noel


From mogul  Wed Feb 14 13:16:44 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02011; Wed, 14 Feb 90 13:16:44 PST
Date: Wed, 14 Feb 90 13:16:44 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002142116.AA02011@acetes.pa.dec.com>
To: mtudwg
Subject: MTU Discovery Working Group - mailing list

Many people signed the MTU Discovery roster at the meeting
last week who were not already on the "mtudwg@decwrl.dec.com"
mailing list.  I have added you all to the list (subject to
typographic errors or transcription errors, of course).

This message serves two purposes:
	(1) If you do NOT want to be on this mailing list,
	send a message to "mtudwg-request@decwrl.dec.com"
	asking to be removed from the list.  Do this IMMEDIATELY,
	since I plan to send several large messages in the
	next day or so.

	(2) I'm checking to see if the addresses on the list
	are all good.  PLEASE don't bother sending me mail saying
	that you got this message; I just want to purge the bogus
	addresses.  If you want to send a message to the entire
	list, wait a day or so, until I'm sure(r) that the list
	is OK.

Upcoming later this week:
	o   The 2 Feb 1990 draft of the McCloghrie/Fox/Mogul proposal

	o   Minutes of the 7 Feb 1990 meeting at IETF

Thanks
-Jeff

From hplabs!sytek!kzm  Thu Feb 15 19:13:29 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA10751; Thu, 15 Feb 90 19:13:29 PST
Received: by decwrl.dec.com; id AA29785; Thu, 15 Feb 90 19:13:26 -0800
Received: by hplabs.hpl.hp.com
	(15.11.1.3/15.5+IOS 3.14) id AA12183; Thu, 15 Feb 90 22:13:16 est
Received: from sytek with uucp; Thu, 15 Feb 90 18:39:50
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA04735; Thu, 15 Feb 90 18:39:50 PST
From: hplabs!sytek!kzm (Keith Mc Cloghrie)
Message-Id: <9002160239.AA04735@sytek.hls.hac.com>
Subject: Post-meeting status of draft-RFC
To: mogul (Jeffrey Mogul)
Date: Thu, 15 Feb 90 18:39:46 PDT
Cc: hplabs!mtudwg
In-Reply-To: <9002142051.AA01873@acetes.pa.dec.com>; from "Jeffrey Mogul" at Feb 14, 90 1251
X-Mailer: ELM [version 2.2 PL0]

Jeff,

In talking to others since the PMTU-Discovery Working Group
meeting last week, I've discovered that not everybody was
left with the same impressions.

The whole question of which method is best seems to me a matter 
of choosing the right trade-off: how much fragmentation is 
avoided v. the amount of processing/state information in various 
places.  I certainly like the fact that using the RF bit avoids 
having to keep state at the destination.  But none of its variants 
that I've heard so far are as good at avoiding fragmentation as 
the proposal in the draft RFC handed out at the meeting.

If the bit is made available for PMTU-discovery, then I look 
forward to seeing how good a proposal that Van/Steve/Mike can 
come up with.  (Note that there are a number of issues that they
still need to resolve; for example, to decide on a method of
determining whether the destination is prepared to send 
Frag-Report ICMP messages; the discussion at the meeting didn't
resolve this and didn't address UDP either.  It occurs to me that
they could send an IP option to ask the destination explicitly, but
I'm sure they'll find something more creative, which will also
cover the possibility of packet loss/etc.).

On the other hand, if the bit is still not available (or if Van, 
Steve & Mike can't find the time to write up their proposal), then 
as I said at the beginning of the meeting last week, I see the 
draft-RFC as the combination which produces the least fragmentation. 
I believe it's worthwhile to evaluate the removal of capabilities 
from this combination, to determine whether such removal results in
a gain in simplification which outweighs the corresponding increase 
in fragmentation.

Keith.


From @CORNELLC.cit.cornell.edu:JMWOBUS@SUVM.BITNET  Mon Feb 19 12:29:28 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16519; Mon, 19 Feb 90 12:29:28 PST
Received: by decwrl.dec.com; id AA13003; Mon, 19 Feb 90 12:29:22 -0800
Message-Id: <9002192029.AA13003@decwrl.dec.com>
Received: from SUVM.ACS.SYR.EDU by CORNELLC.cit.cornell.edu (IBM VM SMTP R1.2.1MX) with BSMTP id 3486; Mon, 19 Feb 90 15:29:28 EST
Received: by SUVM (Mailer R2.03B) id 8513; Mon, 19 Feb 90 15:28:04 LCL
Date:      Mon, 19 Feb 90 15:24:34 EST
From: "John M. Wobus" <JMWOBUS%SUVM.BITNET@CORNELLC.cit.cornell.edu>
To: mtudwg
Subject:   How to use an IP-header bit for Path MTU discovery.

If an IP header bit is to be dedicated to MTU discovery, then one strategy
for using it is to send it in exactly those cases where the recipient host
ought to try something it normally wouldn't.

For example, if a useful behavior is to normally set the MTU to 576 (I'm
speaking of inter-network traffic here: traffic on a LAN would have its own
rules) but to use some higher number (say 1500) when doing so causes no
fragmentation, then the bit might be defined as follows:

   The bit means that the sending host has received no fragmented
   packets from the recipient.

Each host-route entry would include a flag meaning "the last oversized
packet I received from this recipient was NOT fragmented".  It should be
turned on when the host route is created.  A host would simply copy this
bit into all the IP packets that it sends to the other host and would
start out with its favorite large MTU.

Recipients of this bit use it by simply switching to a smaller MTU (576)
if the bit is clear.  If they are talking to a host without the feature,
they simply always switch down.

The advantage of this plan is that it will work smoothly with any other
hosts which ignore the bit.  Also, the bit is the only new thing that has to
be implemented (no ICMP messages or IP options).

Possible disadvantages: is the MTU correctly sized at a time when it will
do any real good?  Are two "candidate" MTU sizes enough?  (note: this
method can probably be adapted to zoom in on intermediate MTUs--the
protocol allows implementations to try one MTU, then another, though it
fails to tell a host exactly when is a good time to believe the bit after
the first time: that would be left to clever implementation) Is it too
much to ask hosts to look up the host route each time it receives a
packet?  (this method requires the host-route entry be looked up each time
an oversized packet is received, be it fragmented or not).  Is it OK to
save such state in host-route entries?  Will some gateways or hosts choke
on the bit?

John Wobus
Syracuse University

From mogul  Mon Feb 19 13:08:39 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16668; Mon, 19 Feb 90 13:08:39 PST
Date: Mon, 19 Feb 90 13:08:39 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002192108.AA16668@acetes.pa.dec.com>
To: mtudwg
Subject: Minutes of MTU Discovery Working Group Meeting (7 Feb 1990)

	MTU Discovery Working Group
	Chairperson: Jeffrey Mogul/DECWRL

	CURRENT MEETING REPORT
	7 February 1990
	Held at the IETF meeting in Tallahassee, Florida
	Reported by Jeffrey Mogul

	AGENDA

		a) Report on current draft (McCloghrie/Fox/Mogul)
		b) Review other alternatives
		c) Review goals and assumptions
		d) Obtain consensus on approach
		e) Focus on details
		f) What next?

	ATTENDEES

	Art Berggreen		art@salt.acc.com
	Noel Chiappa		jnc@PTT.LCS.MIT.EDU
	Farokh Deboo		sun!iruucp!ntrlink!fjd
	Rich Fox		sytek!rfox@sun.com
	Keith Mc Cloghrie	sytek!kzm@hplabs.HP.COM
	Jeff Mogul		mogul@decwrl.dec.com
	Nuggehalli Pradeep	pradeep@orville.nas.nasa.gov
	James VanBokkelen	jbvb@ftp.com
	Tony Mason		mason@transarc.com
	Drew Perkins		ddp@andrew.cmu.edu
	John Moy		jmoy@proteon.com
	David Paul Zimmerman	dpz@convex.com
	James R. Davin		jrd@ptt.lcs.mit.edu
	Bill Melohn		melohn@eng.sun.com
	Richard Bosch		probe@mit.edu
	Michael Petry		petry@trantor.umd.edu
	Ron Broersma		ron@nosc.mil
	Mark Rosenstein		mar@mit.edu
	Ballard Bare		bare%hprnd@hplabs.hp.com
	John Veizades		veizades@apple.com
	Tony Staw		staw@marvin.enet.dec.com
	John Cavanaugh		John.Cavanaugh@StPaul.ncr.com
	John M. Wobus		JMWobus@suvm.acs.syr.edu
	Steve Willis		swillis@wellfleet.com
	Van Jacobson		van@lbl-csam.arpa
	Mike Karels		karels@berkeley.edu
	Mike Marcinkericz	mdm@gumby.dsd.trw.com

	[Some of these people did not sign the roster, but were obviously
	there.  Some other people who didn't sign the roster have slipped
	my memory.]

	MINUTES

	This was the second meeting of the MTU Discovery Working Group.

	We started with a quick presentation by Keith McCloghrie of
	the draft that he and Rich Fox wrote based on the apparent
	consensus of the December meeting.  Some attendees had not
	read the draft, and we tried to ensure that everyone understood
	the basic outline.  [Summary: senders occasionally attach an
	IP PTMU-Query Option to their datagrams.  Routers update the
	PMTU value in the option; the last-hop router returns the PMTU
	to the sender using the ICMP Path-MTU message.  If the destination
	host detects a change in the MTU (when a fragment is received),
	it sends an ICMP Unexpected Fragment Report message.]
	
	We also reviewed the "Steve Deering" proposal from last year,
	as there was a realization that it might not be dead, after all.
	Among other things, we now know that there are not 1 but 4 spare
	bits in the IP header (there are 3 unused in the TOS field), and
	that the powers that be might therefore be likely to let us use
	one.  [Summary of Deering proposal: senders often send datagrams
	with "RF" (Report Fragmentation) bit set in the IP header.  A
	host receiving fragment-0 of a datagram with RF set sends an
	ICMP Fragmentation Occurred message.]

	We then started a fairly unstructured discussion comparing the
	costs and benefits of the two approaches.
	
	    (1) Lifetime of protocol: on the one hand, in principle
	    MTU discovery should be obviated by the coming revolution
	    in routing protocols.  Within "a few" years, the routing
	    protocols will provide path-MTU information, so MTU discovery
	    will be unnecessary.  Of course, we all know about things
	    that are supposed to happen "real soon now"; we particularly
	    all know about relatively new things that "everyone" implements.
	    Still, while avoiding the trap of assuming that the world
	    will be perfect in just a couple of years, it may not be
	    worth trying to solve the problem of MTU discovery for all
	    time, since it may not be useful for that long.

	    (2) Rapidity of deployment:  Clearly, MTU discovery of any
	    form only works for a sender if some subset of the other
	    nodes (routers and/or destinations) suport it.  Query-based
	    schemes depend upon support from a large fraction of the
	    routers; RF-style schemes only help if a large fraction of
	    the end-hosts support it.  There was some debate about
	    which population is more likely to upgrade soon (routers or
	    end-hosts).  No consensus was reached.

	    (3) Connection lifetimes:  Van's data suggest that most
	    non-local TCP connections are short (ca. 4 datagrams).
	    This makes some sense (mostly SMTP) although this is only
	    one sample point, and we agreed that more data would be
	    useful.  Van argued that this works against a query-based
	    scheme, since by the time one has useful information,
	    there's not much left to do with it.  His argument in favor
	    of the RF scheme was that the right way to use it is to
	    assume that you can send large datagrams (sized by your
	    first-hop MTU, or perhaps some estimate of the NSFNET PMTU,
	    ca. 1500), and let the destination tell you if you are
	    screwing up.

	    In general, we realize that fragmentation is not inherently
	    evil.  Although it might create some extra overhead for the
	    routers, what we really have to avoid is the "deterministic
	    fragment loss" problem which causes connections to stall.
	    Thus, (I hope I am correctly paraphrasing Van's argument)
	    it is only worth doing for connections that last a while,
	    either because they are carrying lots of data, or because
	    they are stalled due to fragment loss.  Query-based schemes
	    waste router resources because processing IP options is
	    expensive, and the payoff is unlikely.

	    It was argued that, since the senders cache the MTU values
	    learned by either scheme in the per-host routing entries,
	    querying would not have to be done on every connection to
	    be useful.  Again, Van drew on his traffic studies to
	    suggest that (even over a 12-hour period) there was
	    generally little correlation between connections ... that
	    is, just because one pair of hosts makes a connection does
	    not mean that they will do so any time soon.  Some of us
	    did not believe that is necessarily true (for example, how
	    much traffic comes from mail-hub machines like DECWRL and
	    UUNET?)  Again, we agreed that it would be nice to have
	    more traffic data available.

	    (4) Complexity: Now that the draft specification for the
	    query-based scheme is done, we realized that it is a lot
	    more complex than we thought.  One problem is the number
	    of tunable parameters.  Since the RF scheme doesn't require
	    the receiver to maintain any state about the sender [actually,
	    this is not quite true, as noted later], doesn't require
	    the sender to schedule when to send the option, doesn't
	    cause the receiver to send notifications when intentional
	    fragmentation occurs [NFS would probably not set RF], and
	    it requires no support at all from the routers, it appears
	    to be simpler [but keep reading].

	After this discussion, it was pretty clear that the consensus
	had shifted to trying to use the RF scheme.  We made the assumption
	that we could get a header bit (Van argued that although the
	RF scheme could be done using an option, the cost/benefit
	analysis might be against it).  The next step was to explore
	how well that would really work.
	
	One problem that came up right away is that James VanBokkelen
	believes there to exist many PC-based systems that
	    (1) do not reassemble fragments
	    (2) do advertise MSS values of 1500 to non-local peers
	Currently, these hosts function because the 576-if-nonlocal
	rule observed by most non-PC hosts means that, given today's
	Internet, even when they advertise an MTU of 1500 to a non-local
	host, the host	at the other end will not send datagrams big
	enough to be fragmented.  [I suppose it is unlikely for two
	PCs to talk to each other over long distances.]   However, if
	we use the simplest RF scheme, these hosts are going to get
	fragmented datagrams.  Since we assume that any host which
	implements MTU discovery is also in conformance with the other
	rules (specifically, fragmentation reassembly), we therefore
	know that such sub-standard PCs won't send the ICMP Fragmentation
	Occurred message, and these connections would stall.
	
	The obvious fix is to not invoke MTU discovery (i.e., not send
	segments > 576 bytes) unless you are sure that the other end
	supports it.  This means that you have to have seen a datagram
	with RF set coming back to you from the destination before
	you can send large datagrams.
	
	More subtly, since we don't want to mislead these stupid PCs
	(which apparently don't follow the 576-byte rule in either
	direction) you cannot even send an MSS > 576 to a non-local
	peer until you have seen an RF bit from it.  Thus, since the
	TCP MSS option can only be sent on the SYN datagram, a host
	initiating a TCP connection may not be able to use MTU discovery
	(and large segments) unless it has talked with the other end
	recently.  (The second host is in a better position; since it
	sees the RF bit before it has to sends its own MSS option, it
	can set a large MSS immediately.  This is nice for FTP retrieves;
	it doesn't help for SMTP, alas).
	
	The consensus was that this limitation was acceptable, since
	it erred on the conservative side.  (Although it errs on the
	case of the most common connection-type [SMTP], since SMTP
	connections are normally short we wouldn't gain much anyway.)
	When two connections are made in quick succession, things work
	nicely (e.g., several mail messages, or the control connection
	of an FTP session followed by the data connection.  The control
	connection will seldom carry large segments, but the exchange
	of RF bits done then will allow the data connection to use
	large segments right away.)
	
	Mike Karels proposed (off-the-cuff, not necessarily believing
	that it was right) that routers fragmenting a datagram with
	RF set could also send the fragmentation-occurred ICMP.  This
	seemed to create problems given the requirement for handshaking
	imposed by the broken-PC crowd, so Mike agreed to go off and
	think about this one.
	
	One question arose about the use of a previously unused bit in
	the IP header: what would current implementations do if they
	see it set?  (We know that we can safely add options, since
	by definition these are ignored if not known.)  While the IP
	spec says these bits must be zero, the "robustness principle"
	implies that routers and hosts should ignore them.  Unfortunately,
	John Moy from Proteon admitted that Proteon routers drop such
	datagrams, and Noel Chiappa says that this is true of other
	implementations based on his old MIT "C-gateway" code.  We have
	to find out just how bad this is going to be; perhaps Proteon
	will be able to upgrade all of its customers before MTU discovery
	is widely implemented.
	
	[Side note: Clearly, implementations contrary to the basic
	IP spec are causing us serious grief.  How much do we twist
	the protocol to accomodate them?]
    
	An orthogonal issue is that in high-speed long-distance
	networks, there might be lots of packets in flight when the
	route changes to one with a lower MTU (e.g., on a satellite
	link with a half-second RTT, 4kb packets, and 100 Mbit/sec
	channel, this means 1500 packets per RTT!)  Since the source
	cannot react to a Fragment Occurred message sooner than one
	RTT worth of packets after the one that triggered the message,
	we are concerned that setting the RF bit on every packet could
	lead to positive (i.e., anti-stability) feedback in a network
	that is loosing capacity.
	
	This could be attacked in two ways: limit the rate at which the
	RF bit is sent, or limit the rate at which the ICMP is sent.
	The former could be done "once per RTT", once per some constant
	time period, or perhaps once per window.  It's not clear if
	there is a convenient way of marking out the boundaries
	between windows

	ACTION ITEMS
	
	(1) Noel Chiappa and Van Jacobson were assigned to try to
	get the IESG to free up an IP header bit.
	
	(2) Mike Karels was going to think more about having routers
	send ICMPs when they fragment.
	
	(3) We need to determine how many routers will drop packets
	with RF set, and how hard it will be to fix this.  Is it any
	different if we use one of the bits in the TOS area?
	
	(4) Ditto for end-hosts; are there any that drop such packets?
	
	(5) The Router Requirements WG was known to be considering
	changing the way that fragmentation was done (fragment into
	equal-size pieces; currently, routers are supposed to send
	N maximal-size fragments and one smaller one).  This would
	make the RF scheme nearly useless. [Phil Almquist says that
	the RRWG will work with us on this, so it shouldn't be a problem].
	
	(6) Perhaps more traffic studies would be useful.
	
	(7) Someone has to write the next draft.  Keith and Rich were
	thanked for their hard work, on their draft that is now tabled,
	and were not coerced into starting a different document.  Since
	Van was the fiercest proponent of RF at the meeting, he was given
	responsibility to see to it that the draft is written.  He agreed
	but said he was going to try to get Steve Deering to do the work
	(Steve was absent due to serious thesis time-pressure, so maybe
	Van is going to be stuck with it.)  The chair requested a draft
	within one month (7 March 1990).

	IESG ACTION

	On Thursday, February 8, at the open IESG meeting, the IESG
	was asked to allow this bit to be used for MTU discovery.
	I was not there, but I understand that the IESG is willing
	to release this bit if we come to a consensus on a protocol
	that they think is reasonable.

	SCHEDULE

	We expect to meet again at the May IETF meeting.

	At that point, we will probably either adopt one of the
	schemes, or give up.

From mogul  Mon Feb 19 13:12:56 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16692; Mon, 19 Feb 90 13:12:56 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002192112.AA16692@acetes.pa.dec.com>
Date: 19 Feb 1990 1312-PST (Monday)
To: mtudwg
Cc: 
Subject: MTU Discovery Action Items

This is extracted/annotated from my minutes of the meeting.  If your
name is listed here, either you should unvolunteer or fulfill your
duties; either way, results ASAP please!

	(1) Noel Chiappa and Van Jacobson were assigned to try to
	get the IESG to free up an IP header bit.  Can one of you
	report on what happened?
	
	(2) Mike Karels was going to think more about having routers
	send ICMPs when they fragment.  Mike?
	
	(3) We need to determine how many routers will drop packets
	with RF set, and how hard it will be to fix this.  Is it any
	different if we use one of the bits in the TOS area?
	John Moy, what is the story on Proteon routers?
	Any potential problems with cisco, Wellfleet, etc? 
	
	(4) Ditto for end-hosts; are there any that drop such packets?
	Anyone?
	
	(5) Van Jacobson is responsible for providing a draft of the
	RF-bit protocol by 7 March 1990.  Steve Deering might do the work.

Thank you all!

-Jeff

From mogul  Mon Feb 19 13:26:30 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16749; Mon, 19 Feb 90 13:26:30 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002192126.AA16749@acetes.pa.dec.com>
Date: 19 Feb 1990 1326-PST (Monday)
To: mtudwg
Subject: Another MTU Discovery Action Item

Ooops, forgot a big one:
	James Van Bokkelen was arguing that there are a lot of
	PC-based hosts installed that cannot reassemble fragments.
	James, please try to come up with an accurate estimate
	of how many there are, how soon it might be before they
	are fixed, how many vendors are involved.

Thanks
-Jeff

From mogul  Mon Feb 19 13:24:23 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16738; Mon, 19 Feb 90 13:24:23 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002192124.AA16738@acetes.pa.dec.com>
Date: 19 Feb 1990 1324-PST (Monday)
To: "John M. Wobus" <JMWOBUS%SUVM.BITNET@CORNELLC.cit.cornell.edu>
Cc: mtudwg
Subject: Re: How to use an IP-header bit for Path MTU discovery.
In-Reply-To: "John M. Wobus" <JMWOBUS%SUVM.BITNET@CORNELLC.cit.cornell.edu> / 
		Mon, 19 Feb 90 15:24:34 EST.
             <9002192029.AA13003@decwrl.dec.com>

    Each host-route entry would include a flag meaning "the last oversized
    packet I received from this recipient was NOT fragmented".  It should
    be turned on when the host route is created.  A host would simply copy
    this bit into all the IP packets that it sends to the other host and
    would start out with its favorite large MTU.
    Recipients of this bit use it by simply switching to a smaller MTU
    (576) if the bit is clear.  If they are talking to a host without the
    feature, they simply always switch down.

This is clever, and (as far as I know) novel.  It has some potential
problems, including the ones you mentioned, but especially the problem
common to all the RF-bit schemes: how many routers and end hosts will
drop packets with the bit set?  It would also break against those PCs
that cannot reassemble fragments; at least the "handshaking RF" scheme
solves this issue.

I tend towards liking this proposal for the simplicity of the
"two candidate MTU" approach; we already have some experience with
this kind of behaviour (cf. the "subnetsarelocal" flag in some versions
of BSD and BSD-derived systems).  Basically, if one is forced to think
of how many rational possibilities there are for the sender's segment
size, one can easily come up with 2: "576" and the first-hop-net MTU.
Coming up with a third choice is only necessary if we believe that
it is too far from optimal to be stuck with these two choices.

-Jeff

From jrd@PTT.LCS.MIT.EDU  Mon Feb 19 15:35:58 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA17160; Mon, 19 Feb 90 15:35:58 PST
Received: by decwrl.dec.com; id AA06313; Mon, 19 Feb 90 15:35:52 -0800
Received: from ALLSPICE.LCS.MIT.EDU by PTT.LCS.MIT.EDU via TCP with SMTP
	id AA12085; Mon, 19 Feb 90 18:35:41 EST
Message-Id: <9002192335.AA12085@PTT.LCS.MIT.EDU>
To: "John M. Wobus" <JMWOBUS%SUVM.BITNET@cornellc.cit.cornell.edu>
Cc: mtudwg, jrd@PTT.LCS.MIT.EDU
Subject: Re: How to use an IP-header bit for Path MTU discovery. 
In-Reply-To: Your message of Mon, 19 Feb 90 15:24:34 -0500.
             <9002192029.AA13003@decwrl.dec.com> 
Date: Mon, 19 Feb 90 18:35:39 -0500
From: jrd@PTT.LCS.MIT.EDU


The best solution to the MTU problem seems to be to augment
the routing protocols to slosh MTU information around the net.
Then, your local gateway can give you sound hints about what MTU
to use for your desired destination. But this sort of solution
may not happen quickly.

Accordingly, the value of any other solution, in my mind, depends
intimately upon its deployment time. The question of "can we get
a header bit?" is less interesting than the question of "what
needs to be deployed for the mechanism to work?"

The question of a header bit is important because it determines
the cost of the discovery mechanism, but it is not very problematic.
In the absence of a header bit, the performance cost of an IP
option may be prohibitive. But neither the cost of IP option
processing nor the availability of a header bit seem to be issues
that will benefit from a great deal of debate.

Rather, a more interesting question is "what software changes are
required by whom in order for the mechanism to work?"

Clearly, the sending host needs to participate in any MTU discovery
mechanism in order for it to work (amazing deduction, huh?).

Clearly, some cooperation is also needed from some set of
gateways on the path and/or the receiving host, but the nature
and extent of this cooperation is pretty much the central (only?)
question of this effort.

If one is concerned about deployment times, the best mechanisms
are those that have a chance of working even in the absence of
universal deployment. One can argue about whether gateways or
hosts are updated more quickly, but one might also do well to
consider strategies that beg the question.

STRAW MAN:

At the Sending Host:

The IP user (e.g., a TCP connection) turns on the "RF Option" (or
header flag, if you prefer) on "appropriate" outgoing IP datagrams.
This option/flag is NOT copied on fragmentation (i.e., it always
sticks to the first fragment).

At the Last Hop Gateway (post fragmentation processing):

If the "RF Option" is set on a locally-destined packet, and if the MF
flag is set on said packet, then the gateway sends an ICMP Report
Fragmentation message back to the source. The Total Length field of
the IP header in the data portion of said ICMP message will reflect
the least MTU along the path. The "RF Option" of said packet is
then removed/turned off, the header checksum is recomputed, and
the packet forwarded on its way.

At the Receiving Host:

If the "RF Option" is set on a received packet, and if the MF
flag is set on said packet, then the host sends an ICMP Report
Fragmentation message back to the source (as above).

Discussion:

This mechanism requires deployment of new software in the sending
host AND EITHER the last hop gateway OR the receiving host. Thus,
it begs the question of whether gateway software is more quickly
updated than host software. Either way, you win.

If the header rewrite and recomputation of the checksum at the
last hop gateway seems onerous, observe that the mechanism works
nearly as well even if you don't do it. In cases where both the
last hop gateway AND the receiving host have the new software,
the result would be 2 ICMP messages directed back at the source.
Even this cost can be avoided by administratively disabling host
generation of ICMP RF messages on networks where the relevant
gateways already support this feature.

A weakness of this idea is that it does not win at all if neither
the last hop gateway nor the receiving host has new software. In
particular, if all the gateways in the net are smart, but your
last hop gateway (and destination host) is dumb, then you lose.
This weakness is addressed by strategies in which all the smart
gateways cooperate to give you an upper bound on the MTU. It is
not clear to me, however, that an upper bound on the MTU is worth
the effort of computing it. If you aren't stopping fragmentation
completely (on a given path), there seems little point in (possibly)
reducing it.

More grist for the mill,
Chuck













From philipp@Gipsi.Gipsi.Fr  Mon Feb 19 17:22:25 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA17457; Mon, 19 Feb 90 17:22:25 PST
Received: by decwrl.dec.com; id AA20179; Mon, 19 Feb 90 17:22:19 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA25074; Tue, 20 Feb 90 02:21:55 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA23377; Tue, 20 Feb 90 02:22:40 -0100 (MET)
Date: Tue, 20 Feb 90 02:22:40 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002200122.AA23377@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: JMWOBUS%SUVM.BITNET@cornellc.cit.cornell.edu
Subject: Re:  How to use an IP-header bit for Path MTU discovery.
Cc: mtudwg

If the host doesn't implement this bit, then what is to stop
its peer from negotiating down to 28 octet packets?  Keep in
mind the scheme should not assume the minimum MTU you will
ever see is 576 octets (eg. satellite)...

-Philip

From philipp@Gipsi.Gipsi.Fr  Mon Feb 19 17:56:40 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA17516; Mon, 19 Feb 90 17:56:40 PST
Received: by decwrl.dec.com; id AA24832; Mon, 19 Feb 90 17:56:33 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA27068; Tue, 20 Feb 90 02:55:48 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA23471; Tue, 20 Feb 90 02:56:39 -0100 (MET)
Date: Tue, 20 Feb 90 02:56:39 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002200156.AA23471@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: mogul
Subject: Re:  Minutes of MTU Discovery Working Group Meeting (7 Feb 1990)
Cc: MTU Discovery <mtudwg>

On the Deering proposal, it will not work if deterministic fragmentation
loss causes the first fragment to be dropped.

On Van's traffic observations, I assume these were at LBL.  I have to
ask myself just how (a)typical is LBL...

On the Fox et al proposal, how "clean" (though if it works well this
is obviously acceptable) is having an IP option that triggers an
ICMP message?

I know that ICMP is conceptually "part of" and not "layered upon"
IP, but I still think the protocol should use its own message
type or solely IP options...  for architectural purity, and for
simplicity of implementing, testing, monitoring, etc.

I still like the IPMP message type, though perhaps with some
changed/added fields.

-Philip

From philipp@Gipsi.Gipsi.Fr  Tue Feb 20 02:09:00 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA19002; Tue, 20 Feb 90 02:09:00 PST
Received: by decwrl.dec.com; id AA24993; Tue, 20 Feb 90 02:08:50 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA12695; Tue, 20 Feb 90 11:08:03 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA24968; Tue, 20 Feb 90 11:08:52 -0100 (MET)
Date: Tue, 20 Feb 90 11:08:52 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002201008.AA24968@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: jrd@ALLSPICE.LCS.MIT.EDU
Subject: Re: How to use an IP-header bit for Path MTU discovery.
Cc: MTU Discovery <mtudwg>

One problem with turning off the RF bit in the header (I refuse
to delete an option from a packet) is that frag-0 may be
further fragmented along the way, so the most interesting
report is the final one (ie. the one with the smallest fragment
size).  Simple fix:  leave it on all the way.

-Philip

From philipp@Gipsi.Gipsi.Fr  Tue Feb 20 02:24:52 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA19040; Tue, 20 Feb 90 02:24:52 PST
Received: by decwrl.dec.com; id AA26927; Tue, 20 Feb 90 02:24:47 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA14765; Tue, 20 Feb 90 11:24:06 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA25053; Tue, 20 Feb 90 11:25:01 -0100 (MET)
Date: Tue, 20 Feb 90 11:25:01 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002201025.AA25053@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: jrd@ALLSPICE.LCS.MIT.EDU
Subject: Re: How to use an IP-header bit for Path MTU discovery.
Cc: MTU Discovery <mtudwg>

One other advantage to leaving the RF bit on in this scheme is
you can benefit from it completely as long as the gateway on
the *near* side of the lowest MTU link implements it (and the
end systems, of course).  This works much better than the next-
hop address on the IP option of Fox et al.

-Philip

From jnc@PTT.LCS.MIT.EDU  Tue Feb 20 09:22:33 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA22194; Tue, 20 Feb 90 09:22:33 PST
Received: by decwrl.dec.com; id AA16005; Tue, 20 Feb 90 09:22:28 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA14891; Tue, 20 Feb 90 12:22:21 EST
Date: Tue, 20 Feb 90 12:22:21 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <9002201722.AA14891@PTT.LCS.MIT.EDU>
To: mogul
Subject: Re:  MTU Discovery Action Items
Cc: jnc@PTT.LCS.MIT.EDU, mtudwg

	The IESG meeting spent all its time (not surprisingly) on the
IGP issue. I will take it up by mail (the next teleconference is not
for a few weeks).

	Noel

From fab@saturn.ACC.COM  Tue Feb 20 10:58:01 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA22590; Tue, 20 Feb 90 10:58:01 PST
Received: by decwrl.dec.com; id AA27679; Tue, 20 Feb 90 10:57:46 -0800
Received: from SATURN.ACC.COM by salt.acc.com (5.61/1.34)
	id AA01949; Tue, 20 Feb 90 10:58:27 -0800
Received: by saturn.acc.com (5.51/1.28)
	id AA20278; Tue, 20 Feb 90 13:55:53 EST
Date: Tue, 20 Feb 90 13:55:53 EST
From: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc)
Message-Id: <9002201855.AA20278@saturn.acc.com>
To: JMWOBUS%SUVM.BITNET@cornellc.cit.cornell.edu, jrd@allspice.lcs.mit.edu
Subject: Re: How to use an IP-header bit for Path MTU discovery.
Cc: mtudwg

Chuck writes:
>Message-Id: <9002192335.AA12085@PTT.LCS.MIT.EDU>
>To: "John M. Wobus" <JMWOBUS%SUVM.BITNET@cornellc.cit.cornell.edu>
>Cc: mtudwg@decwrl.dec.com, jrd@ALLSPICE.LCS.MIT.EDU
>Subject: Re: How to use an IP-header bit for Path MTU discovery. 
>From: jrd@ALLSPICE.LCS.MIT.EDU
>
>STRAW MAN:
>
>At the Sending Host:
>
>The IP user (e.g., a TCP connection) turns on the "RF Option" (or
>header flag, if you prefer) on "appropriate" outgoing IP datagrams.
>This option/flag is NOT copied on fragmentation (i.e., it always
>sticks to the first fragment).

Sending an RF option/bit once per RTT should minimize the processing
overhead at the gateways/hosts processing datagrams and still discover
a smaller MTU if fragmentation occurs at multiple gateways.  Probing for 
a larger MTU at a frequency similar to the congestion-window probe
frequency will allow for discovery of a larger MTU if a re-route
takes place.  All this logic takes place at the TCP layer, yet is
still processed at the IP layer to maintain the MTU size in its routing
tables.  That is my suggestion for "appropriate outgoing IP datagrams".

>
>At the Last Hop Gateway (post fragmentation processing):

Doing this at ALL gateways has the advantage of helping in the
case of partial distribution of this support.  Those gateways
which support RF bit processing will report fragmentation they
observe or perform.  (On the other hand, it may take more than
one round trip to discover the true minimum MTU.)

>
>If the "RF Option" is set on a locally-destined packet, and if the MF
>flag is set on said packet, then the gateway sends an ICMP Report
>Fragmentation message back to the source.

Or if it will SET the MF flag in the outgoing message (i.e. this
gateway is doing the fragmenting).

>The Total Length field of
>the IP header in the data portion of said ICMP message will reflect
>the least MTU along the path. The "RF Option" of said packet is
     ~~~~~
>then removed/turned off, the header checksum is recomputed, and
>the packet forwarded on its way.
>

This only discovers the smaller MTU discovered so far in the route.
That is why I suggest one RF datagram per RTT to discover the next
fragmentation point.

>At the Receiving Host:
>
>If the "RF Option" is set on a received packet, and if the MF
>flag is set on said packet, then the host sends an ICMP Report
>Fragmentation message back to the source (as above).
>
>... In cases where both the
>last hop gateway AND the receiving host have the new software,
>the result would be 2 ICMP messages directed back at the source.
		     ~~~~~~
If the RF bit is turned off when the ICMP message is sent, only one
ICMP message can be sent.  Therefore the ICMP message will not destabilize
the network load.

>A weakness of this idea is that it does not win at all if neither
>the last hop gateway nor the receiving host has new software.
>... If you aren't stopping fragmentation
>completely (on a given path), there seems little point in (possibly)
>reducing it.

It will stop fragmentation on all but the last hop of the route.
If that hop does not require fragmentation, it wins big.  Isn't
the long-haul network usually the one requiring small datagrams?

This approach makes sense, since the primary responsibility of
reporting fragmentation is the gateway which is fragmenting.  The
use of the RF bit then becomes one of advertising the ability to
do something about fragmentation at the source.  Partial distribution
of the implementation gives incremental gains.

Fred
------------------------------------------------------------------------
Fred Bohle			EMAIL: fab@saturn.acc.com
ACC				AT&T : 301-290-8100 
10220 Old Columbia Road
Columbia, MD 21046
------------------------------------------------------------------------

 

From deering@Pescadero.Stanford.EDU  Sat Feb 24 18:37:11 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA20823; Sat, 24 Feb 90 18:37:11 PST
Received: by decwrl.dec.com; id AA21146; Sat, 24 Feb 90 18:37:06 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA13102; Sat, 24 Feb 90 18:37:00 PDT
Date: 24 Feb 1990 17:30-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: Minutes of MTU Discovery Working Group Meeting (7 Feb 1990)
To: mtudwg
Message-Id: <90/02/24 1730.488@pescadero.stanford.edu>
In-Reply-To: mogul's message of Mon, 19 Feb 90 130839 PST

Taking a short break from the thesis gindstone (millstone?), I have
some questions/comments on the minutes of the MTU discovery meeting.

>	...there are 3 unused in the TOS field...

Looking at the IP spec, I see only two unused bits (6 and 7).  Where is
the third?

>	Within "a few" years, the routing protocols will provide
>	path-MTU information, so MTU discovery will be unnecessary.

This keeps popping up.  Would someone please explain this in more
detail?  Exactly how are the routing protocols going to maintain or
acquire the path-MTU information that hosts need, and how are the hosts
going to learn that information and detect changes in that information?
I can imagine several possible schemes, including giving up dynamic,
datagram routing in favor of static, virtual-circuit routing (which
seems to be where politics-based routing is headed), but I'd really
like to get some facts before I start flaming. :-)

>	In general, we realize that fragmentation is not inherently evil.

One case in which fragmentation is inherently evil is when the packet
rate is high enough to allow the Identifier field to wrap around within
the maximum packet lifetime, raising the possibility of incorrect
reassembly.  (For example, Identifier wraparound occurs in less than 60
seconds, the TTL recommended for TCP, if packets are sent faster than
1092 per second.)

One solution to this problem is to somehow extend the Identifier field,
perhaps in an IP option (yuck!).  A better solution is to avoid
fragmentation, or at least, avoid reassembly.  Under the RF-bit scheme,
we could require the receiver of RF-marked fragments to *drop* such
packets after sending the ICMP Fragment Received message, rather than
reassembling them.  The source host would then treat an ICMP message
as a signal to immediately retransmit using the newly-discovered MTU.

I have yet another proposal which I will post as a separate message.

>	One problem that came up right away is that James VanBokkelen
>	believes there to exist many PC-based systems that
>	    (1) do not reassemble fragments

They wouldn't, by any chance, send an ICMP Reassembly Time Exceeded message
instead, would they?  I suppose that's too much to hope for...

>	One question arose about the use of a previously unused bit in
>	the IP header: what would current implementations do if they
>	see it set? ... Unfortunately, John Moy from Proteon admitted
>	that Proteon routers drop such datagrams, and Noel Chiappa says
>	that this is true of other implementations based on his old MIT
>	"C-gateway" code.

I believe that under 4.3BSD and derivatives (e.g., recent versions of
SunOS and Ultrix), the RF bit does not survive fragmentation.  That is,
if a datagram must be fragmented, the initial fragment ends up with a
zero RF bit, regardless of that bit's value in the original datagram.
Under my scheme, that prevents the sender from detecting the fragmentation,
and we depend on reassembly succeeding or timing-out (until those gateways
are upgraded).

This problem wouldn't arise if we used one of the unused bits in the
TOS field instead, as inelegant as that would be.

Steve

From deering@Pescadero.Stanford.EDU  Sat Feb 24 22:58:01 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA21472; Sat, 24 Feb 90 22:58:01 PST
Received: by decwrl.dec.com; id AA21625; Sat, 24 Feb 90 22:57:58 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA13610; Sat, 24 Feb 90 22:57:53 PDT
Date: 24 Feb 1990 20:51-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: yet another MTU discovery scheme
To: mtudwg
Message-Id: <90/02/24 2051.678@pescadero.stanford.edu>

My original RF-bit proposal assumes that it's OK for fragmentation and
reassembly to occur once in a while, and uses intentional fragmentation
to learn path-MTUs.

If it is decided that fragmentation (actually, reassembly) is to be
avoided at all costs, in order not to be vulnerable to Identifier
wraparound at high speeds, my proposal could be modified to require
that fragmented packets be discarded at the destination rather than
reassembled (assuming they have the RF bit set and ICMP Fragment
Received messages are sent back to the source).  Compared to the
original proposal, this has the drawback of wasting one round-trip
time to learn the MTU of those paths whose MTU is less than
MIN(first-hop-MTU, MSS).  The time is "wasted" in the sense that
the packets that are used to discover the path-MTU must be thrown
away by the receiver.

Let me try out another idea -- actually, a variation on an old idea.

The old idea is to have senders detect fragmentation by setting the
Don't Fragment (DF) bit on all packets, reducing their packet size
if they receive "ICMP Destination Unreachable: Fragmentation Needed
and DF Set" messages (I'll call them "Can't Fragment" messages, for
short).  The problem with this approach is that the Can't Fragment
messages do not tell the sender what the MTU of the next hop network
is, so it may take several retransmissions to learn the MTU (perhaps
even doing a binary search for the right packet size).

The variation I am proposing is to have the gateway that generates the
Can't Fragment message include the recommended MTU (that is, the MTU
of the next hop) in the 32-bit "unused" field of the Can't Fragment
message.  (I'll call that field the "Recommended MTU field".)

The sender behavior is as follows:

	- start by assuming that the path-MTU is MIN(first-hop-MTU, MSS),
	  and send all packets with the DF bit set.

	- if a Can't Fragment message is received with a non-zero
	  Recommended MTU value less than the currently-assumed
	  path-MTU, adopt the recommended MTU as the new assumed MTU,
	  and re-packetize and retransmit the packet identified by the
	  Can't Fragment message (at the transport layer).  Continue to
	  set the DF bit in all packets.

	- if a Can't Fragment message is received with a zero
	  Recommended MTU value, that means the gateway that generated
	  the message has not been upgraded to the new protocol.
	  If the currently-assumed path-MTU is greater than 576,
	  change it to 576.  Repacketize and retransmit the rejected
	  packet.  *Stop* setting the DF bit in outgoing packets.

	- at fairly large intervals (10 - 20 minutes?), reset the
	  assumed-MTU to MIN(first-hop-MTU,MSS) and start sending
	  DF bits again, in order to learn if the path-MTU has
	  increased.

No changes are required at the receiver, and gateways can be upgraded
gradually.  No new IP header bits are required.  If a path's MTU shrinks
at an unmodified gateway, the sender ends up reverting to the conservative
576 rule.  As the hosts and gateways are upgraded to use this strategy,
fragmentation is eliminated from the Internet (just as everyone is getting
fast enough to run into the Identifier-wraparound problem).

In many cases, setting the DF bit will *not* trigger any Can't Fragment
messages, now that  the NSFnet backbone and most regionals support a 1500
byte MTU.  If FDDI ever gets off the ground, it's 4K packets will trigger
Can't Fragment messages from the near-side gateway to any smaller-MTU
subnet, allowing the sender to learn the correct MTU (or 576) in less
than one RTT.  In those rare cases where the MTU shrinks at more than
one point in a path, it will require multiple retransmissions to learn
the path-MTU, but that doesn't seem too serious.

Many of the implementation issues are the same as for the RF-bit scheme,
such as caching of path-MTUs at the IP layer in the sender, participation
of the transport layer in the sender, limiting the number of Can't Fragment
messages generated in response to pipes-full of packets with DF bit set, etc.

Possible problem: gateways that do not send ICMP Can't Fragment messages
when they should.  Are there any such gateways?

Now, I'm not renouncing my original RF-bit proposal (yet).  First, I'd
like to hear some opinions on whether or not the Identifier-wraparound
problem is something we should worry about.

Steve

From deering@Pescadero.Stanford.EDU  Sat Feb 24 23:14:01 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA21517; Sat, 24 Feb 90 23:14:01 PST
Received: by decwrl.dec.com; id AA23293; Sat, 24 Feb 90 23:13:58 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA13646; Sat, 24 Feb 90 23:13:55 PDT
Date: 24 Feb 1990 22:59-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: How to use an IP-header bit for Path MTU discovery.
To: mogul (Jeffrey Mogul)
Cc: mtudwg
Message-Id: <90/02/24 2259.227@pescadero.stanford.edu>
In-Reply-To: mogul's message of 19 Feb 1990 1324-PST (Monday)

In response to John Wobus's clever new proposal, Jeff says:

>	Basically, if one is forced to think of how many rational
>	possibilities there are for the sender's segment size, one
>	can easily come up with 2: "576" and the first-hop-net MTU.
>	Coming up with a third choice is only necessary if we believe
>	that it is too far from optimal to be stuck with these two
>	choices.

Another scenario that *may* become important is FDDI-backbone-FDDI,
where the backbone has a 1500 byte MTU.  You'd rather not end up using
576 bytes as the path-MTU.

Also, the 576 rule still incurs fragmentation on those subnets whose MTU
is less than 576.  If the goal is to eliminate *all* fragmentation,
the simple "two-sizes" rule won't do it (unless you mandate intra-subnet
fragmentation and reassembly for subnets with MTU less than 576).

Steve

From philipp@Gipsi.Gipsi.Fr  Sun Feb 25 05:01:12 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA24102; Sun, 25 Feb 90 05:01:12 PST
Received: by decwrl.dec.com; id AA24773; Sun, 25 Feb 90 05:01:06 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA20133; Sun, 25 Feb 90 13:59:54 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA15518; Sun, 25 Feb 90 14:00:55 -0100 (MET)
Date: Sun, 25 Feb 90 14:00:55 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002251300.AA15518@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: deering@pescadero.stanford.edu
Subject: Re:  yet another MTU discovery scheme
Cc: MTU Discovery <mtudwg>

Your scheme (actually, as you point out it has come up before) would
seem to suffer when trying to find the MTU if a Can't Fragment message
is lost en route...  Depending on the search technique, it could cause
quite poor behaviour.

-Philip

From philipp@Gipsi.Gipsi.Fr  Sun Feb 25 05:03:48 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA24110; Sun, 25 Feb 90 05:03:48 PST
Received: by decwrl.dec.com; id AA25040; Sun, 25 Feb 90 05:03:37 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA20217; Sun, 25 Feb 90 14:02:51 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA15531; Sun, 25 Feb 90 14:03:50 -0100 (MET)
Date: Sun, 25 Feb 90 14:03:50 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002251303.AA15531@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: deering@pescadero.stanford.edu
Subject: Re: How to use an IP-header bit for Path MTU discovery.
Cc: MTU Discovery <mtudwg>

Would be it be so bad to require intra-subnet fragmentation/reassembly
on tiny-gram subnets?  It could be done either at level 2 or 3...

-Philip

From deering@Pescadero.Stanford.EDU  Sun Feb 25 12:54:10 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA25512; Sun, 25 Feb 90 12:54:10 PST
Received: by decwrl.dec.com; id AA05027; Sun, 25 Feb 90 12:54:07 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA16106; Sun, 25 Feb 90 12:53:38 PDT
Date: 25 Feb 1990 12:38-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: yet another MTU discovery scheme
Cc: mtudwg
To: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Message-Id: <90/02/25 1238.824@pescadero.stanford.edu>
In-Reply-To: Philippe Prindeville's message of Sun, 25 Feb 90 140055 -0100

>	Your scheme (actually, as you point out it has come up before) would
>	seem to suffer when trying to find the MTU if a Can't Fragment message
>	is lost en route...  Depending on the search technique, it could cause
>	quite poor behaviour.

A lost Can't Fragment message simply results in transport-layer timeout
and retransmission, just like any packet loss.  No big deal.

I don't understand your comment about "search technique".  The whole
point of my variation on the old scheme is that it doesn't require a
search.

Steve

From philipp@Gipsi.Gipsi.Fr  Sun Feb 25 18:09:54 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA26078; Sun, 25 Feb 90 18:09:54 PST
Received: by decwrl.dec.com; id AA01729; Sun, 25 Feb 90 18:09:49 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA14667; Mon, 26 Feb 90 03:08:41 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA16950; Mon, 26 Feb 90 03:09:36 -0100 (MET)
Date: Mon, 26 Feb 90 03:09:36 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002260209.AA16950@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: deering@pescadero.stanford.edu
Subject: Re: yet another MTU discovery scheme
Cc: MTU Discovery <mtudwg>

But if the MTU is not returned in the Can't Fragment message, one
must determine the appropriate size (or revert to 576 byte datagrams).
As bandwidth increases (and transmission time approaches zero
relative to propagation delay) we will start to see very large MTUs.
This will combat the ID wrap-around (to some extent).  But, using
576 bytes for the MTU will be intolerable.  Hence, one must discover the
exact (modulo some small N) MTU for efficient link usage.  So I think
a requirement of whatever solution we arrive at must allow such
determination.

Needless to say, I don't except the first-hop MTU or 576 byte
argument proposed by Jeff...

-Philip

From philipp@Gipsi.Gipsi.Fr  Sun Feb 25 18:18:21 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA26104; Sun, 25 Feb 90 18:18:21 PST
Received: by decwrl.dec.com; id AA02507; Sun, 25 Feb 90 18:18:14 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA15777; Mon, 26 Feb 90 03:17:27 +0100 (MET)
Received: by gipsi.Gipsi.Fr (4.12/4.8)
	id AA16976; Mon, 26 Feb 90 03:18:27 -0100 (MET)
Date: Mon, 26 Feb 90 03:18:27 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002260218.AA16976@gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: deering@pescadero.stanford.edu
Subject: Re: yet another MTU discovery scheme
Cc: MTU Discovery <mtudwg>

Sorry, I jumped into the middle of my reply in the last message:  If
I understand your scheme (or one of them, anyway ;-) the host sends
Jumbo Don't Fragment messages to provoke a Can't Fragment message.
Assuming this is to be used with existing router software, there is
no indication of the maximum MTU of the link, so a host must determine
it by probes of different sizes, converging on the maximum MTU of
the "weakest" link.

And as I said in the last message, I feel it is necessary to find
(to a reasonable accuracy) the maximum usable MTU, not first-hop
or 576...

-Philip

From deering@Pescadero.Stanford.EDU  Sun Feb 25 18:49:08 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA26163; Sun, 25 Feb 90 18:49:08 PST
Received: by decwrl.dec.com; id AA05067; Sun, 25 Feb 90 18:49:04 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA16984; Sun, 25 Feb 90 18:48:45 PDT
Date: 25 Feb 1990 18:10-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: yet another MTU discovery scheme
To: Philippe Prindeville <philipp@gipsi.gipsi.fr>
Cc: mtudwg
Message-Id: <90/02/25 1810.896@pescadero.stanford.edu>
In-Reply-To: Philippe Prindeville's message of Mon, 26 Feb 90 030936 -0100

>	But if the MTU is not returned in the Can't Fragment message, one
>	must determine the appropriate size (or revert to 576 byte datagrams).

I was suggesting that the MTU *would* be returned in the Can't Fragment
message.  Here is what I wrote:

	The variation I am proposing is to have the gateway that generates the
	Can't Fragment message include the recommended MTU (that is, the MTU
	of the next hop) in the 32-bit "unused" field of the Can't Fragment
	message.  (I'll call that field the "Recommended MTU field".)

In response to Can't Fragment messages from old gateways that don't yet 
report the MTU, the sender assumes the MTU to be 576, thus reverting to
the currently-approved behavior.  As the gateways are upgraded to include
the MTU in the Can't Fragment messages, and hosts are upgraded to take
advantage of it, optimal MTUs will be used and fragmentation will be avoided.

One nice thing about this scheme is that any host can start using it
today, without waiting for any gateway or receiver to be upgraded, and
still obtain some benefit -- if the path-MTU to any particular destination
is at least as big as MIN(first-hop-MTU, MSS), the host will take advantage
of it; otherwise it will back off to 576.  That's better than the current
situation, in which 576 is used for *all* off-subnet (or off-network)
destinations.  For instance, if Ethernet hosts started sending 1500 byte
packets with DF bit set, those packets could make it across most NSFnet
paths without incurring fragmentation *or* incurring any Can't Fragment
messages.

Steve

From craig@NNSC.NSF.NET  Mon Feb 26 04:43:51 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA28744; Mon, 26 Feb 90 04:43:51 PST
Received: by decwrl.dec.com; id AA03097; Mon, 26 Feb 90 04:43:46 -0800
Message-Id: <9002261243.AA03097@decwrl.dec.com>
To: deering@pescadero.stanford.edu
Cc: mtudwg
Subject: routing protocols will provide path-MTU
Date: Mon, 26 Feb 90 07:42:59 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


> This keeps popping up.  Would someone please explain this in more
> detail?  Exactly how are the routing protocols going to maintain or
> acquire the path-MTU information that hosts need, and how are the hosts
> going to learn that information and detect changes in that information?
> I can imagine several possible schemes, including giving up dynamic,
> datagram routing in favor of static, virtual-circuit routing (which
> seems to be where politics-based routing is headed), but I'd really
> like to get some facts before I start flaming. :-)

Steve:

    I don't know for sure, but my limited understanding was that with
full topology information (ala ARPANET SPF), a router could figure out
the safe MTU between two points, and could notify a host if too large
a datagram came past.

    HOWEVER, the advent of hiding area information (IS-IS and OSPF) may
mean that it is no longer possible to a router to derive the optimal MTU
for a path.  (Mind you, the area could advertise the lowest MTU of any
through path within it, but that clearly leads to very non-optimal
situations).

    <Now, Noel can tell me I'm all wet>

Craig

From mogul  Mon Feb 26 13:26:10 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02366; Mon, 26 Feb 90 13:26:10 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002262126.AA02366@acetes.pa.dec.com>
Date: 26 Feb 1990 1326-PST (Monday)
To: Steve Deering <deering@pescadero.stanford.edu>
Cc: mtudwg
Subject: Re: yet another MTU discovery scheme
In-Reply-To: Steve Deering <deering@pescadero.stanford.edu> / 
		24 Feb 1990 20:51-PST.
             <90/02/24 2051.678@pescadero.stanford.edu>

Steve's new alternate proposal (let's call it "using DF", since
at the IETF meeting we determined that the only other use anyone
knows for DF is Van's MTU-tracer) has one big advantage: since
it purports to guarantee no fragmentation, it should solve the
problem of the bogus PC implementations that cannot reassemble.

Actually, Steve's scheme could allow fragmentation if there are
sub-576 MTU hops, but this is already the case so it doesn't
break anything in a new way.

The other advantage I see is that it should be possible to make
FDDI-to-Ether bridges fit in, if they end up doing IP fragmentation
(which I sincerely hope they don't).  Since one would assume that
they obey the DF bit, in the worst case they would cause an MTU of 576;
if they sent new-style ICMP Can't Fragment messages, they would get
the Path-MTU set right.

    Possible problem: gateways that do not send ICMP Can't Fragment messages
    when they should.  Are there any such gateways?

Since Van already used the DF/Can't Fragment mechanism to trace MTUs,
he should be able to answer this pretty easily (we just need to enumerate
the several dozen or so gateway implementations, and try each one).

What would be more interesting is to get a picture of how many paths
would suffer from the "non-local double-shrink" problem: i.e., you
would find the MTU shrinking at more than one gateway not in your
local campus.  I could imagine this happening if certain backboney links
are built out of SLIP/PPP or ARPANet technology.  This could mean
wasting several RTTs while the correct MTU is being discovered.

-Jeff

From mogul  Mon Feb 26 12:53:34 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02280; Mon, 26 Feb 90 12:53:34 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002262053.AA02280@acetes.pa.dec.com>
Date: 26 Feb 1990 1253-PST (Monday)
To: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Cc: MTU Discovery <mtudwg>
Subject: Re: How to use an IP-header bit for Path MTU discovery.
In-Reply-To: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr> / 
		Sun, 25 Feb 90 14:03:50 -0100.
             <9002251303.AA15531@gipsi.Gipsi.Fr>

	Would be it be so bad to require intra-subnet fragmentation/reassembly
	on tiny-gram subnets?  It could be done either at level 2 or 3...

This would have been the right thing to do a decade ago.  It is still
the right thing to recommend ... but
	(1) It's too late to change most of the tinygram data links,
	they're already "mature" techology and there probably will
	be few new ones devised

	(2) Changing the rules for these data links (essentially, changing
	the specs for how IPs are encapsulated) would be a major
	political undertaking.  I encourage you to form your own working
	group; it's outside the charter of this one.

-Jeff

From mogul  Mon Feb 26 13:12:13 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02328; Mon, 26 Feb 90 13:12:13 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002262112.AA02328@acetes.pa.dec.com>
Date: 26 Feb 1990 1312-PST (Monday)
To: Steve Deering <deering@pescadero.stanford.edu>
Cc: mtudwg
Subject: Re: Minutes of MTU Discovery Working Group Meeting (7 Feb 1990)
In-Reply-To: Steve Deering <deering@pescadero.stanford.edu> / 
		24 Feb 1990 17:30-PST.
             <90/02/24 1730.488@pescadero.stanford.edu>

    >	...there are 3 unused in the TOS field...
    
    Looking at the IP spec, I see only two unused bits (6 and 7).  Where is
    the third?

That's what I get for not checking the spec myself when I wrote up the notes.
    
    >	Within "a few" years, the routing protocols will provide
    >	path-MTU information, so MTU discovery will be unnecessary.
    
    This keeps popping up.  Would someone please explain this in more
    detail?  Exactly how are the routing protocols going to maintain or
    acquire the path-MTU information that hosts need, and how are the hosts
    going to learn that information and detect changes in that information?

Link-state routing protocols could carry the MTU as part of the link
state.  Thus, the routers could calculate the Path-MTU from their
link-state database.  Perhaps they could even make Max-MTU a separate
type-of-service (i.e., do you want minimal hop count or maximum MTU?)

As Craig points out, with multi-level routing protocols and information
hiding, it might be impossible to calculate the Path-MTU end-to-end.
I suppose this same sort of problem must afflict other type-of-service
routing (e.g., how does the system deal with "I want a secure route
end-to-end"?) and so presumably it could be solved in a similar manner.
Or maybe not, I'm trying to stay ignorant of routing protocols until
the fur stops flying.

How do the hosts use this info?  Clearly not by keeping the link-state
database; presumably, one could ask a default gateway (i.e., one on
the same LAN) for the MTU to the destination host (e.g., define an
"ICMP What's My Line?" message that returns the end-to-end link
state information for a destination).

    I believe that under 4.3BSD and derivatives (e.g., recent versions of
    SunOS and Ultrix), the RF bit does not survive fragmentation.  That is,
    if a datagram must be fragmented, the initial fragment ends up with a
    zero RF bit, regardless of that bit's value in the original datagram.

Hmm.  My reading of the code suggests that the RF bit is properly copied,
and I think Van and Mike Karels agreed.  Can you show which lines are
to blame?  In ip_output.c, I see the line
		mhip->ip_off = ((off - hlen) >> 3) + (ip->ip_off & ~IP_MF);
which looks like it copies the bits except for MF (which is then filled
in on the following lines).

-Jeff

From deering@Pescadero.Stanford.EDU  Mon Feb 26 14:44:37 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02703; Mon, 26 Feb 90 14:44:37 PST
Received: by decwrl.dec.com; id AA16477; Mon, 26 Feb 90 14:44:32 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA21659; Mon, 26 Feb 90 14:44:26 PDT
Date: 26 Feb 1990 14:27-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: Minutes of MTU Discovery Working Group Meeting (7 Feb 1990)
To: mogul (Jeffrey Mogul)
Cc: mtudwg
Message-Id: <90/02/26 1427.910@pescadero.stanford.edu>
In-Reply-To: mogul's message of 26 Feb 1990 1312-PST (Monday)

Jeff,

Oops!  You're right about 4.3BSD.  It does appear to do the right thing.

(However, I believe the line of code that you quoted only applies to
non-initial fragments.  The code that updates the initial fragment,
which is the one of concern for MTU discovery, appears later as follows:

	ip->ip_off = htons((u_short)(ip->ip_off | IP_MF));

My mistake was to assume that ip->ip_off on the RHS contained only the
offset value, rather than the offset and the high-order bits.)

Steve

From philipp@Gipsi.Gipsi.Fr  Mon Feb 26 15:44:47 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA02900; Mon, 26 Feb 90 15:44:47 PST
Received: by decwrl.dec.com; id AA23457; Mon, 26 Feb 90 15:44:40 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA08522; Tue, 27 Feb 90 00:44:03 +0100 (MET)
Received: by Gipsi.Gipsi.Fr (4.12/4.8)
	id AA20321; Tue, 27 Feb 90 00:45:01 -0100 (MET)
Date: Tue, 27 Feb 90 00:45:01 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9002262345.AA20321@Gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: mogul
Subject: Re: How to use an IP-header bit for Path MTU discovery.
Cc: MTU Discovery <mtudwg>

Well, for X.25 (to pick an example, not necessarily my favourite)
one can provide an IP mtu equal to the maximum packet size or
one can use the M-bit to fragment an IP datagram transparently.
For raw HDLC, one doesn't have acknowledgement or sequencing (at
LLC1), so would have to be layered on top.  Of course, with raw
HDLC, one can usually set the MTU arbitrarily large (since this
is typically over private point-to-point lines) so this isn't a
problem...  At least until Frame Relay happens.  Unless you are
referring to LAN technologies (which I feel offer a 'decent' size
of MTU).

-Philip

From deering@Pescadero.Stanford.EDU  Mon Feb 26 22:23:42 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA03923; Mon, 26 Feb 90 22:23:42 PST
Received: by decwrl.dec.com; id AA13562; Mon, 26 Feb 90 22:23:39 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA23258; Mon, 26 Feb 90 22:23:33 PDT
Date: 26 Feb 1990 21:45-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: routing protocols will provide path-MTU
To: mtudwg
Message-Id: <90/02/26 2145.206@pescadero.stanford.edu>
In-Reply-To: Craig Partridge's message of Mon, 26 Feb 90 074259 -0500

Craig and Jeff both mentioned one of the possible ways in which routing
protocols might provide path-MTU information to hosts, by disseminating
MTU info as part of their routing updates.  (They mentioned link-state
algorithms.  I believe cisco's IGRP also supports this.)  However, as
they observed, this doesn't work with information-hiding, subnetting,
default routes, etc.  Basically, it doesn't scale -- it is unreasonable
to expect your neighboring gateway to know the path-MTU to every possible
Internet destination (and for every TOS).

Another possible approach would be one in which a host asks a first-hop
gateway for the path-MTU to a given destination, and the gateway then
goes out and probes the path, all the way to the last-hop router, and
returns an answer to the host.  I don't see that this offers any
advantages over the schemes we have been discussing; it has the
drawback of forcing a full RTT (from source host to last-hop-router)
delay before sending data, unlike the RF-bit scheme (no delay) or the
DF-bit scheme (no delay if no MTU shrink point, one RTT delay to the
shrink point if there is only one, multiple increasing RTTs if multiple
shrink points).

A third possibility is that the "coming revolution in routing protocols"
will impose the need for all connections/session/associations/whatever
to start with a route setup phase (e.g., passing authenticators,
setting up policy paths, etc.), and the MTU will be provided as part of
the route setup.

What I was trying to find out was, when it was said at the IETF meeting
that, "Within 'a few' years, the routing protocols will provide path-MTU
information, so MTU discovery will be unnecessary.", what did the
speaker(s) have in mind?  And why should we believe them?

Steve

From deering@Pescadero.Stanford.EDU  Mon Feb 26 23:14:51 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA04044; Mon, 26 Feb 90 23:14:51 PST
Received: by decwrl.dec.com; id AA19072; Mon, 26 Feb 90 23:14:48 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA23469; Mon, 26 Feb 90 23:14:45 PDT
Date: 26 Feb 1990 22:24-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: yet another MTU discovery scheme
To: mogul (Jeffrey Mogul)
Cc: mtudwg
Message-Id: <90/02/26 2224.151@pescadero.stanford.edu>
In-Reply-To: mogul's message of 26 Feb 1990 1326-PST (Monday)

>	Actually, Steve's scheme could allow fragmentation if there are
>	sub-576 MTU hops, but this is already the case so it doesn't
>	break anything in a new way.

Right.  In case it wasn't clear from my description, I should point
out that this does get fixed when the gateway to the sub-576 hop is
upgraded to include the MTU in its Can't Fragment messages.

>	The other advantage I see is that it should be possible to make
>	FDDI-to-Ether bridges fit in, if they end up doing IP fragmentation
>	(which I sincerely hope they don't).

The RF-bit scheme will also work with fragmenting "bridges", assuming they
carry the RF-bit through into the fragments.

>	What would be more interesting is to get a picture of how many paths
>	would suffer from the "non-local double-shrink" problem...

Agreed.  The DF scheme as I described it allows the MTU of a single-shrink
path to be discovered in less than the RTT to the destination, and the MTU
of a multi-shrink path to be discovered in *possibly* (but not necessarily
-- it depends on where the shrink points are) greater than the RTT to the
destination.  If there are many more single-shrink paths than multi-shrink
paths, this will yield lower *average* discovery delay than, say, a scheme
based on probing all the way to the destination (or last-hop-router).

How about this issue of ID wraparound?  The odds of incorrect reassembly
due to ID wraparound seem extremely small to me.  I think it requires that
a fragment hang around in the Internet or in a reassembly buffer while
65,535 more packets with the same source, destination, and protocol
pass it by, and that the 65,536th packet be fragmented.  Assuming the
hosts are incurring only occasional fragmentation, as in the RF-bit
scheme, is incorrect reassembly going to happen more often than, say,
the delivery of packets with bit errors that are not detected by the
TCP checksum?

Steve

From jnc@PTT.LCS.MIT.EDU  Tue Feb 27 08:46:53 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA08127; Tue, 27 Feb 90 08:46:53 PST
Received: by decwrl.dec.com; id AA23174; Tue, 27 Feb 90 08:46:41 -0800
Received: by PTT.LCS.MIT.EDU 
	id AA00908; Tue, 27 Feb 90 11:45:56 EST
Date: Tue, 27 Feb 90 11:45:56 EST
From: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Message-Id: <9002271645.AA00908@PTT.LCS.MIT.EDU>
To: deering@pescadero.stanford.edu
Subject: Re: routing protocols will provide path-MTU
Cc: mtudwg

	Steve, here in the future we won't have routing 'tables' (or anything
like what people now think of as 'updates') any more. What will be distributed
are maps of the network, which allows entities to compute routes using
whatever special criteria and algorithms they feel like using. Boxes which do
routing will compute routes on demand, during a flow setup phase (which will
happen in parallel with sending the first packet), and will keep a cache of
recently used source-destination-TOS-etc tuples.
	Moreover, it won't be the case that a host will ask 'what is the MTU
to this destination', it will ask 'can you get to this destination with an
MTU of X'? A route with that MTU (if one exists) will be constructed on demand
(much as trucks with large objects on them may take special routes now).
Alternatively, you could ask 'what is the MTU of the path with the lowest
$ cost', or something similar.
	So, given this view, it is reasonable to suspect that this mechanism
will not have an infinite life, but probably (!!) wiil be superseded after
some years. It is thus reasonable to take the position that it is not
necessary to be absolutely on target (I know this is asking for something to
happen to make a liar out of me :-). If it's not criticial, I'd like to see a
final decision taken about what mechanism to use and get on with writing!
We do seem to be going around in circles a bit...

	Noel

PS: With regard to using a bit (as opposed to an option); there was some talk
at one point of a general 'path attribute discovery' mechanism. I suggested
then that the option have a format which would allow other things to be added
later, but that we stick to MTU for now. Using the bit of course makes this
impossible. (I'm still not convinced the overhead of the option is all that
bad if you only send it every 100 packets or so. :-)

	

From deering@Pescadero.Stanford.EDU  Tue Feb 27 13:00:35 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA08792; Tue, 27 Feb 90 13:00:35 PST
Received: by decwrl.dec.com; id AA22581; Tue, 27 Feb 90 13:00:27 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA26630; Tue, 27 Feb 90 12:59:27 PDT
Date: 27 Feb 1990 12:19-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: routing protocols will provide path-MTU
To: jnc@PTT.LCS.MIT.EDU (Noel Chiappa)
Cc: mtudwg
Message-Id: <90/02/27 1219.452@pescadero.stanford.edu>
In-Reply-To: jnc's message of Tue, 27 Feb 90 114556 EST

Thanks, Noel.  Your message confirms my suspicion that different people
are thinking of different things when they say, "Within a few years,
the routing protocols will be providing MTU information."

I think a lot of people have the idea that Craig and Jeff mentioned,
that current-generation routing protocols will be enhanced to slosh
MTU information around, along with the other metrics that they
currently exchange.  I wanted to kill that notion, because of its
scaling problems.

Then there is the grand vision that you outlined.  I'd put that in the
same category as, "In a few years, everything will be carried in ATM
cells which will provide internal fragmentation and reassembly of IP
packets; therefore, we won't have to do MTU discovery."  In other words,
it is a long ways off and far from certain.  It should not discourage
us from coming up with a good MTU discovery protocol with a long
projected lifetime.

(That's not to say that we should take a long time doing it!  I do feel
some guilt for bringing up alternate proposals at this late date, but I
don't think I'm taking us "around in circles".  Rather, I believe I am
exploring a part of the solution space that we haven't examined thoroughly
before.  Think of it as "spiralling-in".)

Steve

From mogul  Tue Feb 27 13:20:53 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA08896; Tue, 27 Feb 90 13:20:53 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9002272120.AA08896@acetes.pa.dec.com>
Date: 27 Feb 1990 1320-PST (Tuesday)
To: Steve Deering <deering@pescadero.stanford.edu>
Cc: mtudwg
Subject: Re: routing protocols will provide path-MTU
In-Reply-To: Steve Deering <deering@pescadero.stanford.edu> / 
		26 Feb 1990 21:45-PST.
             <90/02/26 2145.206@pescadero.stanford.edu>

    What I was trying to find out was, when it was said at the IETF meeting
    that, "Within 'a few' years, the routing protocols will provide path-MTU
    information, so MTU discovery will be unnecessary.", what did the
    speaker(s) have in mind?  And why should we believe them?

For the record, I believe that Van said this first (although Van is
welcome to deny it, since I wasn't taking contemporaneous notes).

I also want to point out that I wasn't implying that current routing
protocols would necessarily solve the problem.  I'm not a routing
protocol junkie (look at all the minds that stuff is destroying!)
so I don't know if OSPF and/or IS-IS and/or BGP could be easily
extended to carry MTU information.  In principle, though, I can't
see why any link-state protocol couldn't be changed in this way.

-Jeff



From sytek!rfox@Sun.COM  Sat Mar  3 14:34:30 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA04401; Sat, 3 Mar 90 14:34:30 PST
Received: by decwrl.dec.com; id AA25136; Sat, 3 Mar 90 14:34:27 -0800
Received: from sun.Sun.COM (sun-bb.Corp.Sun.COM) by Sun.COM (4.1/SMI-4.1)
	id AA11534; Sat, 3 Mar 90 14:34:21 PST
Received: from sytek.UUCP by sun.Sun.COM (4.1/SMI-4.1)
	id AA02796; Sat, 3 Mar 90 14:34:18 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA01449; Sat, 3 Mar 90 13:26:45 PST
Date: Sat, 3 Mar 90 13:26:45 PST
From: sytek!rfox@Sun.COM (Rich Fox)
Message-Id: <9003032126.AA01449@sytek.hls.hac.com>
To: mtudwg
Subject: decreases in MTU

Steve,

  In your new scheme how is the descrease/increase of the MTU handled?
It seems that this is a potential problem.


rich

From deering@Pescadero.Stanford.EDU  Sun Mar  4 15:27:29 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA10474; Sun, 4 Mar 90 15:27:29 PST
Received: by decwrl.dec.com; id AA08499; Sun, 4 Mar 90 15:27:25 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA15535; Sun, 4 Mar 90 15:27:14 PDT
Date: 4 Mar 1990 14:54-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: decreases in MTU
To: sytek!rfox@sun.com (Rich Fox)
Cc: mtudwg
Message-Id: <90/03/04 1454.939@pescadero.stanford.edu>
In-Reply-To: sytek!rfox's message of Sat, 3 Mar 90 132645 PST

>	In your new scheme how is the descrease/increase of the MTU handled?
>	It seems that this is a potential problem.

Rich,

A sender detects a decrease of MTU whenever it tries to send a packet
larger than the new MTU with the DF bit set.  Such a packet triggers
a Can't Fragment message that tells the sender what the new MTU is.

Reception of an old-style Can't Fragment message that does not contain
a recommended MTU value causes the receiver to stop setting the DF bit
and to assume an MTU of 576; if the real MTU is less than 576, or if it
subsequently changes to a value less than 576, that will not be discovered
by the sender and fragmentation may occur.

A sender detects an increase of MTU by periodically restarting the
discovery process, i.e., by assuming that the MTU is MIN(first-hop-MTU,MSS)
and setting the DF bit on all packets.

Does that answer your question, or have I misunderstood?

Steve

From philipp@Gipsi.Gipsi.Fr  Mon Mar  5 09:27:48 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16111; Mon, 5 Mar 90 09:27:48 PST
Received: by decwrl.dec.com; id AA05637; Mon, 5 Mar 90 09:27:32 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA18531; Mon, 5 Mar 90 18:23:20 +0100 (MET)
Received: by Gipsi.Gipsi.Fr (4.12/4.8)
	id AA15979; Mon, 5 Mar 90 18:23:31 -0100 (MET)
Date: Mon, 5 Mar 90 18:23:31 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9003051723.AA15979@Gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: deering@pescadero.stanford.edu
Subject: Re: decreases in MTU
Cc: MTU Discovery <mtudwg>

It would (should?) not be hard to mandate that all sub-576 MTU paths
be the first to employ the new type of Can't Fragment message.  Anyway,
there can't be all that many such paths (I hope).  The only one I can
think of would be ARCnet (with a 511-byte MTU) -- and now I feel guilty
for bring IP to it (or rather, bringing ARCnet to the IP community).
Fortunately, it is seldom (if ever) used as a transit network...

-Philip

From deering@Pescadero.Stanford.EDU  Mon Mar  5 11:45:25 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16628; Mon, 5 Mar 90 11:45:25 PST
Received: by decwrl.dec.com; id AA22874; Mon, 5 Mar 90 11:44:36 -0800
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA19585; Mon, 5 Mar 90 11:41:52 PDT
Date: 5 Mar 1990 10:47-PST
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: decreases in MTU
To: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Cc: mtudwg
Message-Id: <90/03/05 1047.575@pescadero.stanford.edu>
In-Reply-To: Philippe Prindeville's message of Mon, 5 Mar 90 182331 -0100

>	It would (should?) not be hard to mandate that all sub-576 MTU paths
>	be the first to employ the new type of Can't Fragment message.

It would be just as easy to mandate that *all* gateways employ the new
type of Can't Fragment message.  However, mandating does not make it so.

>	Anyway, there can't be all that many such paths (I hope).  The only
>	one I can think of would be ARCnet (with a 511-byte MTU)...

Van's new RFC on TCP header compression recommends small MTUs for low
speed (i.e., 19,200 bps and lower) links, to give reasonable interactive
responsiveness.  The DARPA PR (packet radio) net has a sub-576 MTU -- is
it still in use in the Internet?  What's the MTU for IP on AppleTalk?

Steve

From mogul  Mon Mar  5 13:30:22 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16912; Mon, 5 Mar 90 13:30:22 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9003052130.AA16912@acetes.pa.dec.com>
Date:  5 Mar 1990 1330-PST (Monday)
To: mtudwg
Cc: 
Subject: Modifications to Steve Deering's "DF" scheme

I'm becoming more and more attracted to this approach, since
(besides the technical points in its favor) it avoids most of
issues on the "ACTION ITEMS" part of the minutes of the last
meeting.

One point against the "Pure DF" scheme (i.e., the one that
Steve has described) is that because the too-big datagrams are
dropped, they represent "wasted effort" and also result in
anomalously high round-trip times.  This is especially unfortunate
when, during a long-lived connection, the sender chooses to
retry sending a large datagram.  Since it is most likely to still
be too big, it will probably be dropped, and the connection will
stall for a while.

I propose to fix this by using a "spare" IP Header bit (if the Proteon
gateways don't drop packets with unrecognized TOS bits, that's probably
where to put it.  If they do drop these packets, this proposal is moot
for the time being.)

If this bit is clear, then the DF bit carries its normal meaning.
Current gateways return a Can't Fragment message with a 0 in the
"MTU field"; upgraded gateways return Can't Fragment with the MTU
in that field.

If the bit is set, it changes the meaning of the DF bit from "Don't
Fragment" to "Denote Fragment" (well, that's the best I can do
without opening my thesaurus).  In this case, the upgraded gateways
DO fragment and forward the packet, but also return an ICMP Destination
Unreachable/Fragment Report message, which looks exactly like Steve's
modified Can't Fragment message except that it carries a different
code.  The purpose of the new code is to allow the sending host to
realize that it does NOT have to retransmit the segment in question
(at least, not until the normal timeout) but it should not send any
further segments bigger than the reported MTU.

Unupgraded gateways would ignore the "Change DF meaning" bit, so
the sending host would receive the Can't Fragment/0-MTU message
and would treat it as it would otherwise.

One of the main benefits of Steve's scheme is that it prevents
fragments from ever reaching a host that cannot reassemble them.
This is not entirely true of the modification that I propose;
however, since the condition cannot persist longer than an RTT
or so, the effect is minimal.  (If the receiver drops the fragments,
the sender will timeout and retransmit, but should already have
learned the proper path MTU).

An advantage of the modified scheme is that if the path involves
more than one drop in the MTU, the sender will still discover the
true MTU within one RTT.  That is because the fragment 0 packet
still carries the DF bit and the Change Meaning bit, and (assuming
that all the fragmenting gateways are upgraded) one ICMP will
be returned from each fragmenting stage.

Since the sending host can tell if the current path supports "Denote
Fragment" (because it received a Fragment Report rather than a
Can't Fragment) it could, in theory, reprobe more often for an
increased MTU ... because the major risk (losing the probing segment)
is eliminated as long as the route doesn't change.

Steve raised the question of ID wrap-around.  I think if the sending
host expects that this might be a problem (presumably, by noticing
that it is about to send an ID that might still exist in the Internet)
then it should turn on DF but NOT turn on the Change Meaning bit.  This
would ensure that subsequent datagrams are not fragmented, and so
there could be no confusion about fragment IDs.

-Jeff

From philipp@Gipsi.Gipsi.Fr  Mon Mar  5 16:02:20 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA17453; Mon, 5 Mar 90 16:02:20 PST
Received: by decwrl.dec.com; id AA23213; Mon, 5 Mar 90 15:54:12 -0800
Received: from [192.33.166.11] by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA10499; Tue, 6 Mar 90 00:51:26 +0100 (MET)
Received: by Gipsi.Gipsi.Fr (4.12/4.8)
	id AA17250; Tue, 6 Mar 90 00:52:38 -0100 (MET)
Date: Tue, 6 Mar 90 00:52:38 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9003052352.AA17250@Gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: deering@pescadero.stanford.edu
Subject: Re: decreases in MTU
Cc: MTU Discovery <mtudwg>

	It would be just as easy to mandate that *all* gateways employ the new
	type of Can't Fragment message.  However, mandating does not make it so.

Sorry, instead of "easy" I should have said "realistic".

	Van's new RFC on TCP header compression recommends small MTUs for low
	speed (i.e., 19,200 bps and lower) links, to give reasonable interactive
	responsiveness.  The DARPA PR (packet radio) net has a sub-576 MTU -- is
	it still in use in the Internet?  What's the MTU for IP on AppleTalk?

I don't mean to sound snotty -- but are these "real" (or substantial)
networks?  I don't consider ARCnet substantive, for example: it is
suitable for running netware on your PC (again, neither of which is
substantive).  Yes, IP is powerful because it runs on anything save
two tin cans and a piece of string.  But if all you have is two
tin cans and a piece of string, maybe there is a more appropriate
protocol.  What I'm trying to say, and perhaps not succeeding, is
that one has to draw the line somewhere or everything becomes dragged
down to the lowest common denominator and lost in endless compromise.

For Van's needs, for example, 19.2k is obviously inadequate (it is
for me as well) -- he is just wasting time trying to make the lack
of a vital resource a little more bearable.  The solution is
obvious, though:  more bandwidth.

-Philip

P.S.	I just know I'm going to be flamed.  Sigh.

From craig@NNSC.NSF.NET  Tue Mar  6 04:36:49 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA20625; Tue, 6 Mar 90 04:36:49 PST
Received: by decwrl.dec.com; id AA13511; Tue, 6 Mar 90 04:36:42 -0800
Message-Id: <9003061236.AA13511@decwrl.dec.com>
To: philipp@gipsi.gipsi.fr
Cc: mtudwg
Subject: re: decreases in MTU
Date: Tue, 06 Mar 90 07:35:26 -0500
From: Craig Partridge <craig@NNSC.NSF.NET>


Philip:

    Arguing that certain types of networks don't matter is absolutely
anti-thetical to the goals of TCP/IP.  The goal is to make IP run
on anything.

    Furthermore, I think the statement that Van's work is misguided is
unreasonable.  Consider that if I came to you and explained how you
could get five times more gas mileage out of your car, if you made
a small tweak to the engine, would you immediately tell me that the
tweak was a waste of tiem and that you would be happy to buy five times
more gas?

Craig

From philipp@Gipsi.Gipsi.Fr  Tue Mar  6 08:50:48 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA23495; Tue, 6 Mar 90 08:50:48 PST
Received: by decwrl.dec.com; id AA14715; Tue, 6 Mar 90 08:50:42 -0800
Received: from Gipsi.Gipsi.FR by inria.inria.fr (5.61+/89.0.8) via Fnet-EUnet id AA19838; Tue, 6 Mar 90 17:49:57 +0100 (MET)
Received: by Gipsi.Gipsi.Fr (4.12/4.8)
	id AA20446; Tue, 6 Mar 90 17:51:16 -0100 (MET)
Date: Tue, 6 Mar 90 17:51:16 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9003061651.AA20446@Gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: craig@NNSC.NSF.NET
Subject: re: decreases in MTU
Cc: mtudwg

First, it isn't a factor of five, and second, it would only be
when driving short distances (less than a mile) at under 20
miles/hour.  Personally, I have a stack of Dukakis-budget-savers
(ie. $150 MA speeding tickets) that prove that this wouldn't
be of any use to me...

-Philip


From fab@saturn.ACC.COM  Tue Mar  6 10:33:54 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA23922; Tue, 6 Mar 90 10:33:54 PST
Received: by decwrl.dec.com; id AA27326; Tue, 6 Mar 90 10:33:45 -0800
Received: from SATURN.ACC.COM by salt.acc.com (5.61/1.34)
	id AA29808; Tue, 6 Mar 90 10:34:39 -0800
Received: by saturn.acc.com (5.51/1.28)
	id AA15334; Tue, 6 Mar 90 13:31:45 EST
Date: Tue, 6 Mar 90 13:31:45 EST
From: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc)
Message-Id: <9003061831.AA15334@saturn.acc.com>
To: mtudwg
Subject: Mods to Steve Deering's "DF" scheme


Jeff writes:
>From: mogul@decwrl.dec.com (Jeffrey Mogul)
>Message-Id: <9003052130.AA16912@acetes.pa.dec.com>
>Date:  5 Mar 1990 1330-PST (Monday)
>Subject: Modifications to Steve Deering's "DF" scheme
>
>I propose to fix this by using a "spare" IP Header bit (if the Proteon
>gateways don't drop packets with unrecognized TOS bits, that's probably
					       ---
Why not use the "RF" bit we were discussing in the FLAGS field?
Right next to the "DF" bit.  That is the bit we were going to use
before.  Besides, it applies to fragmentation, so let's keep it
with the other fragmentation bits.

Fred

------------------------------------------------------------------------
Fred Bohle			EMAIL: fab@saturn.acc.com
ACC				AT&T : 301-290-8100 
10220 Old Columbia Road
Columbia, MD 21046
------------------------------------------------------------------------


From mogul  Tue Mar  6 10:38:57 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA23944; Tue, 6 Mar 90 10:38:57 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9003061838.AA23944@acetes.pa.dec.com>
Date:  6 Mar 1990 1038-PST (Tuesday)
To: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc)
Cc: mtudwg
Subject: Re: Mods to Steve Deering's "DF" scheme
In-Reply-To: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc) / 
		Tue, 6 Mar 90 13:31:45 EST.
             <9003061831.AA15334@saturn.acc.com>

Fred writes:
    Jeff writes:
    >From: mogul@decwrl.dec.com (Jeffrey Mogul)
    >Message-Id: <9003052130.AA16912@acetes.pa.dec.com>
    >Date:  5 Mar 1990 1330-PST (Monday)
    >Subject: Modifications to Steve Deering's "DF" scheme
    >
    >I propose to fix this by using a "spare" IP Header bit (if the Proteon
    >gateways don't drop packets with unrecognized TOS bits, that's probably
						   ---
    Why not use the "RF" bit we were discussing in the FLAGS field?
    Right next to the "DF" bit.  That is the bit we were going to use
    before.  Besides, it applies to fragmentation, so let's keep it
    with the other fragmentation bits.

Because Proteon gateways are KNOWN to drop packets with that bit set.
A bug, but not one we want to tickle.  If they don't drop packets with
extra TOS bits set, that might be a safer approach.

Of course, we could also go ahead and use the bit in the FLAGS field,
and put Proteon on notice that their customers are going to be out
for blood.  But I'd rather let Proteon volunteer to accept this
solution than to cram it down their throat.

-Jeff

From jmoy@proteon.com  Tue Mar  6 12:32:38 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA24346; Tue, 6 Mar 90 12:32:38 PST
Received: by decwrl.dec.com; id AA12164; Tue, 6 Mar 90 12:32:13 -0800
Received: by monk.proteon.com (5.54/1.6)
	id AA00217; Tue, 6 Mar 90 15:37:10 EST
Date: Tue, 6 Mar 90 15:37:10 EST
From: jmoy@proteon.com (John Moy)
Message-Id: <9003062037.AA00217@monk.proteon.com>
To: mogul
Cc: fab%saturn.ACC.COM@salt.acc.com, mtudwg
In-Reply-To: Jeffrey Mogul's message of 6 Mar 1990 1038-PST (Tuesday) <9003061838.AA23944@acetes.pa.dec.com>
Subject: Mods to Steve Deering's "DF" scheme

Jeff-

Go ahead and use the extra bit in the flags field. We're fixing this
as I write (although you might want to check with the other vendors -
my (old) IP specification still says that this bit MUST be 0), and by
the time you guys start deploying MTU discovery people should have the
updated Proteon software installed.

John

From sytek!rfox@Sun.COM  Wed Mar  7 13:28:18 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA03206; Wed, 7 Mar 90 13:28:18 PST
Received: by decwrl.dec.com; id AA11248; Wed, 7 Mar 90 13:28:09 -0800
Received: from sun.Sun.COM (sun-bb.Corp.Sun.COM) by Sun.COM (4.1/SMI-4.1)
	id AA11146; Wed, 7 Mar 90 13:27:50 PST
Received: from sytek.UUCP by sun.Sun.COM (4.1/SMI-4.1)
	id AA28527; Wed, 7 Mar 90 13:26:35 PST
Received: by sytek.hls.hac.com (5.51/5.17)
	id AA15972; Wed, 7 Mar 90 11:31:44 PST
Date: Wed, 7 Mar 90 11:31:44 PST
From: sytek!rfox@Sun.COM (Rich Fox)
Message-Id: <9003071931.AA15972@sytek.hls.hac.com>
To: mtudwg
Subject: Mods to DF scheme


If we use the DF bit I think we should try and solve the complete problem
without allocating another bit. Before we asked the IAB for a bit because
we said this is the only way to solve the problem. Well in essence we have
that bit, so lets not go asking for another bit. 


rich

From mogul  Thu Mar  8 10:49:35 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA11024; Thu, 8 Mar 90 10:49:35 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9003081849.AA11024@acetes.pa.dec.com>
Date:  8 Mar 1990 1049-PST (Thursday)
To: jmoy@proteon.com (John Moy)
Cc: mtudwg
Subject: Re: Mods to Steve Deering's "DF" scheme
In-Reply-To: jmoy@proteon.com (John Moy) / Tue, 6 Mar 90 15:37:10 EST.
             <9003062037.AA00217@monk.proteon.com>

    Go ahead and use the extra bit in the flags field. We're fixing this
    as I write (although you might want to check with the other vendors -
    my (old) IP specification still says that this bit MUST be 0), and by
    the time you guys start deploying MTU discovery people should have the
    updated Proteon software installed.
    
Well, although the IP spec says "MUST be 0", it also says elsewhere
that "an implementation ... must be liberal in its receiving behavior.
... [it] must accept any datagram that it can interpret (e.g., not
object to technical errors where the meaning is still clear)."

However, I think you're right that it would be a good idea to check
to make sure that there aren't other routers which drop such packets.
To that end, I did a little experiment: I changed the code in ip_output.c
in my Ultrix kernel (but this should be applicable to anything even
vaguely derived from 4.2BSD):

    ***************
    *** 79,80
    
      struct mbuf *ip_insertoptions();
    
    --- 79,84 -----
    
    + #ifdef        RFTEST
    + int rftest = 0;               /* if set, then set the "RF bit" in originated p
    kts */
    + #endif        RFTEST
    +
      struct mbuf *ip_insertoptions();
    ***************
    *** 108,109
		    ip->ip_off &= IP_DF;
		    ip->ip_id = htons(ip_id++);
    
    --- 112,117 -----
		    ip->ip_off &= IP_DF;
    + #ifdef        RFTEST
    +               if (rftest)
    +                   ip->ip_off |= 0x8000;       /* set the "RF bit" */
    + #endif        RFTEST
		    ip->ip_id = htons(ip_id++);

Your line numbers will vary, of course.

Anyway, now I can control the "send RF" behavior by using adb
(or an equivalent) to set/clear the "rftest" global flag.  I
find that one of the BARRNET routers fairly close to me drops
these packets; I'm trying to find out what kind of router it
is.

Since I can't get very far with these packets, I encourage
other people to put together a modified kernel and run
a few traceroutes ... if we find non-Proteon routers that drop
these packets, we should let people know ASAP.

-Jeff

From mogul  Fri Mar 30 11:42:10 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA05381; Fri, 30 Mar 90 11:42:10 PST
Date: Fri, 30 Mar 90 11:42:10 PST
From: mogul (Jeffrey Mogul)
Message-Id: <9003301942.AA05381@acetes.pa.dec.com>
To: mtudwg
Subject: What is going on

Since I've been asked "is the mailing list broken" I thought I should
make some noise.

No, it's not broken (as far as I know), there just hasn't been any
traffic.

We plan to meet again at the IETF meeting in Pittsburgh; currently,
MTU Discovery (and Router Discovery, in another shared session) are
scheduled for the afternoon of Wednesday, May 2.

Steve Deering is still working on (or perhaps thinking about working
on) a draft RFC for how the DF mechanism would be used.  I'm thinking
about working on how it might be implemented in a 4.xBSD system
(although it would be nice to have Steve's draft spec before I commit
to any coding).

I've also done some experiments which appear to show that NSFnet
routers drop packets with the proposed "RF" bit set.  That would
be fairly important to fix if we plan on using that bit!

-Jeff

From mogul  Mon Apr  9 19:17:38 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA04266; Mon, 9 Apr 90 19:17:38 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9004100217.AA04266@acetes.pa.dec.com>
Date:  9 Apr 1990 1817-PST (Monday)
To: mtudwg
Cc: 
Subject: What's your favorite MTU?

After spending a week or so at it, I'm nearly done with a trial
implementation of Steve Deering's DF-based scheme.  Recall that
he expects an "upgraded" router to send ICMP Dest. Unreachable/
Fragmentation needed and DF set (or DU/FNDS) messages with the
currently "unused" field set to the maximum MTU it can forward
on the given path.  Meanwhile, if the router sending the DU/FNDS
is NOT upgraded, it sends 0 in this field, so the sending host
(i.e., the host receiving the ICMP) can at least know to crank
down its path MTU estimate.

Once I figured out that 4.xBSD-based routers all slightly mangle
the Length field in the "Internet header of Original Datagram",
I decided to base my estimate on the (conservatively corrected)
value of this field.  Clearly, though, the estimate has to be
lower than the old IP Length, since that length was too long.

My first approach was to simply cut the length by 25% on each
trial; this, however, didn't seem to scale well.  Suppose one
has end-hosts on FDDI (MTU = 4478) networks and there is a SLIP
link (MTU = 296) in between.  296/4478 = .066, and you have to
raise .75 to the 10th power before the result is < .066.  So,
it would take 10 round-trip times before the sender got an
estimated Path MTU low enough that segments would start making
it to the far end.

If I make the decrement more than 25%, then convergence is faster
but it is likely to be even further from optimal when it does
converge.  So I was a little disappointed.

A little research in the RFC archives, however, suggests that
there are actually very few reasonable values for Path MTUs.
I count about 9, although I could be missing some.  I went
through all the RFCs listed in RFC1130 as describing IP encapsulations,
made a chart of the MTUs specified, and arranged them in declining
order.  Then I grouped similar values together, and picked a set
of plateaus corresponding to the least element in each group.
In most cases, the choice of groups is quite clear; I'm a little
concerned about the plateaus I picked at smaller MTU sizes, but
none of my values is more than 17% from optimal for its group.

The new algorithm is to step down through the plateaus until
you hit one which is lower than your previous attempted IP Length.
In the FDDI-SLIP-FDDI scenario, this converges in 5 RTTs, not 10.
FDDI-Ethernet-FDDI converges in two steps, to within 3% of optimal.

The table at the end of this message shows my results (the figures
in parentheses show how far from optimal the worst-case member of
each group lies).

I would appreciate it if people could correct any mistakes in this
table, and tell me about data links (such as Amateur Packet Radio)
that I've left out.  Also, if I've included any data links that
are completely obsolete, please let me know!

-Jeff

PMTU-plateau	MTU	Protocol   Comments			Specification
		
		65535	IP	   Official Maximum MTU		RFC 791
		65535	IP-HC      Hyperchannnel		RFC 1044
65535
		 8166	IP-IEEE    IEEE 802.4			RFC 1042
8166
		 4478	IP-FDDI    FDDI				RFC 1103
4478
		 2048?	IP-WB      Wideband Network		RFC 907
		 2002	IP-IEEE    IEEE 802.5			RFC 1042
2002 (2%)
		 1536	IP-EE      Exp. Ethernet Nets		RFC 895
		 1500	IP-E       Ethernet Networks		RFC 894
		 1492	IP-IEEE    IEEE 802.3			RFC 1042
1492 (3%)
		 1006	IP-SLIP    Serial Lines			RFC 1055
		 1006	IP-ARPA    ARPANET			BBN 1822
1006
		  576	IP-X25     X.25 Networks		RFC 877
		  544	Portal	   DEC IP Portal		--------
		  512	IP-NETBIOS NETBIOS			RFC 1088
		  508	IP-IEEE    IEEE 802/Source-Rt Bridge	RFC 1042
		  508	IP-ARC     ARCNET/extended		RFC 1051
508 (13%)
		  296	IP-SLIP    Serial Lines (Van Jacobson)	RFC 1055
		  253	IP-ARC     ARCNET			RFC 1051
252 (17%)

68			IP	   Official minimum MTU		RFC 791

	    Don't Know	IP-DC      DC Networks			RFC 891


From mogul  Wed Apr 11 15:59:28 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA14034; Wed, 11 Apr 90 15:59:28 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9004112259.AA14034@acetes.pa.dec.com>
Date: 11 Apr 1990 1459-PST (Wednesday)
To: mtudwg
Cc: 
Subject: Prototype implementation done

Well, the first version, at any rate ... and so far, only the host
part (I'll tackle the router support later).

I've made a diff listing of the changes I made to the 4.3BSD kernel.
With a lot of annotations, this comes to 14 pages (and about 23Kbytes);
the actual changes to the kernel are not nearly so large, of course.

Most people would rather not have this land in their mailboxes,
I suspect.  You can use anonymous FTP to gatekeeper.dec.com,
and retrieve "pub/mtudwg/changes_to_4.3BSD".  If you can't do that,
I'll mail it to you on request (but I'd rather you used FTP).

I will probably mail it (unrequested) to a few likely victims.

-Jeff

From art@opal.acc.com  Fri Apr 13 00:24:22 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA03300; Fri, 13 Apr 90 00:24:22 PDT
Received: by decwrl.dec.com; id AA11809; Tue, 10 Apr 90 09:58:11 -0700
Received: by opal.acc.com (4.0/SMI-4.0)
	id AA27286; Tue, 10 Apr 90 09:58:06 PDT
Date: Tue, 10 Apr 90 09:58:06 PDT
From: art@opal.acc.com (Art Berggreen)
Message-Id: <9004101658.AA27286@opal.acc.com>
To: mogul, mtudwg
Subject: Re:  What's your favorite MTU?

>A little research in the RFC archives, however, suggests that
>there are actually very few reasonable values for Path MTUs.
>I count about 9, although I could be missing some.  I went
>through all the RFCs listed in RFC1130 as describing IP encapsulations,
>made a chart of the MTUs specified, and arranged them in declining
>order.  Then I grouped similar values together, and picked a set
>of plateaus corresponding to the least element in each group.
>In most cases, the choice of groups is quite clear; I'm a little
>concerned about the plateaus I picked at smaller MTU sizes, but
>none of my values is more than 17% from optimal for its group.
>
>The new algorithm is to step down through the plateaus until
>you hit one which is lower than your previous attempted IP Length.
>In the FDDI-SLIP-FDDI scenario, this converges in 5 RTTs, not 10.
>FDDI-Ethernet-FDDI converges in two steps, to within 3% of optimal.

I'm a bit concerned about building into a protocol the MTUs that happen
to be used on today's network technologies.

>The table at the end of this message shows my results (the figures
>in parentheses show how far from optimal the worst-case member of
>each group lies).
>
>I would appreciate it if people could correct any mistakes in this
>table, and tell me about data links (such as Amateur Packet Radio)
>that I've left out.  Also, if I've included any data links that
>are completely obsolete, please let me know!
>
>-Jeff
>
>PMTU-plateau	MTU	Protocol   Comments			Specification
>		
>		65535	IP	   Official Maximum MTU		RFC 791
>		65535	IP-HC      Hyperchannnel		RFC 1044
>65535
>		 8166	IP-IEEE    IEEE 802.4			RFC 1042
>8166
>		 4478	IP-FDDI    FDDI				RFC 1103
>4478
>		 2048?	IP-WB      Wideband Network		RFC 907
>		 2002	IP-IEEE    IEEE 802.5			RFC 1042

Don't 16Mbit TRs support much larger MTUs?

>2002 (2%)
>		 1536	IP-EE      Exp. Ethernet Nets		RFC 895
>		 1500	IP-E       Ethernet Networks		RFC 894
>		 1492	IP-IEEE    IEEE 802.3			RFC 1042
>1492 (3%)
>		 1006	IP-SLIP    Serial Lines			RFC 1055
>		 1006	IP-ARPA    ARPANET			BBN 1822
>1006
>		  576	IP-X25     X.25 Networks		RFC 877

There is no inherent MTU limit in X25 (using M-bit sequences).  In fact
if large X.25 packet sizes can be negotiated, there are real advantages
in using a larger MTU.

>		  544	Portal	   DEC IP Portal		--------
>		  512	IP-NETBIOS NETBIOS			RFC 1088
>		  508	IP-IEEE    IEEE 802/Source-Rt Bridge	RFC 1042
>		  508	IP-ARC     ARCNET/extended		RFC 1051
>508 (13%)
>		  296	IP-SLIP    Serial Lines (Van Jacobson)	RFC 1055
>		  253	IP-ARC     ARCNET			RFC 1051
>252 (17%)
>
>68			IP	   Official minimum MTU		RFC 791
>
>	    Don't Know	IP-DC      DC Networks			RFC 891
>
>

Art

From mogul  Fri Apr 13 11:26:48 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA07289; Fri, 13 Apr 90 11:26:48 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9004131826.AA07289@acetes.pa.dec.com>
Date: 13 Apr 1990 1026-PST (Friday)
To: art@opal.acc.com (Art Berggreen)
Cc: mtudwg
Subject: Re:  What's your favorite MTU?
In-Reply-To: art@opal.acc.com (Art Berggreen) / Tue, 10 Apr 90 09:58:06 PDT.
             <9004101658.AA27286@opal.acc.com>

    I'm a bit concerned about building into a protocol the MTUs that happen
    to be used on today's network technologies.

It is VERY important to understand that I am not building this list into
the protocol specification.  I am perhaps building it into the
"implementation suggestion" section of the spec, although I expect that
as a guideline rather than a spec, it will be plastic enough to be
modifiable as times change.

Note that this part of the implementation is meant to support the
use of routers that haven't been upgraded to meet the new requirements
outlined in the spec.  I assume that router implementations made to
handle data-link layers defined in the future will also be upgraded
to meet this spec, so the issue of my little list will be moot in those
cases.

Remember also that the alternative to having a list of likely MTUs
is to have some algorithm (such as "reduce your segment size by 25%")
which, although much simpler and more abstract, has nothing at all
to do with reality.
    
    >PMTU-step	MTU	Protocol   Comments		Specification
    >		 2002	IP-IEEE    IEEE 802.5			RFC 1042
    
    Don't 16Mbit TRs support much larger MTUs?

RFC1042 mentions that 802.5 systems can potentially support these MTUs:
	8188, 4092, 2044, 1020, 508
It isn't clear from the RFC just which of these actually get used.
I have plateaus at or just below all of these values, except for
4092.  Putting one at 4092 would probably cause some problems as
FDDI becomes ubiquitous; either there would be an extra RTT spent
getting from an FDDI MTU to an Ethernet MTU, or I would have to
remove the FDDI plateau (now changed to 4352, in the lastest
draft RFC) and potentially waste 6% of the FDDI MTU.  If you
expect that 802.5 networks with MTU=4092 are going to be common,
then I will have to take that into account.
    
    >		  576	IP-X25     X.25 Networks		RFC 877
    
    There is no inherent MTU limit in X25 (using M-bit sequences).  In fact
    if large X.25 packet sizes can be negotiated, there are real advantages
    in using a larger MTU.
    
That suggests that there should be a few more "arbitrary" plateaus
at higher MTUs (such as 16k, 32k, and perhaps a few in between).  It
would help to know what values are likely; i.e., if I put a plateau
at 16384, but due to header length considerations the actually MTU
used is 16382, then the algorithm will drop the segment size to
around 8K and waste some potential bandwidth.

-Jeff

From @po5.andrew.cmu.edu:ddp+@andrew.cmu.edu  Fri Apr 13 12:13:17 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA07453; Fri, 13 Apr 90 12:13:17 PDT
Received: by decwrl.dec.com; id AA25271; Fri, 13 Apr 90 12:12:55 -0700
Received: by po5.andrew.cmu.edu (5.54/3.15) id <AA05933> for mtudwg@decwrl.dec.com; Fri, 13 Apr 90 15:12:08 EDT
Received: via switchmail; Fri, 13 Apr 90 15:11:47 -0400 (EDT)
Received: from lancaster.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/service/mailqs/q001/QF.ca9WA:m00UoJ40MU9K>;
          Fri, 13 Apr 90 15:05:48 -0400 (EDT)
Received: from lancaster.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/usr15/ddp/.Outgoing/QF.ka9W=6200UoJQ1Q2Zb>;
          Fri, 13 Apr 90 15:04:38 -0400 (EDT)
Received: from Messages.7.14.N.CUILIB.3.45.SNAP.NOT.LINKED.lancaster.andrew.cmu.edu.rt.r3
          via MS.5.6.lancaster.andrew.cmu.edu.rt_r3;
          Fri, 13 Apr 90 15:04:31 -0400 (EDT)
Message-Id: <oa9W_zm00UoJ41Q2NC@andrew.cmu.edu>
Date: Fri, 13 Apr 90 15:04:31 -0400 (EDT)
From: Drew Daniel Perkins <ddp+@andrew.cmu.edu>
To: mtudwg
Subject: Re: What's your favorite MTU?
In-Reply-To: <9004101658.AA27286@opal.acc.com>
References: <9004101658.AA27286@opal.acc.com>

Excerpts from mail: 10-Apr-90 Re: What's your favorite MTU? Art
Berggreen@opal.acc.c (2694)

> I'm a bit concerned about building into a protocol the MTUs that happen
> to be used on today's network technologies.


If this worries you, you should check out the IBM token ring source
routing protocol which does indeed have codes for each MTU.  I think it
could be argued, however, thatJeff's scheme does NOT build the MTUs into
the PROTOCOL, only into a heuristic in the implementation.

Drew

From @po2.andrew.cmu.edu:ddp+@andrew.cmu.edu  Fri Apr 13 13:08:03 1990
Received: from decpa.pa.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA07719; Fri, 13 Apr 90 13:08:03 PDT
Received: by decpa.pa.dec.com; id AA01292; Fri, 13 Apr 90 13:07:54 -0700
Received: by po2.andrew.cmu.edu (5.54/3.15) id <AA00574>; Fri, 13 Apr 90 15:23:21 EDT
Received: via switchmail; Fri, 13 Apr 90 15:23:08 -0400 (EDT)
Received: from lancaster.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/service/mailqs/q000/QF.Ua9WH1O00UoJE0MUBJ>;
          Fri, 13 Apr 90 15:13:08 -0400 (EDT)
Received: from lancaster.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/usr15/ddp/.Outgoing/QF.Ma9WFuW00UoJQ1Q39D>;
          Fri, 13 Apr 90 15:11:54 -0400 (EDT)
Received: from Messages.7.14.N.CUILIB.3.45.SNAP.NOT.LINKED.lancaster.andrew.cmu.edu.rt.r3
          via MS.5.6.lancaster.andrew.cmu.edu.rt_r3;
          Fri, 13 Apr 90 15:11:50 -0400 (EDT)
Message-Id: <Ya9WFqm00UoJE1Q2wL@andrew.cmu.edu>
Date: Fri, 13 Apr 90 15:11:50 -0400 (EDT)
From: Drew Daniel Perkins <ddp+@andrew.cmu.edu>
To: mogul, mtudwg
Subject: Re: What's your favorite MTU?
In-Reply-To: <9004101658.AA27286@opal.acc.com>
References: <9004101658.AA27286@opal.acc.com>

Excerpts from mail: 10-Apr-90 Re: What's your favorite MTU? Art
Berggreen@opal.acc.c (2694)

> Don't 16Mbit TRs support much larger MTUs?

Yes, up to 17914 bytes by my calculation.

Drew

From fab@saturn.ACC.COM  Fri Apr 13 15:16:21 1990
Received: from decpa.pa.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA08176; Fri, 13 Apr 90 15:16:21 PDT
Received: by decpa.pa.dec.com; id AA09940; Fri, 13 Apr 90 15:16:14 -0700
Received: from SATURN.ACC.COM by salt.acc.com (5.61/1.34)
	id AA17408; Fri, 13 Apr 90 15:15:08 -0700
Received: by saturn.acc.com (5.51/1.28)
	id AA02188; Fri, 13 Apr 90 18:15:54 EST
Date: Fri, 13 Apr 90 18:15:54 EST
From: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc)
Message-Id: <9004132315.AA02188@saturn.acc.com>
To: mtudwg
Subject: What's your favorite MTU?


After reviewing your notes I have the following comments:

1. How about a simple binary search to determine the MTU size?
Looking at the list of real MTU sizes, they are very close to
a fit to a simple halving to come up with an MTU size which
will not fragment, e.g.:
	64000 -> 32000 -> 16000 -> 8000 -> 4000 -> 2000 ->1000
	-> 500 -> 250 -> 125 -> 62

This converges in the above sequence in 10 steps for the worst
case, Hyperchannel to an undefined minimum MTU network.  The
starting point would not be 64000 every time, but the number
less than the LOCAL network MTU value.
The values along the way are not too bad except for FDDI and
Ethernet.  This is solved in the following points.

2. One objection to a simple convergence on a value for minimum
MTU was the lack of notification when a larger MTU became
available (due to a gateway coming back on line somewhere).
The discussion on this list has lost track of this line of thinking.
I suggest "probing" for a larger MTU after some amount of time/data
has passed.  In TCP a measure based on round trip times or
some number of windows seems reasonable.  Probably multiples
of those, like maybe 100 RTT's or 10 windows. (Suggestions
anyone?)

3. Probing would continue the binary search, only in an upward direction,
remembering the last value which failed, and the last value which
worked without fragmentation.  Average them to get the size for
the probe packet.  We could do something tricky here
to avoid holding up the data transfer for too long.  Send the
probe packet with "Don't Fragment" set, and if we get an ICMP
Can't Fragment message, retransmit with DF turned off. 

4. Continuing the binary search would converge on Ethernet numbers:
	1000 -> 1500	( which works for IP-E)
	1500 -> 1250	( if IP-IEEE 802.3, until the next probe)

Converging on FDDI takes longer:
	4000 -> 6000	( which fragments)
	6000 -> 5000	( which also fragments)
	5000 -> 4500	( which also fragments)
	4500 -> 4250	( which works until the next probe)

5. Doing all this injects one extra packet every 10 (or whatever)
windows.  With the suggested numbers, each pleteau is visited in short
order.  Some bandwidth is unused until a probe sequence finds it.
With binary searching, a value which does not fragment is found
in typically 3 RTT's, maximum 10 RTT's.

6. When a gateway comes back up,  the probe sequence will discover
some of the unused bandwidth.  To recover it all, we might try
the last number which fragmented again, and resume our binary search
if it still fragments.  If it does not fragment, increase it some
more (suggest percentages here), maybe MTU * 1.25?, MTU * 1.50,
or even MTU * 2?

Well, it has been a long day, and I can't think any more.  Let
me know where we take this idea from here.  I still think we are
on the right track with the DF bit, since it does not need a new
bit in the IP header.  Just having the new format of the ICMP
message seems to do it.

Fred

------------------------------------------------------------------------
Fred Bohle			EMAIL: fab@saturn.acc.com
Interlink Computer Sciences	AT&T : 301-290-8100 
10220 Old Columbia Road
Columbia, MD 21046
------------------------------------------------------------------------


From mogul  Fri Apr 13 16:08:28 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA08345; Fri, 13 Apr 90 16:08:28 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9004132308.AA08345@acetes.pa.dec.com>
Date: 13 Apr 1990 1508-PST (Friday)
To: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc)
Cc: mtudwg
Subject: Re: What's your favorite MTU?
In-Reply-To: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle acc_gnsc) / 
		Fri, 13 Apr 90 18:15:54 EST.
             <9004132315.AA02188@saturn.acc.com>

    1. How about a simple binary search to determine the MTU size?
    Looking at the list of real MTU sizes, they are very close to
    a fit to a simple halving to come up with an MTU size which
    will not fragment, e.g.:
	    64000 -> 32000 -> 16000 -> 8000 -> 4000 -> 2000 ->1000
	    -> 500 -> 250 -> 125 -> 62
    
    This converges in the above sequence in 10 steps for the worst
    case, Hyperchannel to an undefined minimum MTU network.  

The nice thing about binary searches is that they converge quickly
when N is large.  The nasty thing about them is that they converge
poorly when N isn't so large.  I want the common case to converge
quickly, not the weirdest one; FDDI to 802.3 would take a binary
search
	4352 -> 2176 -> 1088 -> 1632 -> 1360
4 steps before you even get close, and because 802.3 has the
unhappy luck to have an MTU just below the next search point,
you need
	1360 -> 1496 -> 1428
before you get within 5% of the right number.  My scheme, on
the other hand, gets the exact answer in 2 steps, and isn't
more than 0.5% wrong if there is an Ethernet instead of an 802.3
network there instead.

I'll grant that you can throw in fixes for FDDI and Ethernet,
but then you are beginning to admit that using knowledge about
the problem domain is better than using a "clean" but knowledge-
free algorithm (I thought the AI people had learned this lesson,
until the boom in neural nets started).  Why not admit that
using a linear search over likely data values converges just as
fast in the worst case, and much faster in the likely cases?

Remember also that at each step in the convergence you are going to
throw some confusion into the TCP slow-start algorithm, an effect
that I don't entirely understand but about which I'd rather
not tempt fate.

    2. One objection to a simple convergence on a value for minimum
    MTU was the lack of notification when a larger MTU became
    available (due to a gateway coming back on line somewhere).
    The discussion on this list has lost track of this line of thinking.

Partly because we are discussing this without the benefit of a draft
RFC to refer to.  (I intend to fix that one way or another within a
week.)  Steve Deering and I have always understood that there could
be some sort of timeout on path MTUs learned this way; our model is
that after (order of) 10 minutes one would simply start from scratch,
i.e. set the Path MTU estimate back to the local interface MTU and
see what happens.  (As it turns out, at least popular routing daemon
for Unix systems trashes routes older than 6 minutes, anyway).

    I suggest "probing" for a larger MTU after some amount of time/data
    has passed.  In TCP a measure based on round trip times or
    some number of windows seems reasonable.  Probably multiples
    of those, like maybe 100 RTT's or 10 windows. (Suggestions
    anyone?)

Trying to do this in terms of multiples of the RTT seems too complicated
to me.  If you do it too often, you can get confused by flapping routes;
if the routes are flapping, you might as well stick to the low side
on MTU estimates since this is approach most likely to make some small
progress.

    3. Probing would continue the binary search, only in an upward direction,
    remembering the last value which failed, and the last value which
    worked without fragmentation.  Average them to get the size for
    the probe packet.  We could do something tricky here
    to avoid holding up the data transfer for too long.  Send the
    probe packet with "Don't Fragment" set, and if we get an ICMP
    Can't Fragment message, retransmit with DF turned off. 

Among other things, this would make the host implementation changes
a LOT more complicated.  I don't think I realized, back when we
were considering Keith McCloughrie's and Rich Fox's draft, just how
much complexity would have to be added to BSD-based TCPs to play this
kind of game.  The DF-based scheme has the advantage that there is
almost nothing "tricky" going on, especially nothing involving timers
(except for purging things after 10 minutes).
    
    Well, it has been a long day, and I can't think any more.  Let
    me know where we take this idea from here.  I still think we are
    on the right track with the DF bit, since it does not need a new
    bit in the IP header.  Just having the new format of the ICMP
    message seems to do it.
    
Here I agree with you, but in part because I see (after having implemented
it) how simple it is.

-Jeff

From @po5.andrew.cmu.edu:ddp+@andrew.cmu.edu  Fri Apr 13 20:47:44 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09010; Fri, 13 Apr 90 20:47:44 PDT
Received: by decwrl.dec.com; id AA27065; Fri, 13 Apr 90 20:47:39 -0700
Received: by po5.andrew.cmu.edu (5.54/3.15) id <AA02638> for mtudwg@decwrl.dec.com; Fri, 13 Apr 90 23:48:08 EDT
Received: via switchmail; Fri, 13 Apr 90 23:48:05 -0400 (EDT)
Received: from lancaster.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/service/mailqs/q004/QF.wa9dnpW00UoJ00MUQ2>;
          Fri, 13 Apr 90 23:46:02 -0400 (EDT)
Received: from lancaster.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/usr15/ddp/.Outgoing/QF.ga9dmXK00UoJM1Q6ZC>;
          Fri, 13 Apr 90 23:44:35 -0400 (EDT)
Received: from Messages.7.14.N.CUILIB.3.45.SNAP.NOT.LINKED.lancaster.andrew.cmu.edu.rt.r3
          via MS.5.6.lancaster.andrew.cmu.edu.rt_r3;
          Fri, 13 Apr 90 23:44:28 -0400 (EDT)
Message-Id: <8a9dmQy00UoJ81Q6NC@andrew.cmu.edu>
Date: Fri, 13 Apr 90 23:44:28 -0400 (EDT)
From: Drew Daniel Perkins <ddp+@andrew.cmu.edu>
To: mtudwg
Subject: Re: What's your favorite MTU?
Cc: postel@isi.edu
In-Reply-To: <9004131826.AA07289@acetes.pa.dec.com>
References: <9004131826.AA07289@acetes.pa.dec.com>

Excerpts from mail: 13-Apr-90 Re: What's your favorite MTU? Jeffrey
Mogul@decwrl.dec (2452)

>     Don't 16Mbit TRs support much larger MTUs?

> RFC1042 mentions that 802.5 systems can potentially support these MTUs:
> 	8188, 4092, 2044, 1020, 508
> It isn't clear from the RFC just which of these actually get used.
> I have plateaus at or just below all of these values, except for
> 4092.  Putting one at 4092 would probably cause some problems as
> FDDI becomes ubiquitous; either there would be an extra RTT spent
> getting from an FDDI MTU to an Ethernet MTU, or I would have to
> remove the FDDI plateau (now changed to 4352, in the lastest
> draft RFC) and potentially waste 6% of the FDDI MTU.  If you
> expect that 802.5 networks with MTU=4092 are going to be common,
> then I will have to take that into account.
>     
RFC 1042 mentions that 802.5 source routing BRIDGES support those
numbers; it does NOT say that 802.5 TOKEN RINGS support those sizes. 
Understanding this requires an understanding of IBM source routing. 
Source routing utilizes an IBM (not IEEE) specified field in the packet
called a Routing Information Field (RIF).  The RIF includes a field
called the Largest Frame (LF) field.  It is used to find the maximum MTU
supported along a source routed path (same thing we're trying to do
actually). I guess they didn't want to use two (or more) full octets, so
they encoded it, originally as a 3-bit field.  That encoding is what is
described in RFC 1042.  I'm not certain of this, I would guess that IBM
chose the values based on the formula 2^(9+x) + 4, giving them LLC data
lengths corresponding to powers of two  (512, 1024, 2048, 4096, and
8192; the LLC header is 4 octets).  However, somebody (probably IEEE)
later decided that the length field should be four bits and should
indicate more useful values, where useful means that they correspond to
other 802 networks.  Below is a table containing all the values.  The
ones marked with * are the original IBM codes which are now "reserved".

LF	802	MAC	Info	IP
Code	Network	Length	Length	MTU
----------------------------------------
0000*		552	516	508
0001		 "	 "	 "
0010*		1064	1028	1020
0011	802.3	1536	1500	1492
0100*		2088	2052	2044
0101		 "	 "	 "
0110*		4136	4100	4092
0111	802.5	4508	4472	4464
1000*		8232	8196	8188
1001	~802.4	8227	8191	8183

Now to make the waters muddier...  The lengths above do NOT correspond
to the MTUs of IBM Token Rings.  Theoretically, the maximum packet size
on a token ring is based on the maximum time a node may hold a token. 
This varies with the number of nodes on the ring and the ring speed. 
Worse yet, various token ring implementations have all supported
different maximum packet lengths.  The original TI implementation will
support an IP MTU of up to 4464 octets, which (I think) corresponds to a
ring with the maximum number of nodes.  However, IBM's original token
ring implementation (the IBM PC Token Ring Card)  will only support an
IP MTU of 2002.  Therefore, in RFC 1042 we suggested that all
implementations support ATLEAST 2002.  You CAN support more (like the
full 4464), and I think some people like cisco actually do.  In the
meantime, IBM has made two more changes.  Their latest 4 Mb token ring
interface seems to support an IP MTU of 4408.  The 16 Mb interface
should support up to 17914 (increasing the data rate increases the MTU
with the same token hold time).

In conclusion, for the purposes of this WG, I would suggest that we use
the values 2002, 4408, and 17914 for the token ring MTUs of interest.

Drew

From mogul  Mon Apr 16 11:59:47 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA22904; Mon, 16 Apr 90 11:59:47 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9004161859.AA22904@acetes.pa.dec.com>
Date: 16 Apr 1990 1059-PST (Monday)
To: mtudwg
Cc: 
Subject: Credit where credit is due

In the process of editing Steve's draft proposal, I went through
the material I used 2 years ago when writing "Fragmentation Considered
Harmful", and found this message:
    
    Return-Path: <tcp-ip-RELAY@SRI-NIC.ARPA>
    Received: from SRI-NIC.ARPA by navajo.stanford.edu with TCP; Sun, 24 May 87 02:42:34 PDT
    Received: from decwrl.dec.com by SRI-NIC.ARPA with TCP; Sun 24 May 87 00:15:43-PDT
    Received: by decwrl.dec.com (5.54.3/4.7.34)
	    id AA16654; Sun, 24 May 87 00:15:45 PDT
    Received: by imagen.uucp (5.51/Imagen-1.1)
	    id AA04028; Sat, 23 May 87 22:20:55 PDT
    Return-Path: <geof>
    Received: by apolling.imagen.uucp (4.12/Imagen-1.1)
	    id AA01407; Sat, 23 May 87 22:17:05 pdt
    Date: Sat, 23 May 87 22:17:05 pdt
    From: imagen!apolling!geof@decwrl.DEC.COM (Geof Cooper)
    Message-Id: <8705240517.AA01407@apolling.imagen.uucp>
    To: tcp-ip@sri-nic.ARPA
    Reply-To: imagen!geof@decwrl.DEC.COM
    Phone: (408) 986-9400 (work)
    Postal-Address: IMAGEN, 2650 San Thomas Expressway, Santa Clara, CA 95052
    Subject: Re: IP Datagram sizes
    
    I like the idea of an IP-level solution to the fragmentation problem
    since it has application to UDP protocols (I know that none that exist
    today could use it, but that's no excuse for ignoring UDP).
    
    Isn't there a destination unreachable message with the reason being
    "can't fragment and had to" (sorry my ICMP spec is at the office)?  If
    not, we could certainly add one.
    
    In that case, the idea is to always send TCP packets with the "don't
    fragment" bit set.  Use the scheme suggested that keeps track of MTU's
    in the routing cache.  Update the cache based on DU's received
    (decrease the MTU a bit and try again) -- time out the entry on a long
    timer to be able to detect new routes.
    
    The obvious improvement is to have the ICMP message also include the
    MTU restriction that is appropriate -- that requires changing ICMP, of
    course, but it would probably be a good idea.

From mogul  Wed Apr 18 17:16:53 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA06029; Wed, 18 Apr 90 17:16:53 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9004190016.AA06029@acetes.pa.dec.com>
Date: 18 Apr 1990 1616-PST (Wednesday)
To: mtudwg
Cc: 
Subject: Draft RFC for the "DF scheme"

Please read this BEFORE the IETF meeting next month.

A PostScript version is available if you really must have one.

-Jeff (with lots of help from Steve Deering)


Internet Engineering Task Force                                 J. Mogul
Internet Draft                                                    DECWRL
Obsoletes: RFC 1063                                           S. Deering
                                                     Stanford University
                                                              April 1990

                  WORKING DRAFT -- Do Not Redistribute

                           Path MTU Discovery


Abstract

   This memo describes a technique for dynamically discovering the
   maximum transmission unit (MTU) of an arbitrary internet path.  It
   specifies a small change to the way routers generate one type of ICMP
   message.  For a path that passes through a router that has not been
   so changed, this technique might not discover the correct Path MTU,
   but it will always choose a Path MTU as accurate as, and in many
   cases more accurate than, the Path MTU that would be chosen by
   current practice.


Status of this memo

   ---to be determined---

   Distribution of this memo is unlimited.


Acknowledgements

   This proposal is a product of the IETF MTU Discovery Working Group.

   The mechanism proposed here was first suggested by Geof Cooper [2],
   who in two short paragraphs set out all the basic ideas that took the
   Working Group months to reinvent.


1. Introduction

   When one IP host has a large amount of data to send to another host,
   the data is transmitted as a series of IP datagrams.  It is usually
   preferable that these datagrams be of the largest size that does not
   require fragmentation anywhere along the path from the source to the
   destination.  (For the case against fragmentation, see [5].)  This
   datagram size is referred to as the Path MTU (PMTU), and it is equal
   to the minimum of the MTUs of each hop in the path.  A shortcoming of
   the current Internet protocol suite is the lack of a standard
   mechanism for a host to discover the PMTU of an arbitrary path.

   The current practice [1] is to use the lesser of 576 and the
   first-hop MTU as the PMTU for any destination that is not connected


Mogul/Deering                                                   [page 1]


Internet Draft             Path MTU Discovery                 April 1990




   to the same network or subnet as the source.  In many cases, this
   results in the use of smaller datagrams than necessary, because many
   paths have a PMTU greater than 576.  A host sending datagrams much
   smaller than the Path MTU allows is wasting Internet resources and
   probably getting suboptimal throughput.  Furthermore, current
   practice does not prevent fragmentation in all cases, since there are
   some paths whose PMTU is less than 576.

   It is expected that future routing protocols will be able to provide
   accurate PMTU information within a routing area, although perhaps not
   across multi-level routing hierarchies.  It is not clear how soon
   that will be ubiquitously available, so for the next several years
   the Internet needs a simple mechanism that discovers PMTUs without
   wasting resources and that works before all hosts and routers are
   modified.


2. Protocol overview

   In this memo, we describe a technique for using the Don't Fragment
   (DF) bit in the IP header to dynamically discover the PMTU of a path.
   The basic idea is that a source host initially assumes that the PMTU
   of a path is the (known) MTU of its first hop, and sends all
   datagrams on that path with the DF bit set.  If any of the datagrams
   are too large to be forwarded without fragmentation by some router
   along the path, that router will discard them and return ICMP
   Destination Unreachable messages with a code meaning ``fragmentation
   needed and DF set''.  Upon receipt of such a message (henceforth
   called a ``Datagram Too Big'' message), the source host reduces its
   assumed PMTU for the path.

   The PMTU discovery process ends when the host's estimate of the PMTU
   is low enough that its datagrams can be delivered without
   fragmentation.  Or, the host may elect to end the discovery process
   by ceasing to set the DF bit in the datagram headers; it may do so,
   for example, because it is willing to have datagrams fragmented in
   some circumstances.  Normally, the host continues to set DF in all
   datagrams, so that if the route changes and the new PMTU is lower, it
   will be discovered.

   Unfortunately, the Datagram Too Big message, as currently specified,
   does not report the MTU of the hop for which the rejected datagram
   was too big, so the source host cannot tell exactly how much to
   reduce its assumed PMTU.  To remedy this, we propose that a currently
   unused header field in the Datagram Too Big message be used to report
   the MTU of the constricting hop.  This is the only change specified
   for routers in support of PMTU Discovery.


Mogul/Deering                                                   [page 2]


Internet Draft             Path MTU Discovery                 April 1990




   The PMTU of a path may change over time, due to changes in the
   routing topology.  Reductions of the PMTU are detected by Datagram
   Too Big messages, except on paths for which the host has stopped
   setting the DF bit.  To detect increases in a path's PMTU, a host
   periodically reinitializes its assumed PMTU to be the first-hop MTU
   (and if it had stopped, resumes setting the DF bit).  This will
   almost always result in datagrams being discarded and Datagram Too
   Big messages being generated, because in most cases the PMTU of the
   path will not have changed, so it should be done infrequently.

   Since this mechanism essentially guarantees that host will not
   receive any fragments from a peer doing PMTU Discovery, it may aid in
   interoperating with certain hosts that (improperly) are unable to
   reassemble fragmented datagrams.


3. Host specification

   When a host receives a Datagram Too Big message, it must reduce its
   estimate of the PMTU to the relevant destination, based on the value
   of the Next-Hop MTU field in the message (see section 4).  We do not
   specify the precise behavior of a host in this circumstance, since
   different applications may have different requirements, and since
   different implementation architectures may favor different
   strategies.

   We do require that after receiving a Datagram Too Big message, a host
   MUST attempt to avoid eliciting more such messages in the near
   future.  The host may either reduce the size of the datagrams it is
   sending along the path, or cease setting the Don't Fragment bit in
   the headers of those datagrams.  Clearly, the former strategy may
   continue to elicit Datagram Too Big messages for a while, but since
   each of these messages (and the dropped datagrams they respond to)
   consume Internet resources, the host MUST force the PMTU discovery
   process to converge.

   Hosts using MTU Discovery MUST detect decreases in Path MTU as fast
   as possible.  Hosts SHOULD detect increases in Path MTU, but because
   doing so requires sending datagrams larger than the current estimated
   PMTU, and because the likelihood is that the PMTU will not have
   increased, this SHOULD be done at infrequent intervals (10 minutes or
   so).

   Hosts must be able to deal with Datagram Too Big messages that do not
   include the next-hop MTU, since it is not feasible to upgrade all the
   routers in the Internet in any finite time.  A Datagram Too Big
   message from an unmodified router can be recognized by the presence


Mogul/Deering                                                   [page 3]


Internet Draft             Path MTU Discovery                 April 1990




   of a zero in the (newly-defined) Next-Hop MTU field.  (This is
   required by the ICMP specification [7], which says that ``unused''
   fields must be zero.)  In section 5, we discuss possible strategies
   for a host to follow in response to an old-style Datagram Too Big
   message (one sent by an unmodified router).

   A host MUST never reduce its estimate of the Path MTU below 68
   octets.

   A host MUST not increase its estimate of the Path MTU in response to
   the contents of a Datagram Too Big message.  A message purporting to
   announce an increase in the Path MTU might be a stale datagram that
   has been floating around in the Internet, a false packet injected as
   part of a denial-of-service attack, or the result of having multiple
   paths to the destination.


3.1. TCP MSS Option

   A host doing PMTU Discovery must obey the rule that it not send IP
   datagrams larger than 576 octets unless it has permission from the
   receiver.  For TCP connections, this means that a host must not send
   datagrams larger than the Maximum Segment Size (MSS) sent by its
   peer.

   Section 4.2.2.6 of ``Requirements for Internet Hosts -- Communication
   Layers'' [1] says:

          Some TCP implementations send an MSS option only if the
          destination host is on a non-connected network.  However, in
          general the TCP layer may not have the appropriate information
          to make this decision, so it is preferable to leave to the IP
          layer the task of determining a suitable MTU for the Internet
          path.

   Actually, many TCP implementations always send an MSS option, but set
   the value to 536 if the destination is non-local.

          Note: The TCP MSS is defined to be the relevant IP datagram
          size minus 40 [9].  The default of 576 octets for the maximum
          IP datagram size yields a default of 536 octets for the TCP
          MSS.

   This behavior was correct when the Internet was full of hosts that
   did not follow the rule that datagrams larger than 576 octets should
   not be sent to non-local destinations.  Now that most hosts do follow
   this rule, it is unnecessary to limit the value in the TCP MSS option


Mogul/Deering                                                   [page 4]


Internet Draft             Path MTU Discovery                 April 1990




   to 536 for non-local peers.

   Moreover, doing this prevents PMTU Discovery from discovering PMTUs
   larger than 576, so hosts SHOULD no longer lower the value they send
   in the MSS option.  The MSS option should now reflect the size of the
   largest datagram the host is able to reassemble (MMS_R, as defined in
    [1]); in many cases, this will be the architectural limit of 65535
   octets.  A host MAY send an MSS value derived from the MTU of its
   connected network (the maximum MTU over its connected networks, for a
   multi-homed host); this should not cause problems for PMTU Discovery,
   and may dissuade a broken peer from sending enormous datagrams.


4. Router specification

   When a router is unable to forward a datagram because it exceeds the
   MTU of the next-hop network and its Don't Fragment bit is set, the
   router is required to return an ICMP Destination Unreachable message
   to the source of the datagram, with the Code indicating
   ``fragmentation needed and DF set''.  To support the Path MTU
   discovery technique specified in this memo, the router MUST include
   the MTU of that next-hop network in the low-order 16 bits of the ICMP
   header field that is labelled ``unused'' in the ICMP
   specification [7].  The high-order 16 bits remain unused, and MUST be
   set to zero.  Thus, the message has the following format:

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |   Type = 3    |   Code = 4    |           Checksum            |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |           unused = 0          |         Next-Hop MTU          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |      Internet Header + 64 bits of Original Datagram Data      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


   The value carried in the Next-Hop MTU field is:

          The size in octets of the largest datagram that could be
          forwarded, along the path of the original datagram, without
          being fragmented at this router.  The size includes the IP
          header and IP data, and does not include any lower-level
          headers.

   This field will never contain a value less than 68, since every
   router ``must be able to forward a datagram of 68 octets without


Mogul/Deering                                                   [page 5]


Internet Draft             Path MTU Discovery                 April 1990




   fragmentation'' [8].


5. Host processing of old-style messages

   In this section we outline several possible strategies for a host to
   follow upon receiving a Datagram Too Big message from an unmodified
   router (i.e., one where the Next-Hop MTU field is zero).  This
   section is not part of the protocol specification.

   The simplest thing for a host to do in response to such a message is
   to assume that the PMTU is the minimum of its currently-assumed PMTU
   and 576, and to stop setting the DF bit in datagrams sent on that
   path.  Thus, the host falls back to the same PMTU as it would choose
   under current practice (see section 3.3.3 of ``Requirements for
   Internet Hosts -- Communication Layers'' [1]).  This strategy has the
   advantage that it terminates quickly, and does no worse than existing
   practice.  It fails, however, to avoid fragmentation in some cases,
   and to make the most efficient utilization of the internetwork in
   other cases.

   More sophisticated strategies involve ``searching'' for an accurate
   PMTU estimate, by continuing to send datagrams with the DF bit while
   varying their sizes.  A good search strategy is one that obtains an
   accurate estimate of the Path MTU without causing many packets to be
   lost in the process.

   Several possible strategies apply algorithmic functions to the
   previous PMTU estimate to generate a new estimate.  For example, one
   could multiply the old estimate by a constant (say, 0.75).  We do NOT
   recommend this; it either converges far too slowly, or it
   substantially underestimates the true PMTU.

   A more sophisticated approach is to do a binary search on the packet
   size.  This converges somewhat faster, although it still takes 4 or 5
   steps to converge from an FDDI MTU to an Ethernet MTU.  A serious
   disadvantage is that it requires a complex implementation in order to
   recognize when a datagram has made it to the other end (indicating
   that the current estimate is too low).  We also do not recommind this
   strategy.

   One strategy that appears to work quite well starts from the
   observation that there are, in practice, relatively few MTU values in
   use in the Internet.  Thus, rather than blindly searching through
   arbitrarily chosen values, we can search only the ones that are
   likely to appear.  Moreover, since designers tend to chose MTUs in
   similar ways, it is possible to collect groups of similar MTU values


Mogul/Deering                                                   [page 6]


Internet Draft             Path MTU Discovery                 April 1990




   and use the lowest value in the group as our search ``plateau.''  (It
   is clearly better to underestimate an MTU by a few per cent than to
   overestimate it by one octet.)

   In section 7, we describe how we arrived at a table of representative
   MTU plateaus for use in PMTU estimation.  With this table,
   convergence is as good as binary search in the worst case, and is far
   better in common cases (for example, it takes only two round-trip
   times to go from an FDDI MTU to an Ethernet MTU).  Since the plateaus
   lie near powers of two, if an MTU is not represented in this table,
   the algorithm will not underestimate it by more than a factor of 2.

   Any search strategy must have some ``memory'' of previous estimates
   in order to chose the next one.  One approach is to use the
   currently-cached estimate of the Path MTU, but in fact there is
   better information available in the Datagram Too Big message itself.
   All ICMP Destination Unreachable messages, including this one,
   contain the IP header of the original datagram, which contains the
   Total Length of the datagram that was too big to be forwarded without
   fragmentation.  Since this Total Length may be less than the current
   PMTU estimate, but is nonetheless larger than the actual PMTU, it is
   a good input to the method for chosing the next PMTU estimate.

          Note: routers based on implementations derived from 4.2BSD
          Unix send an incorrect value for the Total Length of the
          original IP datagram.  The value sent by these routers is the
          sum of the original Total Length and the original Header
          Length (expressed in octets).  Since it is impossible for the
          host receiving such a Datagram Too Big message to know if it
          sent by one of these routers, the host must be conservative
          and assume that it is.  If the Total Length field returned is
          not less than the current PMTU estimate, it must be reduced by
          4 times the value of the returned Header Length field.

   The strategy we recommend, then, is to use as the next PMTU estimate
   the greatest plateau value that is less than the returned Total
   Length field [corrected, if necessary, according to the Note above].


6. Host implementation

   In this section we discuss how PMTU Discovery is implemented in host
   software.  This is not a specification, but rather a set of
   suggestions.

   The issues include:



Mogul/Deering                                                   [page 7]


Internet Draft             Path MTU Discovery                 April 1990




      - What layer or layers implement PMTU Discovery?

      - Where is the PMTU information cached?

      - How is stale PMTU information removed?

      - What must transport and higher layers do?


6.1. Layering

   In the IP architecture, the choice of what size datagram to send is
   made by a protocol at a layer above IP.  We refer to such a protocol
   as a ``packetization protocol.''  Packetization protocols are usually
   transport protocols (for example, TCP) but can also be higher-layer
   protocols (for example, protocols built on top of UDP).

   Implementing PMTU Discovery in the packetization layers simplifies
   some of the inter-layer issues, but has several drawbacks: the
   implementation may have to be redone for each packetization protocol,
   it becomes hard to share PMTU information between different
   packetization layers, and the connection-oriented state maintained by
   some packetization layers may not easily extend to save PMTU
   information for long periods.

   We therefore believe that the IP layer should store PMTU information
   and that the ICMP layer should process received Datagram Too Big
   messages.  The packetization layers must still be able to respond to
   changes in the Path MTU, by changing the size of the datagrams they
   send, and must also be able to specify that datagrams are sent with
   the DF bit set.  We do not want the IP layer to simply set the DF bit
   in every packet, since it is possible that a packetization layer,
   perhaps a UDP application outside the kernel, is unable to change its
   datagram size.  Protocols involving intentional fragmentation, while
   inelegant, are sometimes successful (NFS the primary example), and we
   do not want to break such protocols.

   To support this layering, packetization layers requires an extension
   of the IP service interface defined in [1]:

          A way to learn of changes in the value of MMS_S, the ``maximum
          send transport-message size,'' which is derived from the Path
          MTU by subtracting the minimum IP header size.






Mogul/Deering                                                   [page 8]


Internet Draft             Path MTU Discovery                 April 1990




6.2. Storing PMTU information

   In general, the IP layer should associate each PMTU value that it has
   learned with a specific path.  A path is identified by a source
   address, a destination address and an IP type-of-service.  (Some
   implementations do not record the source address of paths; this is
   acceptable for single-homed hosts, which have only one possible
   source address.)

          Note: Some paths may be further distinguished by different
          security classifications.  The details of such classifications
          are beyond the scope of this memo.

   The obvious place to store this association is as a field in the
   routing table entries.  A host will not have a route for every
   possible destination, but it should be able to cache a per-host route
   for every active destination.  (This requirement is already imposed
   by the need to process ICMP Redirect messages.)

   When the first packet is sent to a host for which no per-host route
   exists, a route is chosen either from the set of per-network routes,
   or from the set of default routes.  The PMTU fields in these route
   entries should be initialized to be the MTU of the associated
   first-hop data link, and MUST never be changed by the PMTU Discovery
   process.  Until a Datagram Too Big message is received, the PMTU
   associated with the initially-chosen route is presumed to be
   accurate.

   When a Datagram Too Big message is received, the ICMP layer
   determines a new estimate for the Path MTU (either from a non-zero
   Next-Hop MTU value in the packet, or using the method described in
   section 5).  If a per-host route for this path does not exist, then
   one is created (almost as if a per-host ICMP Redirect is being
   processed; the new route uses the same first-hop router as the
   current route).  If the PMTU estimate associated with the per-host
   route is higher than the new estimate, then the value in the routing
   entry is changed.

   The packetization layers must be notified about decreases in the
   PMTU.  Any packetization layer instance (for example, a TCP
   connection) that is actively using the path must be notified if the
   PMTU estimate is decreased.

          Note: even if the Datagram Too Big message contains an
          Original Datagram Header that refers to a UDP packet, the TCP
          layer must be notified if any of its connections use the given
          path.


Mogul/Deering                                                   [page 9]


Internet Draft             Path MTU Discovery                 April 1990




   Also, the instance that sent the datagram that elicited the Datagram
   Too Big message should be notified that its datagram has been
   dropped, even if the PMTU estimate has not changed, so that may
   retransmit the dropped datagram.

          Note: The notification mechanism can be analogous to the
          mechanism used to provide notification of an ICMP Source
          Quench message.  In some implementations (such as
          4.2BSD-derived systems), the existing notification mechanism
          is not able to identify the specific connection involved, and
          so an additional mechanism is necessary.

          Alternatively, an implementation can avoid the use of an
          asynchronous notification mechanism for PMTU decreases by
          postponing notification until the next attempt to send a
          datagram larger than the PMTU estimate.  In this approach,
          when an attempt is made to SEND a datagram with the DF bit
          set, and the datagram is larger than the PMTU estimate, the
          SEND function should fail and return a suitable error
          indication.  This approach may be more suitable to a
          connectionless packetization layer (such as one using UDP),
          which may be hard to ``notify'' from the ICMP layer.  In this
          case, the normal timeout-based retransmission mechanisms would
          be used to recover from the dropped datagrams.


6.3. Purging stale PMTU information

   Internetwork topology is dynamic; routes change over time.  The PMTU
   discovered for a given destination may be wrong if a new route comes
   into use.  Thus, PMTU information cached by a host can become stale.

   Because a host using PMTU discovery always sets the DF bit, if the
   stale PMTU value is too large, this will be discovered almost
   immediately once a datagram is sent to the given destination.  No
   such mechanism exists for realizing that a stale PMTU value is too
   small, so an implementation should ``age'' cached values.  When a
   PMTU value has not been decreased for a while (on the order of 10
   minutes), the PMTU estimate should be set to the first-hop data-link
   MTU, and the packetization layers should be notified of the change.
   This will cause the complete PMTU discovery process to take place
   again.

          Note: an implementation should provide a means for changing
          the timeout duration, including setting it to ``infinity.''
          For example, hosts attached to an FDDI network which is then
          attached to the rest of the Internet via a slow serial line


Mogul/Deering                                                  [page 10]


Internet Draft             Path MTU Discovery                 April 1990




          are never going to discover a new non-local PMTU, so they
          should not have to put up with dropped datagrams every 10
          minutes.

   An upper layer MUST not retransmit datagrams in response to an
   increase in the PMTU estimate, since this increase never comes in
   response to an indication of a dropped datagram.

   One approach to implementing PMTU ageing is to add a timestamp field
   to the routing table entry.  This field is initialized to a
   ``reserved'' value, indicating that the PMTU has never been changed.
   Whenever the PMTU is decreased in response to a Datagram Too Big
   message, the timestamp is set to the current time.

   Once a minute, a timer-driven procedure runs through the routing
   table, and for each entry whose timestamp is not ``reserved'' and is
   older than the timeout interval:

      - The PMTU estimate is set to the MTU of the associated first
        hop.

      - Packetization layers using this route are notified of the
        increase.

   PMTU estimates may disappear from the routing table if the per-host
   routes are removed; this can happen in response to an ICMP Redirect
   message, or because certain routing-table daemons delete old routes
   after several minutes.  Also, on a multi-homed host a topology change
   may result in the use of a different source interface.  When this
   happens, if the packetization layer is not notified then it may
   continue to use a cached PMTU value that is now too small.  One
   solution is to notify the packetization layer of a possible PMTU
   change whenever a Redirect message causes a route change, and
   whenever a route is simply deleted from the routing table.


6.4. TCP layer actions

   The TCP layer must track the PMTU for the destination of a
   connection; it should not send datagrams that would be larger than
   this.  A simple implementation could ask the IP layer for this value
   (using the GET_MAXSIZES interface described in [1]) each time it
   created a new segment, but this could be inefficient.  Moreover, TCP
   implementations that follow the ``slow-start'' congestion-avoidance
   algorithm [4] typically calculate and cache several other values
   derived from the PMTU.  It may be simpler to receive asynchronous
   notification when the PMTU changes, so that these variables may be


Mogul/Deering                                                  [page 11]


Internet Draft             Path MTU Discovery                 April 1990




   updated.

   A TCP implementation must also store the MSS value received from its
   peer (which defaults to 536), and not send any datagram larger than
   this MSS, regardless of the PMTU.  In 4.xBSD-derived implementations,
   this requires adding an additional field to the TCP state record.

   Finally, when a Datagram Too Big message is received, it implies that
   a datagram was dropped by the router that sent the ICMP message.  It
   is sufficient to treat this as any other dropped segment, and wait
   until the retransmission timer expires to cause retransmission of the
   segment.  If the PMTU Discovery process requires several steps to
   estimate the right PMTU, this could delay the connection by many
   round-trip times.

   Alternatively, the retransmission could be done in immediate response
   to a notification that the Path MTU has changed, but only for the
   specific connection specified by the Datagram Too Big message.

          Note: One MUST not retransmit in response to every Datagram
          Too Big message, since a burst of several oversized segments
          will give rise to several such messages and hence several
          retransmissions of the same data.  If the new estimated PMTU
          is still wrong, the process repeats, and there is an
          exponential growth in the number of superfluous segments sent!

          This means that the TCP layer must be able to recognize when a
          notification actually decreases the PMTU that it has already
          used to send a datagram on the given connection, and should
          ignore any other notifications.

          NOTE: SOMEONE SHOULD LOOK AT THE INTERACTION BETWEEN THESE
          RETRANSMISSIONS AND SLOW-START.  SHOULD THE CONGESTION WINDOW
          BE SET BACK TO ONE PMTU?


6.5. Issues for other transport protocols

   Some transport protocols (such as ISO TP4 [3]) are not allowed to
   repacketize when doing a retransmission.  That is, once an attempt is
   made to transmit a datagram of a certain size, its contents cannot be
   split into smaller datagrams for retransmission.  In such a case, the
   original datagram should be retransmitted without the DF bit set,
   allowing it to be fragmented as necessary to reach its destination.
   Subsequent datagrams, when transmitted for the first time, should be
   no larger than allowed by the Path MTU, and should have the DF bit
   set.


Mogul/Deering                                                  [page 12]


Internet Draft             Path MTU Discovery                 April 1990




          NOTE: COULD SAY SOMETHING ABOUT NFS HERE.


6.6. Management interface

   We suggest that an implementation provide a way for a system utility
   program to:

      - Specify that PMTU Discovery not be done on a given route.

      - Change the PMTU value associated with a given route.

   The latter can be accomplished by associating a flag with the routing
   entry; when a packet is sent via a route with this flag set, the IP
   layer leaves the DF bit clear no matter what the upper layer
   requests.

   These features might be used to work around an anomalous situation,
   or by a routing protocol implementation that is able to obtain Path
   MTU values.

   The implementation should also provide a way to change the timeout
   period for ageing stale PMTU information.


7. Likely values for Path MTUs

   The algorithm recommended in section 5 for ``searching'' the space of
   Path MTUs is based on a table of values that severely restricts the
   search space.  We describe here a table of MTU values that, as of
   this writing, represents all major data-link technologies in use in
   the Internet.

   In table 7-1, data links are listed in order of decreasing MTU, and
   grouped so that each set of similar MTUs is associated with a
   ``plateau'' equal to the lowest MTU in the group.  (The table also
   includes some entries not currently associated with a data link, and
   gives references where available).  Where a plateau represents more
   than one MTU, the table shows the maximum inaccuracy associated with
   the plateau, as a percentage.

   We do not expect that the values in the table, especially for higher
   MTU levels, are going to be valid forever.  The values given here are
   an implementation suggestion, NOT a specification or requirement.
   Implementors should use up-to-date references to pick a set of
   plateaus; it is important that the table not contain too many entries
   or the process of searching for a PMTU might waste Internet


Mogul/Deering                                                  [page 13]


Internet Draft             Path MTU Discovery                 April 1990




   resources.  Implementors should also make it convenient for customers
   without source code to update the table values in their systems (for
   example, the table in a BSD-derived Unix kernel could be changed
   using a new ``ioctl'' command).

     Plateau    MTU           Comments               Reference
               65535  Official maximum MTU       RFC 791
               65535  Hyperchannel               RFC 1044
    65535
    32000             Just in case
               17914  16Mb IBM Token Ring        ref. [6]
    17914
               8166   IEEE 802.4                 RFC 1042
    8166
               4408   4Mb IBM Token Ring         ref. [6]
               4352   FDDI (Revised)             RFC XXX
    4352 (1%)
               2048?  Wideband Network           RFC 907
               2002   IEEE 802.5                 RFC 1042
    2002 (2%)
               1536   Exp. Ethernet Nets         RFC 895
               1500   Ethernet Networks          RFC 894
               1500   Point-to-Point (max MTU)   RFC 1134
               1492   IEEE 802.3                 RFC 1042
    1492 (3%)
               1006   SLIP                       RFC 1055
               1006   ARPANET                    BBN 1822
    1006
               576    X.25 Networks              RFC 877
               544    DEC IP Portal              ref. [10]
               512    NETBIOS                    RFC 1088
               508    IEEE 802/Source-Rt Bridge  RFC 1042
               508    ARCNET                     RFC 1051
    508 (13%)
               296    Serial Lines               ???
    296
    68                Official minimum MTU       RFC 791

                Table 7-1:  Common MTUs in the Internet










Mogul/Deering                                                  [page 14]


Internet Draft             Path MTU Discovery                 April 1990




8. Security considerations

   This Path MTU Discovery mechanism makes possible two denial-of-
   service attacks, both based on a malicious party sending false
   Datagram Too Big messages to an Internet host.

   In the first attack, the false message indicates a PMTU much smaller
   than reality.  This should not entirely stop data flow, since the
   victim host should never set its PMTU estimate below the absolute
   minimum, but at 8 octets of IP data per datagram, progress could be
   slow.

   In the other attack, the false message indicates a PMTU greater than
   reality.  If believed, this could cause temporary blockage as the
   victim sends datagrams that will be dropped by some router.  Within
   one round-trip time, the host would discover its mistake (receiving
   Datagram Too Big messages from that router), but frequent repetition
   of this attack could cause lots of datagrams to be dropped.  A host,
   however, should never raise its estimate of the PMTU based on a
   Datagram Too Big message, so should not be vulnerable to this attack.

   A malicious party could also cause problems if it could stop a victim
   from receiving legitimate Datagram Too Big messages, but in this case
   there are simpler denial-of-service attacks available.


References

[1]   R. Braden, ed.
      Requirements for Internet Hosts -- Communication Layers.
      RFC 1122, SRI Network Information Center, October, 1989.

[2]   Geof Cooper.
      IP Datagram Sizes.
      Electronic distribution of the TCP-IP Discussion Group, Message-ID
         <8705240517.AA01407@apolling.imagen.uucp>.

[3]   ISO.
      ISO Transport Protocol Specification: ISO DP 8073.
      RFC 905, SRI Network Information Center, April, 1984.

[4]   Van Jacobson.
      Congestion Avoidance and Control.
      In Proc. SIGCOMM '88 Symposium on Communications Architectures and
         Protocols, pages 314-329.  Stanford, CA, August, 1988.




Mogul/Deering                                                  [page 15]


Internet Draft             Path MTU Discovery                 April 1990




[5]   C. Kent and J. Mogul.
      Fragmentation Considered Harmful.
      In Proc. SIGCOMM '87 Workshop on Frontiers in Computer
         Communications Technology.  August, 1987.

[6]   Drew Daniel Perkins.
      Private Communication.

[7]   J. Postel.
      Internet Control Message Protocol.
      RFC 792, SRI Network Information Center, September, 1981.

[8]   J. Postel.
      Internet Protocol.
      RFC 791, SRI Network Information Center, September, 1981.

[9]   J. Postel.
      The TCP Maximum Segment Size and Related Topics.
      RFC 879, SRI Network Information Center, November, 1983.

[10]  Michael Reilly.
      Private Communication.


Authors' Addresses

   Steve Deering
   Computer Science Department
   Stanford University
   Stanford, CA  94305

   Phone: (415) 723-9427

   EMail: deering@pescadero.stanford.edu

   Jeffrey Mogul
   Digital Equipment Corporation Western Research Laboratory
   100 Hamilton Avenue
   Palo Alto, CA  94301

   Phone: (415) 853-6643

   EMail: mogul@decwrl.dec.com






Mogul/Deering                                                  [page 16]

From @po3.andrew.cmu.edu:ddp+@andrew.cmu.edu  Thu Apr 19 16:37:25 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA11675; Thu, 19 Apr 90 16:37:25 PDT
Received: by decwrl.dec.com; id AA27724; Thu, 19 Apr 90 16:37:12 -0700
Received: by po3.andrew.cmu.edu (5.54/3.15) id <AA10360> for mtudwg@decwrl.dec.com; Thu, 19 Apr 90 19:36:58 EDT
Received: via switchmail; Thu, 19 Apr 90 19:36:39 -0400 (EDT)
Received: from unix9.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/service/mailqs/q002/QF.Qa=Yf3200WB:E0PncM>;
          Thu, 19 Apr 90 19:33:24 -0400 (EDT)
Received: from unix9.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/usr15/ddp/.Outgoing/QF.Aa=YezO00WB:0Vukpr>;
          Thu, 19 Apr 90 19:33:19 -0400 (EDT)
Received: from BatMail.robin.v2.10.CUILIB.3.45.SNAP.NOT.LINKED.unix9.andrew.cmu.edu.vax.3
          via MS.5.6.unix9.andrew.cmu.edu.vax_3;
          Thu, 19 Apr 90 19:33:13 -0400 (EDT)
Message-Id: <Ea=Yetq00WB_EVukdf@andrew.cmu.edu>
Date: Thu, 19 Apr 90 19:33:13 -0400 (EDT)
From: Drew Daniel Perkins <ddp+@andrew.cmu.edu>
To: mtudwg
Subject: Re: Draft RFC for the "DF scheme"
In-Reply-To: <9004190016.AA06029@acetes.pa.dec.com>
References: <9004190016.AA06029@acetes.pa.dec.com>

mogul@decwrl.dec.com (Jeffrey Mogul) writes:
> 3.1. TCP MSS Option
> ...
>    Moreover, doing this prevents PMTU Discovery from discovering PMTUs
>    larger than 576, so hosts SHOULD no longer lower the value they send
>    in the MSS option.  The MSS option should now reflect the size of the
>    largest datagram the host is able to reassemble (MMS_R, as defined in
>     [1]); in many cases, this will be the architectural limit of 65535
>    octets.  A host MAY send an MSS value derived from the MTU of its
>    connected network (the maximum MTU over its connected networks, for a
>    multi-homed host); this should not cause problems for PMTU Discovery,
>    and may dissuade a broken peer from sending enormous datagrams.

I'm a bit uncomfortable with this.  I know that "logically" 65535
should be the value to send, but I think that "practically", it would
be better to never send anything greater than the network MTU.
Sending 65535 just because it is "right" seems to be asking for
trouble.  Who knows what some strange hosts might do with this...

>         Alternatively, an implementation can avoid the use of an
>         asynchronous notification mechanism for PMTU decreases by
>         postponing notification until the next attempt to send a
>         datagram larger than the PMTU estimate.  In this approach,
>         when an attempt is made to SEND a datagram with the DF bit
>         set, and the datagram is larger than the PMTU estimate, the
>         SEND function should fail and return a suitable error
>         indication.  This approach may be more suitable to a
>         connectionless packetization layer (such as one using UDP),
>         which may be hard to ``notify'' from the ICMP layer.  In this
>         case, the normal timeout-based retransmission mechanisms would
>         be used to recover from the dropped datagrams.

Connectionless packetization layers are no harder to notify (atleast
not UDP).  The returned packet header in the ICMP message tells you
exactly where the packet came from.  The fact that this problem exists in
BSD is solely a BSD design flaw (which I think Mike Karels agreed to fix
in the Host Requirements WG).  In particular for UDP under BSD, every
source of UDP packets has been bind()'d so that there is an
established binding between process, socket and UDP source port (even
if the process hasn't done an explicit bind() or connect().

>                4408   4Mb IBM Token Ring         ref. [6]
How about:       4464   IEEE 802.5 (4Mb max)       RFC 1042

>                2002   IEEE 802.5                 RFC 1042
How about:       2002   IEEE 802.5 (4Mb recommended) RFC 1042

>                1500   Point-to-Point (max MTU)   RFC 1134
How about:       1500   Point-to-Point (default)   RFC 1134

>                296    Serial Lines               ???
How about:       296    Point-to-Point (low delay) RFC 1144

I also found a number of spelling errors.  A good wack with a spelling
checker is in order...

Drew


From smb@ulysses.att.com  Fri Apr 20 12:53:36 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16629; Fri, 20 Apr 90 12:53:36 PDT
Received: by decwrl.dec.com; id AA21298; Fri, 20 Apr 90 12:53:26 -0700
Message-Id: <9004201953.AA21298@decwrl.dec.com>
Received: by inet; Fri Apr 20 15:53 EDT 1990
From: smb@ulysses.att.com
To: mtudwg
Subject: MTU discovery considered harmful?
Date: Fri, 20 Apr 90 15:53:12 EDT

I know it's late in the game, but I'm becoming very concerned that
MTU discovery may be fundamentally a Bad Idea.  In particular, I
haven't seen any discussion of the relationship between MTU, window
size, and router hop counts; the latter aspect would again tend to
pull us towards tying in to OSPFIGP.  And without some changes, I
think we're going to be opening a can of worms.

Let's look at a not-so-absurd limiting case:  FDDI rings at both
LANs, and point-to-point links across a regional net.  FDDI
uses a 4K MTU; serial lines, being HDLC, have more or less arbitrary
MTUs, and will likely be set to 4K once FDDI becomes common.  Current
TCPs (at least, many of them) have default window sizes of 4K.
This means that we've reduced sliding window to send-and-wait.

Even with 8K windows, we haven't helped much here -- the sender will
transmit two 4K packets right away, and then have to wait for the
first ACK; if delayed ACKs are used, we'll quite likely see just
one ACK for both packets.

There's another issue as well:  serialization time on the links.
When a packet is being sent over a wire, there's a non-negligible
transmission time due to the clock speed of the link.  For example,
a DS0 link -- 56K bps -- has a serialization speed of 1/7 msec/byte.
For 4K packets, that's 585 msecs just to clock the bits onto the
wire.  Since we're routing packets at the IP level, a gateway has
to accumulate the entire packet before it can retransmit it; thus,
we pay a 585 msec delay penalty for each DS0 hop.  (For DS1 speeds --
1.544M bps -- which are used on today's backbone, the cost is of
course less, about 21 msec for each transmission of a 4K packet.)

Note what happens if that 4K packet is broken up into 4 1K chunks.
We still pay the serialization price the first time for sending
the 4K bytes; however, each gateway can now hand off the packet as
soon as 1K has arrived.  We thus get overlapped transmissions -- while
the host (or rather, the first long-haul gateway) is still sending
the last packet, the first three are simultaneously being sent over
three other links.  The per-hop cost is therefore only for a 1K packet.

To grossly oversimplify things, to a (poor) first approximation
the optimum MTU size is the window size divided by the number of
hops, or at least the number of ``slow'' (a term I'll leave undefined)
hops.  That way, each router can be busy sending a packet simultaneously.
(I say that this is a poor approximation because of the considerable
overhead per packet.  But don't overestimate that overhead; for a
router using slow lines, the serialization time dominates.  For
example, according to some measurements I've done recently, on a
Cisco router the fixed overhead is on the order of 2 ms, plus the
cost per byte -- and for a 40-byte minimum TCP packet, that's 5.7 ms.)

The proposal in the draft RFC gives a good mechanism for calculating
the PMTU, but yields no information on the hop count.  Informal
looks at some non-random traceroutes suggest typical connections are
traveling at least 10 hops.  I'd say as a guess, without looking
at maps of the NSFNET backbone or any of the regional nets, that
we can assume 3 hops within a regional net to reach NSFNET, 2 or 3
hops on the backbone, and another 3 hops via the destination regional
net.  This would suggest that maximum MTU be approximately 1/8 of
the window size -- a number that's remarkably close to what we're
now using.  That said, has anyone done any throughput measurements
using a TCP that's been hacked to use, say, 1500 byte MTUs?

Our discussions over the last few months make it fairly obvious that
we can't rely on munging the routers to give us hopcount information
via a new path discovery mechanism.  But hosts can adjust their
window sizes.  Let me suggest, off the top of my head, two strategies.
First, a host can more-or-less reliably detect use of Path MTU by
noting the arrival of TCP packets with Don't Fragment set.  If a
host notices that PMTU is in use, it should increase the window size
for that connection by some factor, perhaps (if it knows) using its
own PMTU information as a guess about the other end's PMTU.  By the
same token, a host using PMTU should nevertheless restrict its
maximum effective PMTU to some fraction of the largest receive window
ever advertised at it.  (I realize I'm being TCP-specific here.)
What fraction should we use?  I suspect that a factor of 4 will
work, though it wouldn't hurt to try some experiments.  In today's
world, that means that on an all-Ethernet LAN (InterLAN?  CateLAN?),
the typical local situation, we'll see MTUs of 1K rather than 1500 --
a reduction that isn't serious.  All-FDDI locales will not be common
for a while; first penetration will be in the campus backbone market.
People who really want the 4K MTU in such situations can always
specify SUBNETSARELOCAL, thereby bypassing the whole process.

Comments?

		--Steve Bellovin

From BILLW@MATHOM.CISCO.COM  Fri Apr 20 14:55:07 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA17072; Fri, 20 Apr 90 14:55:07 PDT
Received: by decwrl.dec.com; id AA07737; Fri, 20 Apr 90 14:55:00 -0700
Date: Fri 20 Apr 90 14:54:36-PDT
From: William "Chops" Westfield <BILLW@MATHOM.CISCO.COM>
Subject: Re: MTU discovery considered harmful?
To: smb%ulysses.att.com@CLASH.CISCO.COM
Cc: mtudwg
In-Reply-To: <9004201953.AA21298@decwrl.dec.com>
Message-Id: <12583413460.24.BILLW@MATHOM.CISCO.COM>

    I know it's late in the game, but I'm becoming very concerned that
    MTU discovery may be fundamentally a Bad Idea.

I myself have wondered whether it's really necessary, though for
different reasons.  (I don't doubt that it is a good idea, I'm just not
sure that it is worth the effort being expended.)  My question is more
along the lines of whether or not a lot of the reasons that
"fragmentation was considered harmful" might not be true any more.  In
particular, router technology has progresses a great deal since that
paper was published, along with network interface technology in general
(it is no longer common for either routers or end systems to drop
back-to-back packets, for example).


    Let's look at a not-so-absurd limiting case:  FDDI rings at both
    LANs, and point-to-point links across a regional net.  FDDI
    uses a 4K MTU; serial lines, being HDLC, have more or less arbitrary
    MTUs, and will likely be set to 4K once FDDI becomes common.  Current
    TCPs (at least, many of them) have default window sizes of 4K.

You have some invalid assumptions.  I doubt that anyone will run across
FDDI with a 4K window.  Experiments are already being done with window
sizes larger than 64K (window scaling), a necessary extension when you
want to run nets with a delay bandwidth product greated than 64kbytes
(this includes T1 satallite links and T3 TERRESTRIAL (!) links, if I
remember correctly).  HDLC does NOT have arbitrary MTUs - indeed, the
rest of your message makes more of an argument for using small MTUs on
serial links (and doing MTU discovery) than for not doing MTU discovery.

In a sense, anyone using 56kbps links to connect FDDI rings deserves to
have less than ideal functionality.  Having a small (1500?, 1000?) MTU
on the slow links, and the end system use that MTU is a much better
solution than having the routers fragment packets.  Having the hosts use
a 576 byte MTU on all local nets is better than using the local MTU
connection (which is your point), but we need to do better than that.

Remember that if you have serval FDDI rings connected together then you
REALLY REALLY do want to use the full available MTU.  For that matter,
you really want to use a 1500 byte MTU for ethernets connected by FDDI,
or even ethernets connected by T1.


    For example, according to some measurements I've done recently, on
    a Cisco router the fixed overhead is on the order of 2 ms, plus the
    cost per byte -- for a 40-byte TCP packet, that's 5.7 ms.)

Hmm.  You must be running very old software, or running without the
routing cache initialized.  Our numbers have the fixed overhead at more
like 80 uS - that's where the famous 12000 pps number comes from.

Bill Westfield
cisco Systems.
-------

From @po5.andrew.cmu.edu:ddp+@andrew.cmu.edu  Fri Apr 20 18:00:27 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA17651; Fri, 20 Apr 90 18:00:27 PDT
Received: by decwrl.dec.com; id AA09441; Fri, 20 Apr 90 18:00:21 -0700
Received: by po5.andrew.cmu.edu (5.54/3.15) id <AA05921> for mtudwg@decwrl.dec.com; Fri, 20 Apr 90 21:00:57 EDT
Received: via switchmail; Fri, 20 Apr 90 21:00:52 -0400 (EDT)
Received: from unix7.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/service/mailqs/q002/QF.Ia=v03C00WB840PsoY>;
          Fri, 20 Apr 90 20:57:40 -0400 (EDT)
Received: from unix7.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/usr15/ddp/.Outgoing/QF.Ia=uzx200WB818gWwW>;
          Fri, 20 Apr 90 20:57:33 -0400 (EDT)
Received: from BatMail.robin.v2.10.CUILIB.3.45.SNAP.NOT.LINKED.unix7.andrew.cmu.edu.vax.3
          via MS.5.6.unix7.andrew.cmu.edu.vax_3;
          Fri, 20 Apr 90 20:57:28 -0400 (EDT)
Message-Id: <Ea=uzsq00WB8F8gWlx@andrew.cmu.edu>
Date: Fri, 20 Apr 90 20:57:28 -0400 (EDT)
From: Drew Daniel Perkins <ddp+@andrew.cmu.edu>
To: mtudwg
Subject: Re: MTU discovery considered harmful?
In-Reply-To: <9004201953.AA21298@decwrl.dec.com>
References: <9004201953.AA21298@decwrl.dec.com>

smb@ulysses.att.com writes:
> Let's look at a not-so-absurd limiting case:  FDDI rings at both
> LANs, and point-to-point links across a regional net.  FDDI
> uses a 4K MTU; serial lines, being HDLC, have more or less arbitrary
> MTUs, and will likely be set to 4K once FDDI becomes common.  Current
> TCPs (at least, many of them) have default window sizes of 4K.
> This means that we've reduced sliding window to send-and-wait.

William "Chops" Westfield <BILLW@mathom.cisco.com> writes:
> You have some invalid assumptions.  I doubt that anyone will run across
> FDDI with a 4K window.  Experiments are already being done with window
> sizes larger than 64K (window scaling), a necessary extension when you
> want to run nets with a delay bandwidth product greated than 64kbytes
> (this includes T1 satallite links and T3 TERRESTRIAL (!) links, if I
> remember correctly).  HDLC does NOT have arbitrary MTUs - indeed, the
> rest of your message makes more of an argument for using small MTUs on
> serial links (and doing MTU discovery) than for not doing MTU discovery.

HDLC does too have essentially arbitrary MTUs.  In particular, when
used with PPP, the MTU can be negotiated to any value up to 65536.
However, the MTU is likely to be set based approximately on the function:

min(max(all_interface_MTUs),
    ((.2 seconds) * (serial_line_bit_rate bits/second) / (8 bits/byte)))

This function limits the maximum time a single frame can use the wire
to approximately 200 ms in order to guarantee low delay for other
frames (at least ones marked with a low delay TOS).  See Van Jacobson's
TCP/IP header compression RFC for a better and more detailed treatise.
Using this function, I would say that you shouldn't use more than a
1400 byte MTU on a 56kb line (1500 is probably close enough).

Therefore, if you are not using a 4K MTU, you really would like to use
a MTU discovery mechanism so that you don't have to send 576 octet datagrams.

Also, as Bill pointed out, people will probably NOT use 4k windows
with FDDI...

> To grossly oversimplify things, to a (poor) first approximation
> the optimum MTU size is the window size divided by the number of
> hops, or at least the number of ``slow'' (a term I'll leave undefined)
> hops.  That way, each router can be busy sending a packet simultaneously.

I think you are looking at this backwards.  Why are you holding the
window size constant?  Another (I think better) way to look at this is
that the window size should be atleast the number of hops times the
TCP segment size in order to get maximum pipelining out of the system.
The TCP segment size should be based on a relationship of the per
packet cost vs. per octet cost (on a local Ethernet with Sun 3/60s
(3/50s?) I think Van calculated approximately 1100 octets for maximum
pipelining).

> The proposal in the draft RFC gives a good mechanism for calculating
> the PMTU, but yields no information on the hop count.  Informal

If you agreed with my statements above, then I think the TCP slow
start mechanism yields all the remaining information that you need
(a very indirect derivation of the hop count).

Drew

From philipp@Gipsi.Gipsi.Fr  Mon Apr 23 10:00:26 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA00406; Mon, 23 Apr 90 10:00:26 PDT
Received: by decwrl.dec.com; id AA06983; Mon, 23 Apr 90 09:04:43 -0700
Received: from Gipsi.Gipsi.FR by inria.inria.fr (5.61+/89.0.8)
	via Fnet-EUnet id AA21114; Mon, 23 Apr 90 17:32:31 +0200 (MET)
Received: by Gipsi.Gipsi.Fr (4.12/4.8)
	id AA20853; Mon, 23 Apr 90 16:37:13 -0100 (MET)
Date: Mon, 23 Apr 90 16:37:13 -0100
From: Philippe Prindeville <philipp@Gipsi.Gipsi.Fr>
Message-Id: <9004231537.AA20853@Gipsi.Gipsi.Fr>
X-Phone: +33 1 30 60 75 25 / +33 1 47 34 42 74
To: mtudwg, smb@ulysses.att.com
Subject: Re:  MTU discovery considered harmful?

First, as you point out, your comments are TCP specific.  The
MTU discovery is an IP specific issue.  Clearly, it would be
useful for other protocols (and perhaps TCP as well, I'm not
as yet convinced of the evil you perceive) to have access to
the IP MTU: NFS being the most obvious example.

Now, the question of how TCP uses any information available
to it by the underlying IP is a layering (or more correctly,
service interface) question.  What you seem to have stumbled
upon, and it is no new issue, is that while layering is perhaps
A Good Thing (though Guru Pakular [sp?] might disagree), a
mechanism for exchanging information about desired and avail-
able service parameters is equally A Good Thing.

As a side note, a DS0 is 64kbs (clear channel).  That the
american carriers shave off 1/8 of the bandwidth to be waste-
fully used as signalling (ha!) information is an artifact of
the state of public utilities in the US "free market".

-Philip

From deering@Pescadero.Stanford.EDU  Sat Apr 28 18:04:40 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA16328; Sat, 28 Apr 90 18:04:40 PDT
Received: by decwrl.dec.com; id AA09722; Sat, 28 Apr 90 18:04:37 -0700
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA05073; Sat, 28 Apr 90 18:04:06 PDT
Date: 28 Apr 1990 15:59-PDT
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: Re: MTU discovery considered harmful?
To: Drew Daniel Perkins <ddp+@andrew.cmu.edu>
Cc: mtudwg
Message-Id: <90/04/28 1559.523@pescadero.stanford.edu>
In-Reply-To: Drew Daniel Perkins's message of Fri, 20 Apr 90 205728 -0400 (EDT)

> However, the MTU is likely to be set based approximately on the function:
>
> min(max(all_interface_MTUs),
>    ((.2 seconds) * (serial_line_bit_rate bits/second) / (8 bits/byte)))
>
> This function limits the maximum time a single frame can use the wire
> to approximately 200 ms in order to guarantee low delay for other
> frames (at least ones marked with a low delay TOS).  See Van Jacobson's
> TCP/IP header compression RFC for a better and more detailed treatise.

This reminded me of some concerns I had about Jeff's MTU plateau scheme
and serial line MTUs.  But first, in case someone is plannning to publish
a list of recommended MTUs for various speed serial lines (which I
think would be good idea), I'd like to suggest that a more precise formula
for the MTU of a line using Van's header compression scheme would be
the following:  (This replaces the second line of Drew's formula above.)

	max(68, (.2 * bps / bpo) + 33)

where	68 is the minimum legal MTU,
	bps is the line speed in bits/sec,
	bpo is "bits per octet", which is 8 for synchronous lines
		and 10 for asynch lines with one stop bit, and
	33 accounts for a 40-byte IP/TCP header being compressed down
		to 3 bytes, and the addition of 4 bytes of PPP framing.

For example, at 2400 bps asynch, this gives an MTU of 81.  An IP/TCP
datagram of that size will compress down to 44 octets; with 4 octets
of framing, it will result in 48 octets or 480 bits on the wire, which
is the desired 200 ms.

For lines that are not using header compression, omit the "+ 33", to get
the same formula as Drew suggested.

Now, one question is, how close should the MTU be to the value generated
by these formulas?  Here is a table of MTUs computed by these formulas
for various standard line speeds:

	  asynchronous, 1 stop bit		synchronous
        ----------------------------     ---------------------------
bps	compress ON    compress OFF      compress ON    compress OFF
-----   -----------    ------------      -----------    ------------
 1200		 68		 68		  68		  68
 2400		 81		 68		  93		  68
 4800		129		 96		 153		 120
 9600		225		192		 273		 240
19200		417		384		 513		 480
38400		801		768		 993		 960
56000		n/a		n/a		1433		1400
64000		n/a		n/a		1633		1600

If people configure their serial lines according to these formulas,
and hosts start using Jeff's list of plateaus, and the routers
attached to the serial lines are not upgraded to provide the Next-Hop
MTU field in Datagram Too Big messages, then our MTU discovery scheme
is not going to work as well as we would like.  For example, there are
currently no plateaus between 296 and 68, which means it'll end up using
68 as the PMTU for any path that includes a serial line of 9600 bps or
slower.  Similarly, the plateau of 1492 is just a little too high for
the computed MTU for 56Kb lines.

A few (perhaps obvious) points:

	- We can adjust Jeff's plateaus and maybe add some new ones to
	  take these numbers into account (although Jeff's scheme degrades
	  as more plateaus are added).

	- We could lobby the point-to-point people to restrict their
	  choice of MTUs to a more limited set of choices, matching
	  our plateaus wherever possible.  For example, as Drew said
	  in his message, using an MTU of 1500 for a 56Kb line is
	  "probably close enough".  Anyone care to quantify how close
	  is close enough, especially for the lower bit rates?  I guess
	  the point here is, if people are allowed to chose arbitrary MTUs
	  for their serial lines, then they might chose values that are
	  just slightly below the MTU plateaus, which is pessimal for
	  Jeff's MTU discovery scheme.

	- Perhaps this is a non-issue, because any router sophisticated
	  enough to use any MTU other than 1006 or 1500 for a serial
	  line is likely to support the Next-Hop MTU field in the
	  Datagram Too Big message within a very short period of time?

Maybe this is something we should discuss with the PPP people.  Are
they planning to publish a table like the one above, but with fewer
discrete choices of MTU?  (As I said, I think that would be a good
thing for them to do.)

Steve

From ddp+@andrew.cmu.edu  Sun Apr 29 15:10:02 1990
Received: from decpa.pa.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA23262; Sun, 29 Apr 90 15:10:02 PDT
Received: by decpa.pa.dec.com; id AA16963; Sun, 29 Apr 90 15:09:59 -0700
Received: by andrew.cmu.edu (5.54/3.15) id <AA03659> for mtudwg@decwrl.dec.com; Sun, 29 Apr 90 18:10:58 EDT
Received: via switchmail; Sun, 29 Apr 90 18:10:56 -0400 (EDT)
Received: from unix6.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/service/mailqs/q007/QF.EaCqLMa00WB700Pkgy>;
          Sun, 29 Apr 90 18:08:26 -0400 (EDT)
Received: from unix6.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/usr15/ddp/.Outgoing/QF.0aCqLFy00WB7A9yltU>;
          Sun, 29 Apr 90 18:08:18 -0400 (EDT)
Received: from BatMail.robin.v2.10.CUILIB.3.45.SNAP.NOT.LINKED.unix6.andrew.cmu.edu.vax.3
          via MS.5.6.unix6.andrew.cmu.edu.vax_3;
          Sun, 29 Apr 90 18:08:13 -0400 (EDT)
Message-Id: <UaCqLBy00WB7M9ylhI@andrew.cmu.edu>
Date: Sun, 29 Apr 90 18:08:13 -0400 (EDT)
From: Drew Daniel Perkins <ddp+@andrew.cmu.edu>
To: mtudwg
Subject: Re: MTU discovery considered harmful?
In-Reply-To: <90/04/28 1559.523@pescadero.stanford.edu>
References: <90/04/28 1559.523@pescadero.stanford.edu>

Steve Deering <deering@pescadero.stanford.edu> writes:
>         - We could lobby the point-to-point people to restrict their
>           choice of MTUs to a more limited set of choices, matching
>           our plateaus wherever possible.

I could imagine such "restrictions", but only if they were
"suggestions" or "implementors agreements".

> Maybe this is something we should discuss with the PPP people.  Are
> they planning to publish a table like the one above, but with fewer
> discrete choices of MTU?  (As I said, I think that would be a good
> thing for them to do.)

As far as I know, the "PPP people" had no such plans.  It would be a
good idea though...  My first suggestion would be that this table
belongs in Van's compression RFC.  That opinion could be wrong though,
and in any case it might be too late.  Perhaps the right thing to do
would be to take your note and expand it a bit into a two to three
page RFC?

Drew

From mogul  Tue May  8 13:08:48 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA09934; Tue, 8 May 90 13:08:48 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9005082008.AA09934@acetes.pa.dec.com>
Date:  8 May 1990 1308-PDT (Tuesday)
To: mtudwg
Cc: 
Subject: minutes of last week's meeting

Those of you who missed the meeting: this is what happened.

Those of you who were there: tell me ASAP if this is not what happened.

-Jeff

	MTU Discovery Working Group
	Chairperson: Jeffrey Mogul/DECWRL

	CURRENT MEETING REPORT
	2 May 1990
	Held at the IETF meeting in Pittsburgh, PA
	Reported by Jeffrey Mogul

	AGENDA

		a) Report on current draft (Mogul/Deering)
		b) Obtain consensus on approach
		c) Focus on details
		d) Schedule for standardization

	ATTENDEES

	Fred Bohle		fab@saturn.acc.com
	Steve Brunigos(?)
	David Burdelski		daveb@ftp.com
	Duane Butler		dmb@network.com
	Andrew Cherenson	arc@sgi.com
	Noel Chiappa		jnc@PTT.LCS.MIT.EDU
	Steve Deering		deering@pescadero.stanford.edu
	Dave Forster
	Rich Fox		sytek!rfox@sun.com
	Karen Frisa		karen@kinetics.com
	Steve Hubert		hubert@cac.washington.edu
	Van Jacobson		van@helios.ee.lbl.gov
	Stev Knowles		stev@ftp.com
	Yoni Malachi		yoni@cs.stanford.edu
	Keith McCloghrie	sytek!kzm@hplabs.HP.COM
	Leo J. McLauglin III	ljm@twg.com
	Jeff Mogul		mogul@decwrl.dec.com
	Drew Perkins		ddp@andrew.cmu.edu
	John Moy		jmoy@proteon.com
	Stephanie Price		cmcvax!price@hub.ucsb.edu
	Mike Reilly		reilly@nsl.dec.com
	Tim Seaver		tas@mcnc.org
	Frank Slaughter		fgs@shiva.com
	Richard Smith		smiddy@pluto.dss.com
	Brad Strand		bstrand@cray.com
	Cal Thixton		cthixton@next.com
	John Veizades		veizades@apple.com
	Jonathan Wenseur(?)	jhw@shiva.com

	[Some of these people did not sign the roster, but were obviously
	there.  Some other people who didn't sign the roster have slipped
	my memory.]

	MINUTES

	This was the third meeting of the MTU Discovery Working Group.

	Jeff Mogul started with a review of where we had been in the past 5
	months, including all the failed approaches.  He then presented
	the current proposal, originated by Steve Deering.  
	Summary: send all packets with the DF bit set.  Routers that
	cannot forward these packets return a slightly modified ICMP
	message that indicates the appropriate MTU.  (Current routers
	return "0" in the field meant for this purpose.)  The sending
	host revises its estimate of the Path MTU, and retransmits
	the dropped datagram.
	
	There was no objection to the basic design.  Some discussion
	ensued concerning details of the implementation and the
	relation between Path MTU discovery and transport protocol
	actions.
	
	This design solves many problems with the previous designs,
	especially because it is compatible with existing hosts
	and routers, and is quite simple to implement.

	ACTION ITEMS
	
	(1) Jeff Mogul and Steve Deering will change some details
	in the current draft and submit it as an Internet Draft.

	(2) The Router Requirements working group should be notified
	that we no longer care how fragmentation is done, since we
	don't rely on the sizes of fragments.  We will also recommend
	that support for MTU Discovery be made a requirement.
	
	SCHEDULE

	We expect never to meet again.

	Progress towards standardization will go as fast as possible,
	unless serious objections are raised.

From mogul  Thu May 10 15:46:09 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA08265; Thu, 10 May 90 15:46:09 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9005102246.AA08265@acetes.pa.dec.com>
Date: 10 May 1990 1546-PDT (Thursday)
To: mtudwg
Cc: 
Subject: Latest draft available

A new Internet-Draft is now available from the online library of
NNSC.NSF.NET.

        Title:        Path MTU Discovery
        Editors:      Jeff Mogul/DECWRL and 
		      Steve Deering/ Stanford	
                      for the MTU Discovery Working group
        Filename:     draft-ietf-mtudisc-pathmtu-00.txt

This draft describes a technique for dynamically discovering the
maximum transmission unit (MTU) of an arbitrary internet path.  It
specifies a small change to the way routers generate one type of ICMP
message.  For a path that passes through a router that has not been so
changed, this technique might not discover the correct Path MTU, but
it will always choose a Path MTU as accurate as, and in many cases
more accurate than, the Path MTU that would be chosen by current
practice.

This draft can be obtained via FTP from NNSC.NSF.NET with the
FILENAME above.  Login with FTP, username anonymous and password
guest.  Once connected cd "internet-drafts".

If you cannot FTP the draft and wish to have a copy sent to you,
please send a request to internet-drafts@nri.reston.va.us .

Greg Vaudreuil

From rtp!jek@fibercom.com  Mon May 21 08:17:38 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA21112; Mon, 21 May 90 08:17:38 PDT
Received: by decwrl.dec.com; id AA27819; Mon, 21 May 90 06:34:55 -0700
Received: from rtp.UUCP by uunet.uu.net (5.61/1.14) with UUCP 
	id AA10385; Mon, 21 May 90 09:34:10 -0400
Received: from rtp.fibercom.com by fibercom.com (3.2/SMI-3.2)
	id AA13164; Mon, 21 May 90 09:32:54 EDT
Received: by rtp.fibercom.com (3.2/SMI-3.2)
	id AA12057; Mon, 21 May 90 09:32:52 EDT
Date: Mon, 21 May 90 09:32:52 EDT
From: rtp!jek@fibercom.com (Jim Kristof)
Message-Id: <9005211332.AA12057@rtp.fibercom.com>
To: uunet!mtudwg%decwrl.dec.com@uunet.UU.NET
Subject: Request to be added to the mailing list


My apologies if this is the wrong mail address to ask to
be added to the MTU Path Discovery Working Group but it's
the only one I've seen on the net.


From mogul  Thu May 31 14:00:21 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA19239; Thu, 31 May 90 14:00:21 PDT
Date: Thu, 31 May 90 14:00:21 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9005312100.AA19239@acetes.pa.dec.com>
To: mtudwg
Subject: Last chance for comments

I encourage everyone in the MTU Discovery working group
to get a copy of the internet-draft (from NNSC.NSF.NET)
and read it within the next few days.  If I don't hear
from anyone by late next week, I'm going to submit the
draft to IESG to be issued as an RFC.

If you decide that you need more time to comment, but
you are pretty sure that you will want to request changes,
then notify me of that ASAP.

Thanks
-Jeff

From mogul  Fri Jun  1 10:38:37 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA01057; Fri, 1 Jun 90 10:38:37 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9006011738.AA01057@acetes.pa.dec.com>
Date:  1 Jun 1990 1038-PDT (Friday)
To: kzm@nms.hls.com (Keith McCloghrie)
Cc: mtudwg
Subject: Re: SMDS MTU
In-Reply-To: kzm@nms.hls.com (Keith McCloghrie) / Thu, 31 May 90 23:15:05 PDT.
             <9006010615.AA14764@nms.>

    Don't know whether you saw this, but of interest is the
    SMDS MTU of 9188.  Can we assume that by the time this is
    available, that all routers will have implemented the 
    modified (for MTU-discovery) ICMP message which contains 
    the MTU size.  Else, it won't do much for the plateau 
    algorithm.
    
I noticed this too, but I don't think it's a serious problem,
for several reasons:

(1) The current table has a plateau at 8166 octets, which is
something like 12% off from 9188 ... so the damage would be
slight (remember, a 12% difference in packet size will cause
much less than 12% difference in actual throughput).

(2) Right now, there is only one MTU larger than 9188 that
is known to me (the 16 Mbit Token ring's maximum possible MTU).
That means that only in the case where someone connects such
a LAN directly to an SMDS network will there be any issue at
all.  In all other cases, the SMDS MTU won't matter, because
the sender's initial estimate will always be lower.  [Does
anyone know if anyone actually runs token rings with an MTU
of 17914 octets?]

(3) It's probably true that by the time anyone builds an IP router
that supports SMDS, router vendors will know enough about MTU
Discovery to judge whether they should implement it (i.e., it
might not be a standard by then, but its destiny should be clear).

-Jeff

From fab@saturn.ACC.COM  Tue Jun  5 02:01:06 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA04784; Tue, 5 Jun 90 02:01:06 PDT
Received: by decwrl.dec.com; id AA21404; Fri, 1 Jun 90 07:20:48 -0700
Received: from SATURN.ACC.COM by salt.acc.com (5.61/1.34)
	id AA13853; Fri, 1 Jun 90 07:19:56 -0700
Received: by saturn.acc.com (5.51/1.28)
	id AA29443; Fri, 1 Jun 90 10:20:23 EDT
Date: Fri, 1 Jun 90 10:20:23 EDT
From: fab%saturn.ACC.COM@salt.acc.com (Fred Bohle)
Message-Id: <9006011420.AA29443@saturn.acc.com>
To: mtudwg
Subject: new mtu


I just read the SMDS minutes, and they have an MTU of 9188 bytes.
Do you want to add a new plateau to the list of "likely values" ?

Fred

------------------------------------------------------------------------
Fred Bohle			EMAIL: fab@saturn.acc.com
Interlink Computer Sciences	AT&T : 301-290-8100 
10220 Old Columbia Road
Columbia, MD 21046
------------------------------------------------------------------------


From mogul  Mon Jul  9 10:13:25 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA20650; Mon, 9 Jul 90 10:13:25 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9007091713.AA20650@acetes.pa.dec.com>
Date:  9 Jul 1990 1013-PDT (Monday)
To: mtudwg
Cc: 
Subject: New draft available

Most of you have seen this announcement, but I have to clear up
a few points:
(1) Although Greg Vaudreuil installed the new draft under the
right name, his announcement gives the file name of the previous
draft.  The file you want is:
        draft-ietf-mtudisc-pathmtu-01.txt

(2) Most of the changes since draft...-00.txt are clarifications
of how hosts should process the ICMP messages.  I'm still waiting
for Van Jacobson to respond to my questions about the proper
behaviour of TCP.

(3) One person sent me a message requesting a minor change
to the specification of gateway behaviour.  Since I was not sure
the change was benign, I requested (twice) that the suggestion
be made to the entire mailing list.  For some reason, this
has not been done ... but in any case, if you are asking for
something that the working group is going to have to vote on,
please ask the entire working group!

My intention is to generate one more draft (with the TCP behaviour
specified) and submit that to the IESG, so please complain now
about substantive issues, or hold your peace.

-Jeff

------- Forwarded Message

Return-Path: <owner-ietf@venera.isi.edu>
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA24404; Fri, 6 Jul 90 20:31:19 PDT
Received: by decwrl.dec.com; id AA02656; Fri, 6 Jul 90 20:31:09 -0700
Received: by venera.isi.edu (5.61/5.61+local)
	id <AA06821>; Fri, 6 Jul 90 15:02:04 -0700
Posted-Date: Fri, 6 Jul 90 18:02:05 EDT
Received-Date: Fri, 6 Jul 90 15:01:58 -0700
Received: from NRI.RESTON.VA.US by venera.isi.edu (5.61/5.61+local)
	id <AA06806>; Fri, 6 Jul 90 15:01:58 -0700
From: Greg Vaudreuil <gvaudre@NRI.Reston.VA.US>
Date: Fri, 6 Jul 90 18:02:05 EDT
Org: Corp. for National Research Initiatives
Phone: (703) 620-8990 ; Fax: (703) 620-0913
X-Mailer: Mail User's Shell (6.5 4/17/89)
To: ietf@venera.isi.edu
Subject: New MTU Discovery Internet Draft
Message-Id:  <9007061802.aa12407@NRI.NRI.Reston.VA.US>

A new Internet Draft is available from the on-line internet-drafts
directories.

        Title:     Path MTU Discovery
        Author:    Steve Deering/ Stanford and
                   Jeff Mogul/ DEC
        Filename:  draft-ietf-mtudisc-pathmtu-00.txt

This memo describes a technique for dynamically discovering the
maximum transmission unit (MTU) of an arbitrary internet path.  It
specifies a small change to the way routers generate one type of ICMP
message.  For a path that passes through a router that has not been so
changed, this technique might not discover the correct Path MTU, but
it will always choose a Path MTU as accurate as, and in many cases
more accurate than, the Path MTU that would be chosen by current
practice.

Internet-Drafts are available from the following locations.

NSF Network Service Center
    Address:  nnsc.nsf.net

The Defense Data Network NIC
    Address:  nic.ddn.mil

Pacific Rim
    Address:  munnari.oz.au

Europe
    Address:  nic.nordu.net

For questions, please mail to internet-drafts@nri.reston.va.us.

Greg Vaudreuil




------- End of Forwarded Message

From mogul  Tue Jul 24 10:55:25 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA28555; Tue, 24 Jul 90 10:55:25 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9007241755.AA28555@acetes.pa.dec.com>
Date: 24 Jul 1990 1055-PDT (Tuesday)
To: mtudwg
Cc: van@helios.ee.lbl.gov
Subject: Interactions between Path MTU Discovery and TCP window size

I sent this out over TCP-IP last week to see if anyone had any comments,
and so far I've seen no replies.  I encourage you all (and especially
you, Van) to let me know if I'm saying anything wrong, because if I
don't hear from anyone I will assume that the current draft, with
these paragraphs inserted, is ready for submission to the IESG.

(The rest of the document is draft-ietf-mtudisc-pathmtu-01.txt at
the usual place.)

Thanks
-Jeff

    (To be inserted at the end of section 6.4, "TCP layer actions"):
    
    Modern TCP implementations incorporate ``congestion advoidance''
    and ``slow-start'' algorithms to improve performance@cite[Jacobson1988].
    Unlike a retransmission caused by a TCP retransmission timeout, a
    retransmission caused by a Datagram Too Big message should not
    change the congestion window.  It should, however, trigger the
    slow-start mechanism (i.e., only one segment should be retransmitted
    until acknowledgements begin to arrive again).

    TCP performance can be reduced if the sender's maximum window size
    is not an exact multiple of the segment size in use (this is not
    the congestion window size, which is always a multiple of the
    segment size).  In many system (such as those derived from 4.2BSD),
    the segment size is often set to 1024 octets, and the maximum
    window size (the ``send space'') is usually a multiple of 1024
    octets, so the proper relationship holds by default.  If PMTU
    Discovery is used, however, the segment size may not be a
    submultiple of the send space, and it may change during a
    connection; this means that the TCP layer may need to change the
    transmission window size when PMTU Discovery changes the PMTU
    value.  The maximum window size should be set to the greatest
    multiple of the segment size (PMTU - 40) that is less than or equal
    to the sender's buffer space size.
    
    PMTU Discovery does not affect the value sent in the TCP MSS option,
    because that value is used by the other end of the connection,
    which may be using an unrelated PMTU value.

From mogul  Wed Aug  8 14:43:42 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA00571; Wed, 8 Aug 90 14:43:42 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9008082143.AA00571@acetes.pa.dec.com>
Date:  8 Aug 1990 1443-PDT (Wednesday)
To: mtudwg
Cc: 
Subject: I am going to submit this draft to the IESG

    Subject: A New Internet-Draft: Path MTU Discovery
    Date: Wed, 08 Aug 90 11:19:51 -0400
    From: mdavies@NRI.Reston.VA.US
    
    A New Internet Draft is available from the on-line
    internet-drafts directories.
    
		    Title:  Path MTU Discovery
		    Authors:  J. Mogul, S. Deering
		    Filename: draft-ietf-mtudisc-pathmtu-02.txt 
    
    
    This memo describes a technique for dynamically discovering the
    maximum transmission unit (MTU) of an arbitrary internet path.  It
    specifies a small change to the way routers generate one type of ICMP
    message.  For a path that passes through a router that has not been
    so changed, this technique might not discover the correct Path MTU,
    but it will always choose a Path MTU as accurate as, and in many
    cases more accurate than, the Path MTU that would be chosen by
    current practice.
    
    Internet-Drafts are available by anonymous_ftp.  Login with the username:
    anonymous and password: guest.  After logging in, cd internet-drafts.
    Type "get <filename>" with the filename above to retrieve the draft.
    
    ***This draft is currently available at nnsc.nsf.net, and will be available
    at the other directories 8/11/90.

From deering@Pescadero.Stanford.EDU  Tue Aug 28 18:29:13 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA03902; Tue, 28 Aug 90 18:29:13 PDT
Received: by decwrl.dec.com; id AA10919; Tue, 28 Aug 90 18:27:58 -0700
Received:  by Pescadero.Stanford.EDU (5.59/25-eef) id AA15231; Tue, 28 Aug 90 18:27:02 PDT
Date: 28 Aug 1990 17:20-PDT
From: Steve Deering <deering@pescadero.stanford.edu>
Subject: number of octets returned in ICMP error messages
To: ietf-rreq@jessica.stanford.edu
Cc: mtudwg
Message-Id: <90/08/28 1720.860@pescadero.stanford.edu>

Last week, Robert Elz posted a message to ietf-rreq concerning the
generation of ICMP error messages, in which he wrote:

>	...
>	This also takes account of another comment from the [Vancouver
>	Router Requirements] meeting.  (Not sending "too many" data bytes
>	back).
>	...
>	Every ICMP error message includes the internet header and at
>	least the first 8 data octets of the datagram that triggered
>	the error; more than 8 octets MAY be sent, though it is
>	suggested that this number be limited to a reasonable quantity
>	to avoid potential problems (fragmentation, possible datagram
>	too large for recipient, etc) that may otherwise occur.

I'd like to suggest that 8 data octets is "too few", and that we should
recommend (rather than simply allow) more octets than 8.  The reason for
this suggestion is to allow better ICMP support across "tunnels", that is,
paths over which IP datagrams are sent encapsulated inside other IP
datagrams.  Tunneling is being used for various purposes these days,
and I suspect that it will become more and more common in the future.
(For example, the ORWG policy-based routing scheme uses tunnels between
policy routers.)  One particular ICMP service that would work much
better over tunnels if more of the offending datagram were included is
the proposed ICMP MTU discovery strategy.  (As it is, if a datagram is
too large for a hop within a tunnel, the ICMP message returned to the
tunnel entrance does not contain enough information to fabricate an
appropriate ICMP message for the original source.)

A reasonable value, instead of 8, would be somewhere between 68 (enough
for another maximum-size IP header plus 8 data octets) and the number of
octets that will fit without exceeding 576 for the entire ICMP message.

What do y'all think?

Steve

From postel@venera.isi.edu  Wed Aug 29 09:26:47 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA00314; Wed, 29 Aug 90 09:26:47 PDT
Received: by decwrl.dec.com; id AA23404; Wed, 29 Aug 90 08:02:20 -0700
Received: from bel.isi.edu by venera.isi.edu (5.61/5.61+local)
	id <AA24579>; Wed, 29 Aug 90 08:01:08 -0700
Date: Wed, 29 Aug 90 08:02:02 PDT
From: postel@venera.isi.edu
Posted-Date: Wed, 29 Aug 90 08:02:02 PDT
Message-Id: <9008291502.AA08834@bel.isi.edu>
Received: by bel.isi.edu (4.1/4.0.3-4)
	id <AA08834>; Wed, 29 Aug 90 08:02:02 PDT
To: deering@pescadero.stanford.edu, ietf-rreq@jessica.stanford.edu
Subject: Re:  number of octets returned in ICMP error messages
Cc: mtudwg


Hey!  The ICMP spec calls for "The Internet Header plus 64 bits 
of Data Datagram" to be returned as the payload of the ICMP error
message.

--jon.

From postel@venera.isi.edu  Wed Aug 29 09:26:57 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA00319; Wed, 29 Aug 90 09:26:57 PDT
Received: by decwrl.dec.com; id AA28184; Wed, 29 Aug 90 08:27:26 -0700
Received: from bel.isi.edu by venera.isi.edu (5.61/5.61+local)
	id <AA25352>; Wed, 29 Aug 90 08:26:11 -0700
Date: Wed, 29 Aug 90 08:27:05 PDT
From: postel@venera.isi.edu
Posted-Date: Wed, 29 Aug 90 08:27:05 PDT
Message-Id: <9008291527.AA08933@bel.isi.edu>
Received: by bel.isi.edu (4.1/4.0.3-4)
	id <AA08933>; Wed, 29 Aug 90 08:27:05 PDT
To: deering@pescadero.stanford.edu, ietf-rreq@jessica.stanford.edu,
        postel@venera.isi.edu
Subject: Re:  number of octets returned in ICMP error messages
Cc: mtudwg


Oops.  I see, you want to get two headers in the payload to cover the
tunneling.

--jon.

From mogul  Wed Aug 29 11:22:23 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA01377; Wed, 29 Aug 90 11:22:23 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9008291822.AA01377@acetes.pa.dec.com>
Date: 29 Aug 1990 1122-PDT (Wednesday)
To: mtudwg
Cc: ietf-rreq
Subject: Re: number of octets returned in ICMP error messages
In-Reply-To: Steve Deering <deering@pescadero.stanford.edu> / 
		28 Aug 1990 17:20-PDT.
             <90/08/28 1720.860@pescadero.stanford.edu>

    I'd like to suggest that 8 data octets is "too few", and that we should
    recommend (rather than simply allow) more octets than 8.  The reason for
    this suggestion is to allow better ICMP support across "tunnels", that is,
    paths over which IP datagrams are sent encapsulated inside other IP
    datagrams.  Tunneling is being used for various purposes these days,
    and I suspect that it will become more and more common in the future.
    (For example, the ORWG policy-based routing scheme uses tunnels between
    policy routers.)  One particular ICMP service that would work much
    better over tunnels if more of the offending datagram were included is
    the proposed ICMP MTU discovery strategy.  (As it is, if a datagram is
    too large for a hop within a tunnel, the ICMP message returned to the
    tunnel entrance does not contain enough information to fabricate an
    appropriate ICMP message for the original source.)

I would think that the tunnel entrance would be most interested in
the Path MTU between it and the tunnel exit, which should be available
even in current ICMP messages.  This Path MTU would then become the
"Link MTU" for the tunnel, and the tunnel entrance would then use
this value to provide PMTU discovery services back to the original
source.  Having the original datagram header available would help
avoid a few dropped datagrams right after a decrease in the (tunnel)
Path MTU, but it doesn't seem essential to the PMTU discovery process.

In other words: you're probably right, but it wouldn't be a disaster for
PMTU discovery.
    
    A reasonable value, instead of 8, would be somewhere between 68 (enough
    for another maximum-size IP header plus 8 data octets) and the number of
    octets that will fit without exceeding 576 for the entire ICMP message.
    
As Robert Elz mentioned

    >	it is
    >	suggested that this number be limited to a reasonable quantity
    >	to avoid potential problems (fragmentation, possible datagram
    >	too large for recipient, etc) that may otherwise occur.

I would argue against "576" because it seems likely that this could
cause problems precisely when one is depending on PMTU discovery;
e.g., on a path that involves an MTU smaller than 576.  Is there
any reason to make it much more than 68?  Do you expect people
to use multiple levels of tunnelling (without being certifiably
insane at the time?)

-Jeff

From mogul  Mon Sep 10 11:04:11 1990
Received: by acetes.pa.dec.com (5.54.5/4.7.34)
	id AA00936; Mon, 10 Sep 90 11:04:11 PDT
From: mogul (Jeffrey Mogul)
Message-Id: <9009101804.AA00936@acetes.pa.dec.com>
Date: 10 Sep 1990 1104-PDT (Monday)
To: mtudwg
Cc: 
Subject: Just in case someone didn't see this



------- Forwarded Message

From: Greg Vaudreuil <gvaudre@NRI.Reston.VA.US>
Date: Mon, 10 Sep 90 10:10:01 EDT
To: Jon Postel <postel@venera.isi.edu>, IAB@venera.isi.edu
Subject: MTU Discovery to Proposed Standard
Cc: IETF@venera.isi.edu, IESG@NRI.Reston.VA.US

To:   Jon Postel, IAB
From: IESG
Cc:   IETF
Re:   MTU Discovery

The IESG recommends to the IAB that the internet-draft
<draft-ietf-mtudisc-pathmtu-02.txt> be published as a proposed
standard.  This is the work of the MTU Discovery Working group of
the IETF.

This draft specifies a mechanism for discovering the path MTU.  The
mechanism consists of occasionally sending a long datagram with the
don't fragment bit set (DF).  If the datagram is too long, an ICMP
error message "datagram undeliverable due to DF bit set and
fragmentation needed" is returned.

This protocol requires a small change to routers.  This protocol uses
16 bits of a previously undefined header field of the ICMP message to
return the size of the slower link causing the error.  This protocol
will also work with non-upgraded routers with performance at least as
good as current practice.  This draft presents many implementation
techniques to improve performance with old routers.

Status of this Memo

This document defines a proposed standard mechanism for discovering
path MTU. It is the product of the IETF MTU Discovery Working group.
Send comments to mtudwg@decwrl.dec.com.  Distribution of this memo is
unlimited.


Greg Vaudreuil
IESG-Secretary

------- End of Forwarded Message

From mogul  Mon Oct 15 12:04:26 1990
Received: by acetes.pa.dec.com (5.61/4.7.34)
	id AA06754; Mon, 15 Oct 90 12:04:26 -0700
From: mogul (Jeffrey Mogul)
Message-Id: <9010151904.AA06754@acetes.pa.dec.com>
Date: 15 Oct 1990 1204-PDT (Monday)
To: mtudwg
Cc: 
Subject: More progress, one last change to the draft

The IAB, meeting last Thursday at InterOp in San Jose, approved
the publication of the Path MTU Discovery specification as an
RFC (I can't remember which comes first, "Proposed Standard" or
"Draft Standard" ... this step is whichever of those is earlier).

Some members of the IAB expressed the concern that if the RFC
didn't specify an absolute minimum interval between attempts to
increase the Path MTU estimate, that some idiot would turn the
knob too low (i.e., 1 second) and the Internet would implode.
Accordingly, I agreed to add a (fairly arbitrary) specification of
the minimum value.  Here is the change in wording (from section 3):

*************** old wording ***************
  Hosts using PMTU Discovery MUST detect decreases in Path MTU as fast as
  possible.  Hosts MAY detect increases in Path MTU, but because
  doing so requires sending datagrams larger than the current
  estimated PMTU, and because the likelihood is that the PMTU
  will not have increased, this MUST be done at infrequent
! intervals (on the order of several minutes).

*************** new wording ***************
  Hosts using PMTU Discovery MUST detect decreases in Path MTU as fast as
  possible.  Hosts MAY detect increases in Path MTU, but because
  doing so requires sending datagrams larger than the current
  estimated PMTU, and because the likelihood is that the PMTU
  will not have increased, this MUST be done at infrequent
! intervals.  An attempt to detect an increase (by sending a datagram
! larger than the current estimate) MUST NOT be done less
! than 5 minutes after a Datagram Too Big message has been
! received for the given destination, or less than 1 minute after a previous,
! successful attempted increase.  We recommend setting these
! timers at twice their minimum values (10 minutes and 2
! minutes, respectively).
***************

If anyone objects to the change, or thinks the paramters are wrong,
or finds a spelling error, please let me know ASAP.  I'll be away most
of this week, so next week the document gets forwarded to the RFC
editor.

By the way, the IAB was in general quite pleased with the results of
the working group's efforts.  I thank all of you for making this
happen relatively painlessly.

-Jeff

From lbrandt@sparta.spartacus.com  Thu Nov  8 17:51:25 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.61/4.7.34)
	id AA02807; Thu, 8 Nov 90 17:51:25 -0800
Received: by decwrl.dec.com; id AA10784; Thu, 8 Nov 90 13:56:58 -0800
From: lbrandt@sparta.spartacus.com (Larry Brandt)
Received: by sparta.spartacus.com (5.61/2.1-Spartacus Inc.)
	id AA03944; Thu, 8 Nov 90 16:55:49 -0500
Message-Id: <9011082155.AA03944@sparta.spartacus.com>
Subject: no subject (file transmission)
To: mtudwg
Date: Thu, 8 Nov 90 16:55:48 EDT
X-Mailer: ELM [version 2.2 PL0]


please enroll me in this W.G. and either tell where your document is
or mail it to me.

   thanks in advance for your help,

   Larry Brandt

+------------------------------------+---------------------------------------+
| Lawrence R. Brandt                 | Internet: lbrandt@sparta.spartacus.com|
| Senior Member of Technical Staff   | Phone: (508)-937-1600 Fax: 937-0445   |
| Fibronics - Spartacus Group        |                                       |
|----------------------------------------------------------------------------|
| It is impossible to make anything foolproof because fools are so ingenous! |
+---------------------------+------------------------------------------------+


From mogul  Fri Nov 16 17:36:00 1990
Received: by acetes.pa.dec.com (5.61/4.7.34)
	id AA12104; Fri, 16 Nov 90 17:36:00 -0800
From: mogul (Jeffrey Mogul)
Message-Id: <9011170136.AA12104@acetes.pa.dec.com>
Date: 16 Nov 1990 1735-PST (Friday)
To: mtudwg
Cc: 
Subject: Happy Thanksgiving!

The Path MTU Discovery RFC has been issued.  Thanks to all who
helped.

-Jeff

------- Forwarded Message
From jkrey@ISI.EDU Fri Nov 16 17:29:37 1990
To: Request-for-Comments-List:;
Subject: RFC1191 on Path MTU Discovery
Cc: jkrey@ISI.EDU
Reply-To: jkrey@ISI.EDU
Date: Fri, 16 Nov 90 17:29:21 PST
From: "Joyce K. Reynolds" <jkrey@ISI.EDU>


A new Request for Comments is now available from the Network Information
Center in the online library at NIC.DDN.MIL.

	RFC 1191:

        Title:      Path MTU Discovery
       	Author:     J. Mogul and S. Deering
	Mailbox:    mogul@decwrl.dec.com, deering@xerox.com
	Pages:      19
	Characters: 47,936 

		pathname: RFC:RFC1191.TXT


This memo describes a technique for dynamically discovering the
maximum transmission unit (MTU) of an arbitrary internet path.  It
specifies a small change to the way routers generate one type of ICMP
message.  For a path that passes through a router that has not been
so changed, this technique might not discover the correct Path MTU,
but it will always choose a Path MTU as accurate as, and in many
cases more accurate than, the Path MTU that would be chosen by
current practice.

This RFC specifies a Proposed Standard Protocol for the Internet
community, and requests discussion and suggestions for improvements.
Please refer to the current edition of the "IAB Official Protocol
Standards" for the standardization state and status of this protocol.
Distribution of this memo is unlimited.

RFCs can be obtained via FTP from NIC.DDN.MIL, with the pathname
RFC:RFCnnnn.TXT (where "nnnn" refers to the number of the RFC).  Login
with FTP, username "anonymous" and password "guest".

The NIC also provides an automatic mail service for those sites which
cannot use FTP.  Address the request to SERVICE@NIC.DDN.MIL and in the
subject field of the message indicate the RFC number, as in "Subject:
RFC nnnn".

RFCs can also be obtained via FTP from NIS.NSF.NET.  Using FTP, login
with username "anonymous" and password "guest"; then connect to the RFC
directory ("cd RFC").  The file name is of the form RFCnnnn.TXT-1
(where "nnnn" refers to the number of the RFC).

The NIS also provides an automatic mail service for those sites which
cannot use FTP.  Address the request to NIS-INFO@NIS.NSF.NET and leave
the subject field of the message blank.  The first line of the text of
the message must be "SEND RFCnnnn.TXT-1", where nnnn is replaced by
the RFC number.

Requests for special distribution should be addressed to either the
author of the RFC in question, or to NIC@NIC.DDN.MIL.  Unless
specifically noted otherwise on the RFC itself, all RFCs are for
unlimited distribution.

Submissions for Requests for Comments should be sent to
POSTEL@ISI.EDU.  Please consult RFC 1111, "Instructions to RFC
Authors", for further information.

Requests to be added to or deleted from this distribution list should
be sent to RFC-REQUEST@NIC.DDN.MIL.


Joyce K. Reynolds
USC/Information Sciences Institute
------- End of Forwarded Message

From @po10.andrew.cmu.edu:ddp+@andrew.cmu.edu  Sat Nov 17 17:40:54 1990
Received: from decwrl.dec.com by acetes.pa.dec.com (5.61/4.7.34)
	id AA20771; Sat, 17 Nov 90 17:40:54 -0800
Received: by decwrl.dec.com; id AA09063; Sat, 17 Nov 90 17:39:00 -0800
Received: by po10.andrew.cmu.edu (5.54/3.15) id <AA06528> for mogul@decwrl.dec.com; Sat, 17 Nov 90 20:38:30 EST
Received: via switchmail; Sat, 17 Nov 90 20:38:24 -0500 (EST)
Received: from valkyries.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/service/mailqs/q000/QF.obFSL1C00iU4Q0RlFo>;
          Sat, 17 Nov 90 20:37:06 -0500 (EST)
Received: from valkyries.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/usr15/ddp/.Outgoing/QF.sbFSKye00iU4I38nY5>;
          Sat, 17 Nov 90 20:37:02 -0500 (EST)
Received: from BatMail.robin.v2.10.CUILIB.3.45.SNAP.NOT.LINKED.valkyries.andrew.cmu.edu.pmax.30
          via MS.5.6.valkyries.andrew.cmu.edu.pmax_30;
          Sat, 17 Nov 90 20:36:56 -0500 (EST)
Message-Id: <0bFSKsa00iU4438nN_@andrew.cmu.edu>
Date: Sat, 17 Nov 90 20:36:56 -0500 (EST)
From: Drew Daniel Perkins <ddp+@andrew.cmu.edu>
To: mogul (Jeffrey Mogul), mtudwg
Subject: Re: Happy Thanksgiving!
In-Reply-To: <9011170136.AA12104@acetes.pa.dec.com>
References: <9011170136.AA12104@acetes.pa.dec.com>

So what's the current status on implementations?  Will there be one in
the real 4.4 BSD (far too late I assume)?

Drew

From 76447.444@compuserve.com  Tue May  5 13:15:43 1992
Received: by acetes.pa.dec.com; id AA24038; Tue, 5 May 92 13:15:43 PDT
Received: by inet-gw-1.pa.dec.com; id AA26921; Tue, 5 May 92 13:15:38 -0700
Received: by ihb.compuserve.com (5.65/5.910516)id AA01257; Tue, 5 May 92 16:15:15 -0400
Date: 05 May 92 15:02:20 EDT
From: "Bob Millen 76447,444" <76447.444@CompuServe.COM>
To: <mtudwg>
Subject: Add to Mailing List
Message-Id: <920505190219_76447.444_DHE27-2@CompuServe.COM>

Please add me to your mailing list.

Thanks.

Bob Millen
InteCom Inc.
601 InteCom Drive
Allen, Texas  75002
214-390-8069
76447.444@CompuServe.COM


From mogul  Tue Nov  3 16:57:08 1992
Received: by acetes.pa.dec.com; id AA09282; Tue, 3 Nov 92 16:57:08 -0800
Message-Id: <9211040057.AA09282@acetes.pa.dec.com>
To: mtudwg
Subject: The working group that wouldn't (quite) die
Date: Tue, 03 Nov 92 16:57:08 PST
From: Jeffrey Mogul <mogul>

It's been almost two years since the last message anyone sent to this
mailing (Drew: no, I don't believe 4.4BSD is planning to support RFC 1191).

Coincidentally, perhaps, it has been two years since the IAB approved
RFC 1191 as a Proposed Standard.  I happened to attend the IAB meeting
last week, and one of the agenda items was "Backlog of Proposed and
Draft Standards."  I started looking rather guilty, especially when it
was pointed out that RFC 1310 ("Internet Standards Process") sets a
limit of 24 months before a stalled standards-track specification must
be reviewed by the IESG.

I promised the IAB I would do something, right away.  Yessir, Bob.

The next step for Path MTU Discovery is "Draft Standard".  RFC 1310
says that a Draft Standard is

     A specification from which at least two independent and interoperable
     implementations have been developed, and for which adequate
     operational experience has been obtained, may be elevated to the
     "Draft Standard" level.

     A Draft Standard must be well-understood and known to be quite
     stable, both in its semantics and as a basis for developing an
     implementation.

Now, nobody could argue against the proposition that RFC 1191 is "quite
stable" ... after all, the working group hasn't done anything in two years.

What we need is evidence of "at least two independent and interoperable
implementations."  I kept thinking I would do one myself, but here we
are and I guess I didn't get around to it.  But I've heard rumors that
some of you were not so lazy; I would really appreciate it if people
who have implemented RFC 1191 would tell me so!

Since Path MTU Discovery is a little unusual, in that an end host
interacts with a router rather than with another end host, I think the
safest interpretation of the "two interoperable implementations" rule
is that we really need to show the existence of both two router
implementations (no big deal) and of two independent end-host
implementations (more of a deal), and then to show that each host
implementation works with each router implementation.

We will of course also need to demonstrate that the modified routers
don't confuse unmodified end-hosts (those that for some obscure reason
are setting the Don't Fragment flag!), and that modified end-hosts
don't confuse unmodified end-hosts (i.e., does anyone crash when they
receive a packet with DF set?)  Any anecdotal evidence, either happy or
sad, would be helpful.

-Jeff

P.S.: Since this is the first message I've sent to the list in a while,
I'll no doubt get a bunch of bounced mail in return.  I suggest that
the rest of you refrain from sending mail to the mailing list for a
few days, until I manage to clean out the cobwebs.  Feel free to send
mail to me, of course.

From mogul  Wed Nov  4 18:39:38 1992
Received: by acetes.pa.dec.com; id AA16077; Wed, 4 Nov 92 18:39:38 -0800
Message-Id: <9211050239.AA16077@acetes.pa.dec.com>
To: mtudwg@wrl.dec.com
Subject: Cleaning out the cobwebs
Date: Wed, 04 Nov 92 18:39:38 PST
From: Jeffrey Mogul <mogul>

I sent a message to the MTUD mailing list yesterday.  I'm told that
some (perhaps all?) of you failed to receive it, and various droppings
left by our mail system tend to encourage my belief that something
went wrong.

Also, this was the first message I've sent to the mailing list in
almost 2 years, and it's someone incredible that I have not yet
received one bounced mail message as a result.

I realize that I'm setting myself up for a full mailbox tomorrow ...
but could I ask people to reply to this message (just to me, NOT
to the whole group) so that I can figure out if things are badly
broken, or just slightly broken?

Thanks
-Jeff

From mogul  Thu Nov  5 10:18:44 1992
Received: by acetes.pa.dec.com; id AA19179; Thu, 5 Nov 92 10:18:44 -0800
Message-Id: <9211051818.AA19179@acetes.pa.dec.com>
To: mtudwg
Subject: cleaning out the cobwebs
Date: Thu, 05 Nov 92 10:18:44 PST
From: Jeffrey Mogul <mogul>

Thanks to some bugs in our local mail software, it turns out that
this mailing list was not working at all for at least several months.
This message is an attempt to see if things are working.

I'll be sending out a real message in a few days.

-Jeff

From mogul  Fri Nov  6 18:02:10 1992
Received: by acetes.pa.dec.com; id AA27260; Fri, 6 Nov 92 18:02:10 -0800
Message-Id: <9211070202.AA27260@acetes.pa.dec.com>
To: mtudwg
Subject: The working group that wouldn't (quite) die
Date: Fri, 06 Nov 92 18:02:09 PST
From: Jeffrey Mogul <mogul>

It's been almost two years since the last useful message anyone sent to this
mailing (Drew: no, I don't believe 4.4BSD is planning to support RFC 1191).

Coincidentally, perhaps, it has been two years since the IAB approved
RFC 1191 as a Proposed Standard.  I happened to attend the IAB meeting
last week, and one of the agenda items was "Backlog of Proposed and
Draft Standards."  I started looking rather guilty, especially when it
was pointed out that RFC 1310 ("Internet Standards Process") sets a
limit of 24 months before a stalled standards-track specification must
be reviewed by the IESG.

I promised the IAB I would do something, right away.  Yessir, Bob.

The next step for Path MTU Discovery is "Draft Standard".  RFC 1310
says that a Draft Standard is

     A specification from which at least two independent and interoperable
     implementations have been developed, and for which adequate
     operational experience has been obtained, may be elevated to the
     "Draft Standard" level.

     A Draft Standard must be well-understood and known to be quite
     stable, both in its semantics and as a basis for developing an
     implementation.

Now, nobody could argue against the proposition that RFC 1191 is "quite
stable" ... after all, the working group hasn't done anything in two years.

What we need is evidence of "at least two independent and interoperable
implementations."  I kept thinking I would do one myself, but here we
are and I guess I didn't get around to it.  But I've heard rumors that
some of you were not so lazy; I would really appreciate it if people
who have implemented RFC 1191 would tell me so!

Since Path MTU Discovery is a little unusual, in that an end host
interacts with a router rather than with another end host, I think the
safest interpretation of the "two interoperable implementations" rule
is that we really need to show the existence of both two router
implementations (no big deal) and of two independent end-host
implementations (more of a deal), and then to show that each host
implementation works with each router implementation.

We will of course also need to demonstrate that the modified routers
don't confuse unmodified end-hosts (those that for some obscure reason
are setting the Don't Fragment flag!), and that modified end-hosts
don't confuse unmodified end-hosts (i.e., does anyone crash when they
receive a packet with DF set?)  Any anecdotal evidence, either happy or
sad, would be helpful.

-Jeff

From mogul  Fri Nov  6 18:29:17 1992
Received: by acetes.pa.dec.com; id AA27491; Fri, 6 Nov 92 18:29:17 -0800
Message-Id: <9211070229.AA27491@acetes.pa.dec.com>
To: smb@ulysses.att.com
Cc: mtudwg
Subject: Re: The working group that wouldn't (quite) die 
In-Reply-To: Your message of "Fri, 06 Nov 92 21:18:07 EST."
             <9211070218.AA17361@inet-gw-2.pa.dec.com> 
Date: Fri, 06 Nov 92 18:29:16 PST
From: Jeffrey Mogul <mogul>

Steve Bellovin writes:

    Jeff -- if the working group is going to reactivate, I may reraise an
    objection that was dismissed earlier.  Specifically, I have some
    experimental evidence that large MTUs can hurt.  For example, in
    a frame relay trial recently, with three DS1 links between the
    two end systems, I found that a 1460 byte MTU gave half the
    throughput of a 512 byte MTU.  You can look at it as a window
    size problem -- this was at 4K -- but that still means something
    else has to change; large MTUs are not an unmodified blessing.
    
    Anyway, this all came up in quite a different context.  I'm writing
    a simulator to try out different choices and display the results
    analytically.  I hope to have it, and a paper, done in ~6 weeks.
    How do you want me to proceed on this?  (Note that my note is
    addressed just to you, not to the group, though feel free to forward
    it if you wish.)
    
    My earlier comments focused on DS0 trunks, and those are no longer
    used much for the long-haul backbone.  But DS1 is still very common.

With my bureaucrat's hat on: I think I want to handle the issue of
implementation experience separately from that of whether there are
problems using large MTUs in certain sitatuations.  That is, if
the problem you have encountered is real, then perhaps the MTU of
the DS1 link should be set lower.  That doesn't make it any less
necessary (in fact, it makes it MORE necessary) for the end-hosts
to do MTU Discovery.

With my TCP performance hat on (I'm assuming that you were using
TCP): I suspect you are running afoul of some sort of interesting
TCP dynamics, not simply a larger MTU.  For example, using a window
size that is neither an even multiple of the MSS, nor much larger
than the MTU, could be the problem.

I strongly suggest that before you point the blame at the MTU, you
obtain sufficient traces that allow you to understand what is causing
the performance problem (i.e., how the TCP end points and routers
are interacting).  I've spent some time looking at such problems in
the past year (see my paper in SIGCOMM '92) and they are usually
amenable to careful analysis.  Also, I have personal experience
running TCP over a DS1 link, using a 1460-byte MSS, and getting
essentially the full bandwidth of the wire.  In order to do this
over a 2700 mile path, I need to use a window size of at least
32k bytes (you could do the math, assuming an RTT of about 200 msec).

But I would rather not get this working group bogged down in what
is definitely still an open research area; please make sure that
you are blaming the right cause.

-Jeff

From smb@ulysses.att.com  Fri Nov  6 18:48:09 1992
Received: by acetes.pa.dec.com; id AA27618; Fri, 6 Nov 92 18:48:09 -0800
Received: by inet-gw-2.pa.dec.com; id AA18032; Fri, 6 Nov 92 18:48:08 -0800
Message-Id: <9211070248.AA18032@inet-gw-2.pa.dec.com>
Received: by inet; Fri Nov  6 21:48 EST 1992
From: smb@ulysses.att.com
Received: by bigbird; Fri Nov  6 21:47:31 EST 1992
To: Jeffrey Mogul <mogul>
Cc: mtudwg
Subject: Re: The working group that wouldn't (quite) die 
Date: Fri, 06 Nov 92 21:47:31 EST

OK, fine.  The reason I'm blaming the MTU is not one single DS1 link,
but three -- there's too little overlap, so some of the transmitters
are idle much of the time.  Certainly, upping the window size helped --
more packets were in flight at any given time, so the question of
transmitter starvation didn't arise.

Anyway, I'll do the simulations and write the paper (my copy of
SIGCOMM '92 just arrived the other day; I haven't had a chance
to read it yet....).

From mogul  Thu Nov 12 11:16:07 1992
Received: by acetes.pa.dec.com; id AA28601; Thu, 12 Nov 92 11:16:07 -0800
Message-Id: <9211121916.AA28601@acetes.pa.dec.com>
To: mtudwg
Subject: Proteon supports it
Date: Thu, 12 Nov 92 11:16:06 PST
From: Jeffrey Mogul <mogul>


------- Forwarded Message

Date: Mon, 9 Nov 92 09:30:16 EST
From: jmoy@proteon.com (John Moy)
Subject: The working group that wouldn't (quite) die

Jeff-

As you say, router support for MTU discovery is trivial; it has been
supported in Proteon routers since release 12.0 (last spring
sometime).

John

------- End of Forwarded Message


From mogul  Mon Nov 16 12:40:16 1992
Received: by acetes.pa.dec.com; id AA00592; Mon, 16 Nov 92 12:40:16 -0800
Message-Id: <9211162040.AA00592@acetes.pa.dec.com>
To: mtudwg
Subject: PMTUD support in Solaris 2.0
Date: Mon, 16 Nov 92 12:40:16 PST
From: Jeffrey Mogul <mogul>


------- Forwarded Message

Date: Thu, 12 Nov 92 18:26:26 PST
From: gilligan@Eng.Sun.COM (Bob Gilligan)
Subject: re: FYI - Re: MTU discovery?

Solaris 2.0 (a.k.a. SunOS 5.0) implements host and router side path MTU
discovery.  This OS has been shipping to customers in CD form for about
four months and beginning in December or January will be shipped on-disk
with new machines.

To answer the obvious next question, no, this implementation is not
applicable to SunOS 4.x.  The kernel TCP/IP code in Solaris 2.x is a new
from-scratch implementation with very little resemblance to the BSD and
SunOS 4.x TCP/IP code.  It does, however, have many new features such as
PMTU and router discovery and comes much closer to compliance with
RFC1122.

------- End of Forwarded Message


From billw@cisco.com  Mon Nov 16 14:25:34 1992
Received: by acetes.pa.dec.com; id AA00660; Mon, 16 Nov 92 14:25:34 -0800
Received: by inet-gw-2.pa.dec.com; id AA03270; Mon, 16 Nov 92 14:05:11 -0800
Received: by regal.cisco.com; Mon, 16 Nov 92 14:05:10 -0800
Date: Mon, 16 Nov 92 14:05:10 PST
From: William "Chops" Westfield <billw@regal.cisco.com>
To: Jeffrey Mogul <mogul>
Cc: mtudwg
Subject: Re: Proteon supports it
In-Reply-To: Your message of Thu, 12 Nov 92 11:16:06 PST
Message-Id: <CMM.0.90.2.721951510.billw@regal.cisco.com>

cisco routers have supported MTU discovery (based on the draft document,
I don't know if either the spec or code has changed since then) since
release 8.3 (eg october, 91).

It would be nice if some host vendors did so.

BillW

From mogul  Tue Nov 24 17:08:38 1992
Received: by acetes.pa.dec.com; id AA20587; Tue, 24 Nov 92 17:08:38 -0800
Date: Tue, 24 Nov 92 17:08:38 -0800
From: mogul (Jeffrey Mogul)
Message-Id: <9211250108.AA20587@acetes.pa.dec.com>
To: mtudwg
Subject: Ignore this message

Sorry ... testing a new version of the local mailer, which has been
blowing up on this mailing list.

-Jeff

From REILLY@TGV.COM  Mon Dec 21 15:27:37 1992
Received: by acetes.pa.dec.com; id AA01424; Mon, 21 Dec 92 15:27:37 -0800
Received: by inet-gw-1.pa.dec.com; id AA28206; Mon, 21 Dec 92 15:27:36 -0800
Date: Mon, 21 Dec 1992 15:02:05 -0800 (PST)
From: REILLY@TGV.COM (Michael Reilly)
Subject: Sample code available for BSD derived systems?
To: mtudwg
Cc: reilly@TGV.COM
Message-Id: <724978925.853995.REILLY@TGV.COM>
Mail-System-Version: <MultiNet-MM(330)+TOPSLIB(156)@TGV.COM>


Hi,

I am new to this list and to MTU discovery so please forgive me if this is a
FAQ.

Does anyone have MTU discovery code for a BSD derived kernel they could share?
I would like to implement MTU discovery together with a couple of other things
I am working on and having some sample code would help me get started.

Thanks in advance,

mike

         ----------------
  Michael Reilly  --  reilly@TGV.Com

    TGV, Inc.
    Santa Cruz, California

From mogul  Fri Feb  5 17:58:58 1993
Received: by acetes.pa.dec.com; id AA24119; Fri, 5 Feb 93 17:58:58 -0800
Message-Id: <9302060158.AA24119@acetes.pa.dec.com>
To: mtudwg
Subject: Please help me verify existence of RFC1191 implementations
Date: Fri, 05 Feb 93 17:58:58 PST
From: Jeffrey Mogul <mogul>

I'm still being excessively slothful at making forward progress on
RFC1191 (Path MTU Discovery).  As you may recall, the next step is
to do interoperability tests between independent implementations.

To facilitate that, I've made a list of known implementations.  Note
that this is NOT a list of product offerings; some may be toys or
prototypes.  The point is to validate the design, not to advance
any vendor's individual interest.

If you would like to add/change/delete something on this list, please
contact me ASAP.  In 1 week (on Friday 2/12) I will post this to the
IETF mailing list, to make sure that there are no other interested
parties.  After that, I will try to fill in an interoperability matrix,
which may mean that I will ask some of you to run tests.

Thanks
-Jeff

Status of RFC1191 "Path MTU Discovery" Implementations

5 February 1993 [DRAFT]

These are the implementations, as far as I know, that support either or
both of the end-host or router components of RFC1191.  [Briefly:
RFC1191 specifies new behavior for both end-hosts and routers, but only
the router behavior differs from existing protocol specification
standards].

Not all of these implementations are products.  Some are prototypes,
some are potentially future products.  The purpose of this list is
solely for encouraging the interoperability testing required before
Path MTU Discovery can advance to Draft Standard.

I've specifically omitted the product version numbers from this list,
to avoid raising anyone's hopes.   If you want to do an
interoperability test with a product from Vendor X, get in touch with
the contact person from Vendor X and arrange it.

Implementation	Components	Contact person
==============	===========	=========================
4.4BSD		Router		arc@xingping.esd.sgi.com (Andrew Cherenson)

cisco		Router		Bill Westfield <billw@regal.cisco.com>

FTP Software	?		?

Proteon		Router		jmoy@proteon.com (John Moy)

SGI		Router+Host	skibo@florida.wpd.sgi.com (Thomas Skibo)

Sun		Router+Host	gilligan@Eng.Sun.COM (Bob Gilligan)


From mogul  Fri Feb 12 14:52:38 1993
Received: by acetes.pa.dec.com; id AA19445; Fri, 12 Feb 93 14:52:38 -0800
Message-Id: <9302122252.AA19445@acetes.pa.dec.com>
To: mtudwg
Subject: Last chance to check RFC1191 status list
Date: Fri, 12 Feb 93 14:52:38 PST
From: Jeffrey Mogul <mogul>

Early next week, I plan to send a message to the IETF mailing list
informing people of the current status of RFC1191.  I thought I should
give members of the working group one last chance to check the status
list; it turns out that we have a nice collection of implementations
to check against each other.

Once I've given other IETF people a chance to add anything that we've
missed, I'll need to collect reports of successful interoperation.
That will probably mean that I will try to talk some of you into
arranging tests with each other.

Unfortunately, I failed to realize that the TCP bakeoff was this
week; that might have been a convenient place to test things.  If
anyone was there with an RFC1191 implementation, even knowing that
it didn't cause problems would be useful information.

Thanks
-Jeff

Status of RFC1191 "Path MTU Discovery" Implementations

12 February 1993

These are the implementations, as far as I know, that support either or
both of the end-host or router components of RFC1191.  [Briefly:
RFC1191 specifies new behavior for both end-hosts and routers, but only
the router behavior differs from existing protocol specification
standards].

Not all of these implementations are products.  Some are prototypes,
some are potentially future products.  The purpose of this list is
solely for encouraging the interoperability testing required before
Path MTU Discovery can advance to Draft Standard.

I've specifically omitted the product version numbers from this list,
to avoid raising anyone's hopes.   If you want to do an
interoperability test with a product from Vendor X, get in touch with
the contact person from Vendor X and arrange it.

Implementation	Components	Contact person
==============	===========	=========================
3Com Netbuilder	Router		rxk@3com.com (Rajeev Kochhar)
 
4.4BSD		Router		arc@sgi.com (Andrew Cherenson)

ACC		Router		art@acc.com (Art Berggreen)

cisco		Router		albright@lager.cisco.com (Bob Albrightson)

DEC WANrouters	Router		gerberg@took.enet.dec.com (Elliot Gerberg)

DEC NIS routers	Router		forster@marvin.enet.dec.com (Dave Forster)

FTP Software	Host		jbvb-tech@ftp.com (James B. Van Bokkelen)

Proteon		Router		jmoy@proteon.com (John Moy)

SGI		Router+Host	skibo@sgi.com (Thomas Skibo)

Sun		Router+Host	gilligan@Eng.Sun.COM (Bob Gilligan)

TGV		Host		reilly@tgv.com (Michael Reilly)


From mogul  Wed Feb 17 11:22:58 1993
Received: by acetes.pa.dec.com; id AA07333; Wed, 17 Feb 93 11:22:58 -0800
Message-Id: <9302171922.AA07333@acetes.pa.dec.com>
To: mtudwg
Subject: FYI
Date: Wed, 17 Feb 93 11:22:57 PST
From: Jeffrey Mogul <mogul>

I'm not sure if all of you are on the IETF mailing list, so here's a
copy of a message that I just sent.  Note that we're actually quite
close to qualifying for full Standard, not just Draft Standard.

-Jeff

------- Forwarded Message

To: ietf@isi.edu
Subject: Status of RFC1191 (Path MTU Discovery)
Date: Wed, 17 Feb 93 11:19:45 PST
From: Jeffrey Mogul <mogul>

RFC1191 was issued in November, 1990, and has been a "Proposed Standard"
since then.  Proposed Standards are supposed to advance to Draft Standard
status within a reasonable period.  Due to the lethargy of the chair of the
working group (i.e., me), this step has not yet been made.

RFC1360 says:
   It is general IAB practice that no proposed standard can be promoted
   to draft standard without at least two independent implementations
   (and the recommendation of the IESG). Promotion from draft standard
   to standard generally requires operational experience and
   demonstrated interoperability of two or more implementations (and the
   recommendation of the IESG).

In spite of my sloth, there are in fact many implementations of
RFC1191, some of which are shipping in product systems.  It is
therefore in a position to meet the requirements for promotion not only
to Draft Standard, but perhaps even to Standard (except for the
mandatory time delays).

Therefore, I need to gather formal reports regarding the interoperability
of RFC1191 implementations, both with each other and also with hosts
or routers that do not implement the protocol.

As a first step, with the help of the MTU Discovery Working Group I've
compiled a list of extant RFC1191 implementations.  This is NOT a list
of RFC1191 product support (although some of the entries are products),
and is only intended to help arrange interoperability testing.  If you
know of an implementation not on my list, please let me know about it.

This is the only message that I intend to send to the entire IETF on
this topic; future discussions will take place on the working group's
mailing list (which is "mtudwg@wrl.dec.com".  If you want to be added
to the mailing list, please send a request to "mtudwg-request@wrl.dec.com"
(NOT to the whole group!).

People who have had operational experience (either good or bad) with
Path MTU Discovery are invited to share that with the working group.
I've had at least one report of a link MTU that did not closely match
the values in the table given in RFC1191; this is important information.

- - -Jeff

Status of RFC1191 "Path MTU Discovery" Implementations

17 February 1993

These are the implementations, as far as I know, that support either or
both of the end-host or router components of RFC1191.  [Briefly:
RFC1191 specifies new behavior for both end-hosts and routers, but only
the router behavior differs from existing protocol specification
standards].

Not all of these implementations are products.  Some are prototypes,
some are potentially future products.  The purpose of this list is
solely for encouraging the interoperability testing required before
Path MTU Discovery can advance to Draft Standard.

I've specifically omitted the product version numbers from this list,
to avoid raising anyone's hopes.   If you want to do an
interoperability test with a product from Vendor X, get in touch with
the contact person from Vendor X and arrange it.

Implementation	Components	Contact person
==============	===========	=========================
3Com Netbuilder	Router		rxk@3com.com (Rajeev Kochhar)
 
4.4BSD		Router		arc@sgi.com (Andrew Cherenson)

ACC		Router		art@acc.com (Art Berggreen)

cisco		Router		albright@lager.cisco.com (Bob Albrightson)

DEC WANrouters	Router		gerberg@took.enet.dec.com (Elliot Gerberg)

DEC NIS routers	Router		forster@marvin.enet.dec.com (Dave Forster)

FTP Software	Host		jbvb-tech@ftp.com (James B. Van Bokkelen)

Mentat		Router+Host	jt@mentat.com (Jerry Toporek)

Proteon		Router		jmoy@proteon.com (John Moy)

SGI		Router+Host	skibo@sgi.com (Thomas Skibo)

Sun		Router+Host	gilligan@Eng.Sun.COM (Bob Gilligan)

TGV		Host		reilly@tgv.com (Michael Reilly)

From simon@internode.com.au  Thu Feb 18 00:13:01 1993
Received: by acetes.pa.dec.com; id AA10458; Thu, 18 Feb 93 00:13:01 -0800
Received: by inet-gw-2.pa.dec.com; id AA04028; Thu, 18 Feb 93 00:12:47 -0800
Received: from simon.Zen.internode.com.au by wraith.internode.com.au with DMSP (5.64+1.3.1+0.50/UA-5.23)
	id AA23785; Thu, 18 Feb 1993 18:38:24 +1030
Date: Thu, 18 Feb 1993 18:38:24 +1030
Message-Id: <9302180808.AA23785@wraith.internode.com.au>
To: mogul
Subject: Re: Status of RFC1191 (Path MTU Discovery)
From: simon@internode.com.au  (Simon Hackett)
Reply-To: simon@internode.com.au
Cc: mtudwg
Sender: simon@internode.com.au
Repository: internode.com.au
Originating-Client: Zen.internode.com.au

In response to Jeff Mogul's recent posting to the ietf mailing list,
I would like to relate one specific instance where MTU path discovery
implementations I am aware of are failing to produce good
results for me. 

Apart from indicating what is probably a bug some of the code noted
below, it indicates (to me) a situation where some more MTU sizes
under 296 in the MTU path discovery tables would be worthwhile.

I'm not on the mtudwg list, and I don't have the time resources to
get onto another mailing list; I'm mailing to it since that's where
jeff's posting asked for this sort of information to be sent. I would
certainly appreciate some feedback from someone on the list or
otherwise to know if this information is useful or if you have any
further questions.

> People who have had operational experience (either good or bad) with
> Path MTU Discovery are invited to share that with the working group.
> I've had at least one report of a link MTU that did not closely match
> the values in the table given in RFC1191; this is important information.
> 

My situation is with a link which the vendor of the relevant router
code (TGV, whose MultiNet product for Vax/VMS is being used by me to
run my company internet link, via serial line ip). i.e. there is a
MultiNet-running Vax here on my company LAN which is running
compressed SLIP out of a serial port into a 14.4K modem, over to
another site with SLIP running inside an annex terminal server, and
thence to the Internet.

The MTU in the TGV code for serial line Ip interfaces is 296. So I
would expect an MTU discovery routine to determine "296" as the
answer for a path MTU from most places.

Well, two separate interesting war stories have occurred with respect
to my link. I'll relate these both briefly, but I'll also invite
anyone on this list with MTU disovery implemented to feel free to try
to test that MTU code against my node (wraith.internode.com.au). If
you get an answer > 296, you're definitely broken. But I'm *really*
interested to know if you can get 296 out of your code when you try
to hit on me. That would help to identify whether the problem I'll
relate first is in the router I have or in the MTU discovery code
I'll mention.

(A) Karl Auerbach (karl@empirical.com) was at the TCP/IP bakeoff last
week and while I was there he and I tested MTU discovery against my
node with his shiny new implementation of path discovery. He got an
MTU of 68 from the path to my office in Australia, as his code got a
failure against my router for an MTU of 296. It tried it, but his code
decides that he has to "ratchet" down another notch from that, and so
says "68" as the grand total. 

manual testing we did with his code indicates that packets
slightly smaller (e.g. 10-20 bytes smaller) are allowed in ok, so
someone has an edge effect problem here - either the router vendor
(TGV) or the MTU discovery author (Karl). 

There are two outcomes from this first case:
   #1: I really do want someone else to hit on me and tell me the MTU
they get - if someone else can get "296", I can tell Karl his code is
broken or he misunderstood the RFC, or else I can show the result to
TGV and ask them for followup.

   #2: it seems to me (but beware, I have *not* read the RFC
algorithm, I just assume a lot of what it must do from observing
network traffic...) that  another "notch" in the table between 296
and the apparent next size down (68!) would be good to reduce the
negative impact of whatever is causing the stuff I'm describing
above. 68 seems a bit severe as a drop down from 296, and at the low
speed, low MTU range, this stuff matters a whole lot more - the
impact/overhead of headers in 68 byte packets versus 296 byte packets
is serious. Just a thought, anyway. 


(B) A vendor I know, who I won't name here to avoid embarassing them
too much (but they're in your list...), has completely broken their
MTU discovery code in their current shipping release...:

It trips up and dies when it tries to talk to wraith.internode.com.au
from the USA. It tries a big MTU, that fails, so it tries the next
notch down, that fails, so it tries the original size again (!), or
repeats the smaller request (I no longer recall which, and I have
fixed code now, but I might have a packet trace somewhere...), and it
keeps doing that over and over, blocking up the tcp session until the
controlling application finally gives up and aborts. This has been
resolved for this companies' next release, but I think it's another
good reason to say:

    - If you haven't tried your MTU discovery code against a really
long path with high latency, high turnaround time, and a small MTU in
the last hop at the far end, please hit on my node to make sure
*your* code can say "296" without blinking...hit against
wraith.internode.com.au (if you want to shift some bytes, ftp
something into my anonymous ftp "tmp" area, or write to the discard
port). The router with the 296 mtu is "mike.internode.com.au", which
you'll see as the router right before wraith.


Yours for a more robust Internet :-)
Simon Hackett
Internode Systems Pty Ltd
Adelaide, Australia




From gvaudre@CNRI.Reston.VA.US  Thu Feb 25 17:04:20 1993
Received: by acetes.pa.dec.com; id AA07018; Thu, 25 Feb 93 17:04:20 -0800
Received: by inet-gw-1.pa.dec.com; id AA07412; Thu, 25 Feb 93 17:04:16 -0800
Received: from [127.0.0.1] by IETF.CNRI.Reston.VA.US id aa20033;
          25 Feb 93 20:02 EST
To: IETF-Announce:;
Cc: IESG <IESG@IETF.CNRI.Reston.VA.US>
Cc: mtudwg
From: IESG Secretary <iesg-secretary@CNRI.Reston.VA.US>
Subject: Last Call: Path MTU Discovery to Draft Standard              
Date: Thu, 25 Feb 93 20:02:47 -0500
Sender: gvaudre@CNRI.Reston.VA.US
Message-Id:  <9302252002.aa20033@IETF.CNRI.Reston.VA.US>


The IESG is considering elevating RFC1191 "Path MTU Discovery" to Draft
Standard. A companion document intended for publication as an
Informational RFC "IESG Advice from Experience with Path MTU Discovery"
<draft-ietf-iesg-mtuexperience-00.txt> describes current experience
with the protocol.
 
The IESG plans to make a decision in the next few weeks, and solicits
final comments on this action.  Please send any comments to the
iesg@cnri.reston.va.us, or ietf@cnri.reston.va.us mailing lists by
March 15th.
                                               

Greg Vaudreuil
IESG Secretary
 

From mogul  Fri Feb 26 17:48:54 1993
Received: by acetes.pa.dec.com; id AA13797; Fri, 26 Feb 93 17:48:54 -0800
Message-Id: <9302270148.AA13797@acetes.pa.dec.com>
To: mtudwg
Subject: Re: Last Call: Path MTU Discovery to Draft Standard
Date: Fri, 26 Feb 93 17:48:53 PST
From: Jeffrey Mogul <mogul>

As you have seen, the IESG is ready to move RFC1191 to Draft
Standard later next month.  I'd like to encourage anyone who
has
	(1) positive evidence of interoperability
	(2) experience with operational use of RFC1191 in a production
		Internet
	(3) evidence of problems with the protocol
to contact me.

There is already some evidence that the table of MTU values is
out of date; this is not surprising, since it's over 2 years old.
Anyone who knows of an MTU value not listed in the table is also
encouraged to report that to me.  Perhaps the best solution to
this problem is to update the table, from time to time, in a separate
RFC.

I've appended the most up-to-date list of contacts for interoperability
testing, below.

Thanks
-Jeff

Status of RFC1191 "Path MTU Discovery" Implementations

26 February 1993

These are the implementations, as far as I know, that support either or
both of the end-host or router components of RFC1191.  [Briefly:
RFC1191 specifies new behavior for both end-hosts and routers, but only
the router behavior differs from existing protocol specification
standards].

Not all of these implementations are products.  Some are prototypes,
some are potentially future products.  The purpose of this list is
solely for encouraging the interoperability testing required before
Path MTU Discovery can advance to Draft Standard.

I've specifically omitted the product version numbers from this list,
to avoid raising anyone's hopes.   If you want to do an
interoperability test with a product from Vendor X, get in touch with
the contact person from Vendor X and arrange it.

Implementation	Components	Contact person
==============	===========	=========================
3Com Netbuilder	Router		rxk@3com.com (Rajeev Kochhar)
 
4.4BSD		Router		arc@sgi.com (Andrew Cherenson)

ACC		Router		art@acc.com (Art Berggreen)

ANSnet		Router		rwoundy@vnet.ibm.com (Rich Woundy)

cisco		Router		albright@lager.cisco.com (Bob Albrightson)

DEC WANrouters	Router		gerberg@took.enet.dec.com (Elliot Gerberg)

DEC NIS routers	Router		forster@marvin.enet.dec.com (Dave Forster)

FTP Software	Host		jbvb-tech@ftp.com (James B. Van Bokkelen)

Mentat		Router+Host	jt@mentat.com (Jerry Toporek)

Proteon		Router		jmoy@proteon.com (John Moy)

SGI		Router+Host	skibo@sgi.com (Thomas Skibo)

Sun		Router+Host	gilligan@Eng.Sun.COM (Bob Gilligan)

TGV		Host		reilly@tgv.com (Michael Reilly)

From mathis@pele.psc.edu  Tue Mar  2 11:43:17 1993
Received: by acetes.pa.dec.com; id AA02911; Tue, 2 Mar 93 11:43:17 -0800
Received: by inet-gw-2.pa.dec.com; id AA10165; Tue, 2 Mar 93 11:43:05 -0800
Received: by pele.psc.edu (5.57/Ultrix2.4-C cf:ab 9/11/90 --MM--)
	id AA02211; Tue, 2 Mar 93 14:42:18 -0500
Message-Id: <9303021942.AA02211@pele.psc.edu>
To: Jeffrey Mogul <mogul>
Cc: mtudwg, mathis@pele.psc.edu
Subject: Re: Last Call: Path MTU Discovery to Draft Standard 
In-Reply-To: Your message of "Fri, 26 Feb 93 17:48:53 PST."
             <9302270148.AA13797@acetes.pa.dec.com> 
Date: Tue, 02 Mar 93 14:42:17 -0500
From: mathis@pele.psc.edu
X-Mts: smtp

We inflict Cray mtu discovery on >1000 users across the internet, with
relatively minor problems.

I believe that we have run into only two:

- Local hosts which were treating the MSS option as signed and agreeing to
receive segments larger than 32KB over their ethernet.  :-(
- if some gateway outright discarded oversized frames (either because it was
broken or didn't have a return route) the MTU probing would cause the
TCP connection to hang.

I haven't looked at the MTU Discovery RFC closely, but it might help the latter
problem if it was noted that "If MTU probing causes multiple TCP
retransmissions, it should be assumed that the the probing has failed, and to
revert to <non-negotiated> behavior."   The new Cray release does this, and
I'm sure that Dave Borman can shed some light on the specifics.

Also the table of MTU's does not need to be updated unless there are new link
layers on old routers.....  I think you will find that all new link layers are
on routers that support MTU discovery.

--MM--

From gvaudre@CNRI.Reston.VA.US  Mon Mar  8 11:56:18 1993
Received: by acetes.pa.dec.com; id AA18817; Mon, 8 Mar 93 11:56:18 -0800
Received: by inet-gw-1.pa.dec.com; id AA18145; Mon, 8 Mar 93 11:56:17 -0800
Received: from [127.0.0.1] by IETF.CNRI.Reston.VA.US id aa23784;
          8 Mar 93 14:46 EST
To: Jon Postel -- RFC Editor <postel@isi.edu>
To: IETF-Announce:;
Cc: Internet Architecture Board <iab@isi.edu>
Cc: mtudwg
Cc: The Internet Engineering Steering Group <IESG@IETF.CNRI.Reston.VA.US>
From: IESG Secretary <iesg-secretary@CNRI.Reston.VA.US>
Subject: Protocol Action: Path MTU Discovery to Draft Standard
Date: Mon, 08 Mar 93 14:46:00 -0500
Sender: gvaudre@CNRI.Reston.VA.US
Message-Id:  <9303081446.aa23784@IETF.CNRI.Reston.VA.US>


  The IESG has approved the Internet Draft "Path MTU Discovery" RFC1191
  as a Draft Standard. This document is the product of the concluded
  MTU Discovery Working Group. A companion document "IESG Advice from
  Experience with Path MTU Discovery" describes operational experience
  with the protocol in the Internet. The IESG contact persons are
  Philip Almquist, Stev Knowles and Dave Piscitello.                   
 
Technical Summary

  This memo describes a technique for dynamically discovering the
  maximum transmission unit (MTU) of an arbitrary internet path.  It
  specifies a small change to the way routers generate one type of ICMP
  message.  For a path that passes through a router that has not been
  so changed, this technique might not discover the correct Path MTU,
  but it will always choose a Path MTU as accurate as, and in many
  cases more accurate than, the Path MTU that would be chosen by
  current practice.

  The IESG has heard reports from various implementors that some
  routers have the ability to disable ICMP messages generated by the
  router. This is to protect older BSD hosts, which would drop
  connections if it found an ICMP message on the connection. From the
  descriptions we have obtained, the IESG feels that adjusting the
  routers to continue to send ICMP message Type 3 code 4 (destination
  unreachable, don't fragment bit set and fragmentation required) even
  when they have their "don't send ICMP messages" switch turned on,
  since older BSD hosts should never be setting the DF bit in their
  packets.

Working Group Summary

  No revisions were needed to RFC1191, the published Proposed Standard.

Protocol Quality

  The MTU Discovery Protocol meets the the requirements for Draft
  Standard.  It has been independently implemented by over ten vendors,
  is being shipped in released products, and is in operational use.


From gvaudre@CNRI.Reston.VA.US  Mon Mar  8 16:10:16 1993
Received: by acetes.pa.dec.com; id AA21470; Mon, 8 Mar 93 16:10:16 -0800
Received: by inet-gw-1.pa.dec.com; id AA06162; Mon, 8 Mar 93 16:10:14 -0800
Received: from [127.0.0.1] by IETF.CNRI.Reston.VA.US id aa28756;
          8 Mar 93 19:08 EST
To: Jon Postel -- RFC Editor <postel@isi.edu>
To: IETF-Announce:;
Cc: Internet Architecture Board <iab@isi.edu>
Cc: mtudwg
Cc: The Internet Engineering Steering Group <IESG@IETF.CNRI.Reston.VA.US>
From: IESG Secretary <iesg-secretary@CNRI.Reston.VA.US>
Subject: REVISED Protocol Action: Path MTU Discovery to Draft Standard
Date: Mon, 08 Mar 93 19:08:21 -0500
Sender: gvaudre@CNRI.Reston.VA.US
Message-Id:  <9303081908.aa28756@IETF.CNRI.Reston.VA.US>

  
  The IESG has approved the Internet Draft "Path MTU Discovery" RFC1191
  as a Draft Standard. This document is the product of the concluded
  MTU Discovery Working Group. The IESG recommends that a companion
  document "IESG Advice from Experience with Path MTU Discovery"
  describing operational experience with the protocol in the Internet
  be published as an Informational document. The IESG contact persons
  are Philip Almquist, Stev Knowles and Dave Piscitello.           
 
Technical Summary

  This memo describes a technique for dynamically discovering the
  maximum transmission unit (MTU) of an arbitrary internet path.  It
  specifies a small change to the way routers generate one type of ICMP
  message.  For a path that passes through a router that has not been
  so changed, this technique might not discover the correct Path MTU,
  but it will always choose a Path MTU as accurate as, and in many
  cases more accurate than, the Path MTU that would be chosen by
  current practice. 

  The IESG has heard reports from various implementors that some
  routers have the ability to disable ICMP messages generated by the
  router.  This is to protect older BSD hosts which drop all connetions
  if they receive an ICMP message for any connection. From the
  descriptions obtained, the IESG feels that routers should be adjusted
  to continue to send ICMP message Type 3 code 4 (destination
  unreachable, don't fragment bit set and fragmentation required) even
  when they have their "don't send ICMP messages" switch turned on
  since older BSD hosts should never be setting the DF bit in their
  packets.

Working Group Summary

  No revisions were needed to RFC1191, the published Proposed Standard.

Protocol Quality

  The MTU Discovery Protocol meets the the requirements for Draft
  Standard.  It has been independently implemented by over ten vendors,
  is being shipped in released products and is in operational use.

From jt@mentat.com  Mon Mar 29 11:35:05 1993
Received: by acetes.pa.dec.com; id AA13848; Mon, 29 Mar 93 11:35:05 -0800
Received: by inet-gw-1.pa.dec.com; id AA19835; Mon, 29 Mar 93 11:35:04 -0800
Received: from leo.mentat.com ([192.88.122.132]) by mentat.com (4.1/SMI-4.1)
	id AA25714; Mon, 29 Mar 93 11:33:50 PST
Date: Mon, 29 Mar 93 11:33:50 PST
From: jt@mentat.com (Jerry Toporek)
Message-Id: <9303291933.AA25714@mentat.com>
To: mogul, simon@internode.com.au
Subject: Re: Status of RFC1191 (Path MTU Discovery)
Cc: mtudwg


Simon suggested we try our MTU discovery implementations against his
point to point link...

> The MTU in the TGV code for serial line Ip interfaces is 296. So I
> would expect an MTU discovery routine to determine "296" as the
> answer for a path MTU from most places.

Didn't happen.  If I send a UDP datagram with greater than 228 bytes
of data (ip length 256), I get a frag needed message back from
129.127.40.103.

> (A) Karl Auerbach (karl@empirical.com) was at the TCP/IP bakeoff last
> week and while I was there he and I tested MTU discovery against my
> node with his shiny new implementation of path discovery. He got an
> MTU of 68 from the path to my office in Australia, as his code got a
> failure against my router for an MTU of 296. It tried it, but his code
> decides that he has to "ratchet" down another notch from that, and so
> says "68" as the grand total. 
> 
> manual testing we did with his code indicates that packets
> slightly smaller (e.g. 10-20 bytes smaller) are allowed in ok, so
> someone has an edge effect problem here - either the router vendor
> (TGV) or the MTU discovery author (Karl). 

My tests agree with Karl's.

> There are two outcomes from this first case:
>    #1: I really do want someone else to hit on me and tell me the MTU
> they get - if someone else can get "296", I can tell Karl his code is
> broken or he misunderstood the RFC, or else I can show the result to
> TGV and ask them for followup.

Talk to TGV.  Perhaps they are interpreting 296 to include link layer
headers, etc?  Hmmm, 296 - 256 is 40.  Room for an IP/TCP header??

>    #2: it seems to me (but beware, I have *not* read the RFC
> algorithm, I just assume a lot of what it must do from observing
> network traffic...) that  another "notch" in the table between 296
> and the apparent next size down (68!) would be good to reduce the
> negative impact of whatever is causing the stuff I'm describing
> above. 68 seems a bit severe as a drop down from 296, and at the low
> speed, low MTU range, this stuff matters a whole lot more - the
> impact/overhead of headers in 68 byte packets versus 296 byte packets
> is serious. Just a thought, anyway. 

Well, the idea is to include in the table values that are known to occur
in nature, and to ensure that the process converges as quickly as possible.
If there is a "real" mtu in between, then it is definitely a bummer to
run at 68, but if this is just a broken router problem, that is different.


Thanks for making the test path available.  We had not previously included
the table search feature in our implementation, but after testing on this
link I am happy with the way my new code behaves.  If you get any
further insight into the last hop behavior, let us know.

jt


From simon@internode.com.au  Mon Mar 29 16:43:22 1993
Received: by acetes.pa.dec.com; id AA15159; Mon, 29 Mar 93 16:43:22 -0800
Received: by inet-gw-2.pa.dec.com; id AA06603; Mon, 29 Mar 93 16:42:49 -0800
Received: from simon.Zen.internode.com.au by wraith.internode.com.au with DMSP (5.64+1.3.1+0.50/UA-5.23)
	id AA16321; Tue, 30 Mar 1993 10:07:47 +0930
Date: Tue, 30 Mar 1993 10:07:47 +0930
Message-Id: <9303300037.AA16321@wraith.internode.com.au>
To: jt@mentat.com
Subject: Re: Status of RFC1191 (Path MTU Discovery)
From: simon@internode.com.au  (Simon Hackett)
Reply-To: simon@internode.com.au
Cc: mogul, simon@internode.com.au, mtudwg, karl@empirical.com
Sender: simon@internode.com.au
Repository: internode.com.au
Originating-Client: Zen.internode.com.au

Re: MTU discovery tests, talking to my site via my "thin" ip path
with a 296 MTU...:

> My tests agree with Karl's.

Good news for Karl!

> > they get - if someone else can get "296", I can tell Karl his code is
> > broken or he misunderstood the RFC, or else I can show the result to
> > TGV and ask them for followup.
> 
> Talk to TGV.  Perhaps they are interpreting 296 to include link layer
> headers, etc?  Hmmm, 296 - 256 is 40.  Room for an IP/TCP header??
> 

see below...

> Well, the idea is to include in the table values that are known to occur
> in nature, and to ensure that the process converges as quickly as possible.
> If there is a "real" mtu in between, then it is definitely a bummer to
> run at 68, but if this is just a broken router problem, that is different.
> 
> 

Well, the interesting thing I'd discovered since writing that
original mail is that I was citing the wrong router in my path...
129.127.40.103 is not a TGV/MultiNet running Vax, that's my hop (the
next one along). The node that's 129.127.40.103 is a Xylogics Annex-I
terminal server running SLIP.

So we can surmise, I think, that the ip code in the Annex (at least
the rev I'm running, which was the latest until about two months ago)
is the thing that's a bit broken (looks to be working out the MTU
without accounting for ip header sizes correctly, doesn't it?)

If you have any contacts with Xylogics, and/or access to any other
links run via annexs, it might be interesting to check them out as
well and/or to try to tell Xylogics about this. Alas, time and lack
of good contacts from here won't make it easy for me to follow this
up with Xylogics myself.

Hmmm, I can point at another path that uses Annex Terminal Servers as
routers, locally - if you try talking to tdcsun.tpa.com.au, what sort
of MTU do you get, and from which node? I think the hop that's the
next one out from that node is run via an annex as well, and I can
talk to them and ask them (they're in Adelaide, same town as me, with
a similar technology of link).

> Thanks for making the test path available.  We had not previously included
> the table search feature in our implementation, but after testing on this
> link I am happy with the way my new code behaves.  If you get any
> further insight into the last hop behavior, let us know.
> 

Well, maybe the above will help out a bit more... see what you can
discern :-) I'm glad this path gave you something useful to test, anyway.

Regards,
   Simon

{------------------------------------------------}
{  Simon Hackett,  Internode Systems Pty Ltd     }
{  E-mail: simon@internode.com.au                }
{  Phone: +61 8 373 1020  Fax: +61 8 373 4911    }
{  Mail: PO Box 69, Daw Park, SA 5041 AUSTRALIA  }
{------------------------------------------------}



From karl@Mel-Brooks.TGV.COM  Mon Mar 29 18:38:21 1993
Received: by acetes.pa.dec.com; id AA15532; Mon, 29 Mar 93 18:38:21 -0800
Received: by inet-gw-1.pa.dec.com; id AA20178; Mon, 29 Mar 93 18:38:19 -0800
Received: from mel-brooks.empirical.com ([161.44.128.66]) by TGV.COM via INTERNET ;
          Mon, 29 Mar 93 18:34:28 PST
Received: from karl.william-j-le-petomaine.empirical.com by mel-brooks.empirical.com (4.1/SMI-4.1)
	id AA01975; Mon, 29 Mar 93 18:02:24 PST
Date: Mon, 29 Mar 93 18:02:24 PST
Message-Id: <9303300202.AA01975@mel-brooks.empirical.com>
To: simon@internode.com.au
Subject: Re: Status of RFC1191 (Path MTU Discovery)
From: karl@empirical.com (Karl Auerbach, Empirical Tools and Technologies, 408/427-5280)
Reply-To: karl@empirical.com
Cc: jt@mentat.com, mogul, simon@internode.com.au, mtudwg, karl@empirical.com
Sender: karl@Mel-Brooks.TGV.COM
Repository: empirical.com
Originating-Client: william-j-le-petomaine.empirical.com

 > Hmmm, I can point at another path that uses Annex Terminal Servers as
 > routers, locally - if you try talking to tdcsun.tpa.com.au, what sort

Here's my trace from here at the IETF.  I did it twice with
identical results.  This one is reporting MTU of 296.

			--karl--
======================================================================
trace tdcsun.tpa.com.au
1  gwIETF1.ietf.oar.net (198.30.254.1)  14 ms  16 ms  16 ms
2  (131.187.202.6)  26 ms  25 ms  25 ms
3  gwsot2.oar.net (131.187.76.2)  29 ms  27 ms  27 ms
4  columbus-sonic2.oar.net (131.187.75.5)  39 ms  37 ms  37 ms
5  clevelandpop-columbus.oar.net (131.187.71.6)  53 ms  50 ms  50 ms
6  (192.88.195.168)  56 ms  52 ms  52 ms
7  t1-0.Cleveland-cnss44.t3.ans.net (140.222.44.2)  63 ms  62 ms  61 ms
8  (140.222.41.5)  69 ms  64 ms  63 ms
9  t3-3.Cleveland-cnss40.t3.ans.net (140.222.40.4)  85 ms  64 ms  64 ms
10  t3-2.Chicago-cnss24.t3.ans.net (140.222.24.3)  75 ms  72 ms  75 ms
11  t3-1.San-Francisco-cnss8.t3.ans.net (140.222.8.2)  116 ms  116 ms  112 ms
12  t3-0.San-Francisco-cnss9.t3.ans.net (140.222.9.1)  116 ms  117 ms  114 ms
13  t3-0.enss144.t3.ans.net (140.222.144.1)  127 ms  117 ms  119 ms
14  ARC2.NSN.NASA.GOV (192.52.195.11)  133 ms  123 ms  125 ms
15  ARC5.NSN.NASA.GOV (192.100.12.5)  131 ms  129 ms  122 ms
16  usa.gw.au (132.160.240.2)  1285 ms  1421 ms  1651 ms
17  (139.130.4.1)  1818 ms  1981 ms  1624 ms
18 *  sa.gw.au (139.130.40.2)  1060 ms  900 ms
19  unisa.gw.au (139.130.248.2)  1050 ms  1148 ms  1303 ms
20  ungtwy.Underdale.UniSA.edu.au (136.169.26.6)  1416 ms  1671 ms  1643 ms
21  lvgtwy.Levels.UniSA.EDU.AU (130.220.36.3)  1789 ms  1574 ms  1644 ms
22  LV.Levels.UniSA.EDU.AU (130.220.16.6)  1575 ms  1539 ms  1434 ms
23  LV.Levels.UniSA.EDU.AU (130.220.16.6)  1467 ms !F (Trying MTU 1492)
  1637 ms !F (Trying MTU 1006)  1737 ms !F (Trying MTU 576)  1550 ms
 !F (Trying MTU 508)  1491 ms !F (Trying MTU 296) * * *
24 * * *
25 * * *
26 * * *
27 * * *
28  tdcsun.tpa.com.au (150.101.2.1)  1969 ms * *
Trace completed, MTU is 296 (excluding MAC header)


From simon@internode.com.au  Mon Mar 29 20:41:49 1993
Received: by acetes.pa.dec.com; id AA15748; Mon, 29 Mar 93 20:41:49 -0800
Received: by inet-gw-2.pa.dec.com; id AA18906; Mon, 29 Mar 93 20:41:18 -0800
Received: by wraith.internode.com.au (5.64+1.3.1+0.50/UA-5.23)
	id AA21384; Tue, 30 Mar 1993 14:06:19 +0930
From: Simon Hackett <simon@internode.com.au>
Message-Id: <9303300436.AA21384@wraith.internode.com.au>
Subject: Re: Status of RFC1191 (Path MTU Discovery)
To: karl@empirical.com
Date: Tue, 30 Mar 93 14:06:18 CST
Cc: simon@internode.com.au, jt@mentat.com, mogul, mtudwg
In-Reply-To: <9303300202.AA01975@mel-brooks.empirical.com>; from "Karl Auerbach, Empirical Tools and Technologies, 408/427-5280" at Mar 29, 93 06:02:24 pm
X-Mailer: ELM [version 2.4dev PL17]

>  > routers, locally - if you try talking to tdcsun.tpa.com.au, what sort
>
> Here's my trace from here at the IETF.  I did it twice with
> identical results.  This one is reporting MTU of 296.
>

The node reporting 296 here is actually another Vax running MultiNet - so
I think we can, after all, say that TGV are "doing it right" - and it's my
annex that isn't. In the case of this link, you hit the MTU==296 Vax router
node before you get deeper in and hit annexes. In the case of my link,
it's the other way around (you hit the annex first)

Simon


From mogul  Tue Mar 30 11:40:13 1993
Received: by acetes.pa.dec.com; id AA17710; Tue, 30 Mar 93 11:40:13 -0800
Message-Id: <9303301940.AA17710@acetes.pa.dec.com>
To: simon@internode.com.au
Cc: jt@mentat.com, mtudwg, karl@empirical.com
Subject: RFC1191 problems with Xylogics Annex-I [was: Status of RFC1191]
In-Reply-To: Your message of "Tue, 30 Mar 93 10:07:47 +0930."
             <9303300037.AA16321@wraith.internode.com.au> 
Date: Tue, 30 Mar 93 11:40:13 PST
From: Jeffrey Mogul <mogul>

I think it's time to declare victory and finish this discussion
(or at least, to stop pursuing it on the mtudwg mailing list, which
has over 60 listeners).

Let me summarize what we have learned:
    (1) The protocol, the RFC, and specifically the MTU table in the RFC,
    all seem to be blameless in this case.  (Other issues have been
    raised, but are not relevant here.)
    
    (2) The TGV/MultiNet code seems to be blameless.
    
    (3) The Xylogics Annex-I code seems to be calculating the MTU
    value incorrectly, perhaps by improperly accounting for packet
    header sizes.
    
Action items:
    (A) If my summary is wrong, please correct me.
    (B) If someone from Xylogics is listening, please investigate
	(and let us know that you are out there).
    (C) If someone listening has a contact at Xylogics, perhaps
    	you should ask your contact to get in touch with me.

Otherwise, I think we don't need any more traffic on this list,
related to the problem that Simon observed.

Thanks to all of you who pressed forward on this until the problem
was properly characterized.

-Jeff

From mogul  Mon Jul 19 16:30:24 1993
Received: by acetes.pa.dec.com; id AA23557; Mon, 19 Jul 93 16:30:24 -0700
Message-Id: <9307192330.AA23557@acetes.pa.dec.com>
To: mtudwg
Cc: David Delaney <delaney@plntree.isis.org>
Subject: RFC1191 and FDDI-Ethernet bridges
Date: Mon, 19 Jul 93 16:30:23 MDT
From: Jeffrey Mogul <mogul>

I'm sure someone out there can help David Delaney with this question.
My understanding is that FDDI-Ethernet bridges are required to do
fragmentation (in the FDDI->Ethernet direction) in order to make
IP work at all, and so should implement the router-side behavior
of RFC1191.  Perhaps someone out there with more experience can
confirm, correct, or elaborate on this.

-Jeff
------- Forwarded Message
Date: 	Mon, 19 Jul 1993 18:59:59 -0400
From: David Delaney <delaney@plntree.isis.org>
Message-Id: <162@plntree.isis.org>
To: mogul
Subject: RFC 1191 Path MTU Discovery

	  I am designing an FDDI-Ethernet bridge, and am most
	  interested in MTU discovery.

	  I would like to be able to ensure that a file server on an
	  FDDI network would be able to talk either to an FDDI host, at
	  4352 bytes per datagram, or through my bridge, which is not a
	  router, to an Ethernet host at 1492 bytes per datagram.

	  To serve this end, the file server would have to discover the
	  path MTU on a per host basis, through the bridge.  It seems
	  to me that my bridge could take advantage of the standard
	  method described in RFC 1191 by masquerading as a router for
	  the sole purpose of sending a frgmentation-needed-and-DF-set
	  ICMP message to the originator of datagrams the bridge
	  discards.

	  Will this work?  Will this bridge behaviour cause trouble?
	  Is there another approach to this problem available or being
	  developed?

          Thanks

Dave Delaney                | internet:  delaney@plntree.isis.org
PlainTree Systems Inc.      | uucp:      uunet.CA!uuisis!plntree!delaney
voice:  (613) 831-8300 x209 | papernet:  59 Iber Road
fax:    (613) 831-3283      |            Stittsville, Ontario Canada K2S 1E7

------- End of Forwarded Message


From mahdavi@tesla.psc.edu  Tue Jul 20 07:59:00 1993
Received: by acetes.pa.dec.com; id AA26391; Tue, 20 Jul 93 07:59:00 -0700
Received: by inet-gw-2.pa.dec.com; id AA00988; Tue, 20 Jul 93 07:58:57 -0700
Received: by tesla.psc.edu (5.57/Ultrix2.4-C cf:ab 9/11/90 --MM--)
	id AA15783; Tue, 20 Jul 93 10:58:50 -0400
Message-Id: <9307201458.AA15783@tesla.psc.edu>
To: Jeffrey Mogul <mogul>
Cc: mtudwg, David Delaney <delaney@plntree.isis.org>, mahdavi@tesla.psc.edu
Subject: Re: RFC1191 and FDDI-Ethernet bridges 
In-Reply-To: Your message of "Mon, 19 Jul 93 16:30:23 MDT."
             <9307192330.AA23557@acetes.pa.dec.com> 
Date: Tue, 20 Jul 93 10:58:50 -0400
From: mahdavi@tesla.psc.edu
X-Mts: smtp

This should work.  It looks like a grey area in the spec, though;
hosts generally expect there to be a single MTU for an 
attached network (didn't I just hear this discussion on the ATM 
list? :-).  This means that hosts which do _not_ implement MTU
discovery who are on the FDDI side of the bridge will use 4352 
for an MTU.  However, if they are implemented correctly, they should
never set the DF bit, which should make you safe.  There may also 
be implementations of MTU discovery that follow a different code
path for directly connected networks which makes MTU discovery
not work for this case (I'm not sure why someone would do this, 
but you never know).  I guess I'd want to get some input from 
people who have implemented MTU discovery on machines likely to 
be attached to your network to be sure there aren't any nasties
that will get you later on.

As Jeff says, you do need to implement the fragmentation code anyway;
I'm just not sure whether you can rely on MTU discovery to avoid 
fragmentation in all cases.  

--Jamshid


> I'm sure someone out there can help David Delaney with this question.
> My understanding is that FDDI-Ethernet bridges are required to do
> fragmentation (in the FDDI->Ethernet direction) in order to make
> IP work at all, and so should implement the router-side behavior
> of RFC1191.  Perhaps someone out there with more experience can
> confirm, correct, or elaborate on this.
> 
> -Jeff
> ------- Forwarded Message
> Date: 	Mon, 19 Jul 1993 18:59:59 -0400
> From: David Delaney <delaney@plntree.isis.org>
> Message-Id: <162@plntree.isis.org>
> To: mogul
> Subject: RFC 1191 Path MTU Discovery
> 
> 	  I am designing an FDDI-Ethernet bridge, and am most
> 	  interested in MTU discovery.
> 
> 	  I would like to be able to ensure that a file server on an
> 	  FDDI network would be able to talk either to an FDDI host, at
> 	  4352 bytes per datagram, or through my bridge, which is not a
> 	  router, to an Ethernet host at 1492 bytes per datagram.
> 
> 	  To serve this end, the file server would have to discover the
> 	  path MTU on a per host basis, through the bridge.  It seems
> 	  to me that my bridge could take advantage of the standard
> 	  method described in RFC 1191 by masquerading as a router for
> 	  the sole purpose of sending a frgmentation-needed-and-DF-set
> 	  ICMP message to the originator of datagrams the bridge
> 	  discards.
> 
> 	  Will this work?  Will this bridge behaviour cause trouble?
> 	  Is there another approach to this problem available or being
> 	  developed?
> 
>           Thanks
> 
> Dave Delaney                | internet:  delaney@plntree.isis.org
> PlainTree Systems Inc.      | uucp:      uunet.CA!uuisis!plntree!delaney
> voice:  (613) 831-8300 x209 | papernet:  59 Iber Road
> fax:    (613) 831-3283      |            Stittsville, Ontario Canada K2S 1E7
> 
> ------- End of Forwarded Message
> 

From mogul  Tue Jul 20 10:08:43 1993
Received: by acetes.pa.dec.com; id AA27044; Tue, 20 Jul 93 10:08:43 -0700
Message-Id: <9307201708.AA27044@acetes.pa.dec.com>
To: mahdavi@tesla.psc.edu
Cc: mtudwg, David Delaney <delaney@plntree.isis.org>
Subject: Re: RFC1191 and FDDI-Ethernet bridges 
In-Reply-To: Your message of "Tue, 20 Jul 93 10:58:50 EDT."
             <9307201458.AA15783@tesla.psc.edu> 
Date: Tue, 20 Jul 93 10:08:42 MDT
From: Jeffrey Mogul <mogul>

    This should work.  It looks like a grey area in the spec, though;
    hosts generally expect there to be a single MTU for an 
    attached network (didn't I just hear this discussion on the ATM 
    list? :-).  This means that hosts which do _not_ implement MTU
    discovery who are on the FDDI side of the bridge will use 4352 
    for an MTU.  However, if they are implemented correctly, they should
    never set the DF bit, which should make you safe.  There may also 
    be implementations of MTU discovery that follow a different code
    path for directly connected networks which makes MTU discovery
    not work for this case (I'm not sure why someone would do this, 
    but you never know).  I guess I'd want to get some input from 
    people who have implemented MTU discovery on machines likely to 
    be attached to your network to be sure there aren't any nasties
    that will get you later on.
    
    As Jeff says, you do need to implement the fragmentation code anyway;
    I'm just not sure whether you can rely on MTU discovery to avoid 
    fragmentation in all cases.  

Let me clarify something: although RFC1191 specifies a change in router
behavior (over the original ICMP spec in RFC791 and RFC792), this is to
make Path MTU Discovery more efficient.  The host behavior described in
RFC1191 will discover correct (although perhaps suboptimal) Path MTUs
as long as all "routers" correctly implement RFC791 and RFC792.

By "routers" I mean "things that can fragment an IP packet", and by
"correctly implement RFC791 and RFC792" I mean "obey the DF bit and
return the correct ICMP message if fragmentation is required".

The question that remains (at least for me, I am basically ignorant
about this) is whether there is any formally specified behavior for
FDDI-Ethernet bridges that requires them to obey DF and generate
ICMP messages.  I can imagine that people who implement such bridges
are doing so in the absence of a formal spec, and that some of these
implementors have elected to assume that DF is never set (and hence
that they don't have to implement the DF-related parts of RFC791/792.)

In my opinion, such implementors would be wrong, but what counts here
is not whether this is wrong but whether it is common; that is, whether
users are going to get bitten by this.

-Jeff

From mahdavi@tesla.psc.edu  Tue Jul 20 11:04:01 1993
Received: by acetes.pa.dec.com; id AA27575; Tue, 20 Jul 93 11:04:01 -0700
Received: by inet-gw-2.pa.dec.com; id AA11316; Tue, 20 Jul 93 11:03:59 -0700
Received: by tesla.psc.edu (5.57/Ultrix2.4-C cf:ab 9/11/90 --MM--)
	id AA16950; Tue, 20 Jul 93 14:03:56 -0400
Message-Id: <9307201803.AA16950@tesla.psc.edu>
To: Jeffrey Mogul <mogul>
Cc: mahdavi@tesla.psc.edu, mtudwg, David Delaney <delaney@plntree.isis.org>,
        mahdavi@tesla.psc.edu
Subject: Re: RFC1191 and FDDI-Ethernet bridges 
In-Reply-To: Your message of "Tue, 20 Jul 93 10:08:42 MDT."
             <9307201708.AA27044@acetes.pa.dec.com> 
Date: Tue, 20 Jul 93 14:03:55 -0400
From: mahdavi@tesla.psc.edu
X-Mts: smtp


> In my opinion, such implementors would be wrong, but what counts here
> is not whether this is wrong but whether it is common; that is, whether
> users are going to get bitten by this.

Alas, we don't actually use such bridges at the PSC, so I don't know 
what the common practice is.  I was just putting in my 2 bits based on
our experience with MTU discovery in our network (which mostly amounts 
to "I wish everyone would implement it.")

Is there anyone on the list that uses such bridges?

--Jamshid

From @mail.uunet.ca:plntree.isis.org!delaney@uuisis  Tue Jul 20 15:45:58 1993
Received: by acetes.pa.dec.com; id AA01636; Tue, 20 Jul 93 15:45:58 -0700
Received: by inet-gw-1.pa.dec.com; id AA08861; Tue, 20 Jul 93 15:45:57 -0700
Received: from uuisis by mail.uunet.ca with UUCP id <102301(5)>; Tue, 20 Jul 1993 18:44:33 -0400
Received: from plntree by uuisis.isis.org id aa01617; 20 Jul 93 18:43 EDT
Received: from cc:Mail by plntree.isis.org (2.0/Outmail)
	id Message-ID: <167@plntree.isis.org>; Tue, 20 Jul 93 18:43:13 EST
Date: 	Tue, 20 Jul 1993 19:43:13 -0400
From: David Delaney <delaney@plntree.isis.org>
Message-Id: <167@plntree.isis.org>
To: mahdavi@tesla.psc.edu
To: mogul
To: mtudwg

*To: David Delaney
Subject: RFC 1191 Path MTU Discovery and FDDI-Ethernet Bridges

    I know that some vendors of FDDI-Ethernet bridges have implemented
    IP fragmentation, even though IP fragmentation is defined at the
    network layer, and bridges are supposed to be ignorant of the network
    layer.  This solution is not available to me:  My FDDI-Ethernet bridge
    will be unable to perform the fragmentation.

    I was hoping that my bridge could get away with detecting and
    discarding frames that are too long for Ethernet, and sending the
    fragmentation-needed-and-DF-set ICMP message when the DF bit of
    the discarded frame is set, yet not implement other features
    of IP and ICMP (because it won't be able to.)

    Re the comment about one MTU per physical network: RFC 1191 suggests
    (recommends?, requires?) that PMTU discovery can make use of a per-
    active-destination route that must be cached to meet the needs of
    ICMP redirect message processing.  The PMTU discovery process would
    keep a separate PMTU for each active destination. Does anyone know if
    this sugestion has been followed often or universally by implementors
    of RFC 1191?  Does anyone know if this suggestion is followed for
    destinations on the same network? Or do hosts assume that the MTU of
    hosts on the same network must be the MTU of the network connection.
    This is crucial to my bridge, since
    bridged LANs are part of the same IP network. In short, for my bridge
    to work, each FDDI host must perform the RFC 1191 PMTU discovery process
    even with hosts on the same network.  Does this happen?

    If RFC 1191 hosts store a separate PMTU for all active destinations,
    even those on the same network, my bridge should work. Consider the
    case of a single physical network formed by my bridge
    interconnecting an FDDI LAN and an Ethernet LAN.  Datagrams destined
    to an Ethernet host from  RFC 1191 hosts on the FDDI LAN will always
    always have DF set if too big for the Ethernet. So my bridge should
    allow reliable communication in this case.

    Non-RFC 1191 hosts on the FDDI LAN will transmit datagrams to an Ethernet
    host that are too big for Ethernet, and which do not set the DF bit.
    Such FDDI hosts will not be able to communicate reliably with
    hosts on Ethernets directly connected to the FDDI LAN by my bridge.
    I am willing to advertise a restriction that FDDI hosts
    on an FDDI interconnected directly to Ethernets by my bridge MUST
    implement RFC 1191.  (I hope someone can assure me that
    this restriction will not be too restrictive.) The restriction would not
    apply to non-RFC 1191 FDDI hosts which are NOT part of the same physical
    network as my bridge, since such hosts would choose the lesser of
    the FDDI MTU, 4352 bytes, or 576 bytes, and would be able to
    communicate reliably with Ethernet hosts on Ethernets connected
    to my bridge.

    Dave Delaney

From mogul  Wed Jul 21 13:03:53 1993
Received: by acetes.pa.dec.com; id AA10652; Wed, 21 Jul 93 13:03:53 -0700
Message-Id: <9307212003.AA10652@acetes.pa.dec.com>
To: David Delaney <delaney@plntree.isis.org>
Cc: mtudwg
In-Reply-To: Your message of "Tue, 20 Jul 93 19:43:13 EDT."
             <167@plntree.isis.org> 
Date: Wed, 21 Jul 93 13:03:53 MDT
From: Jeffrey Mogul <mogul>

    I know that some vendors of FDDI-Ethernet bridges have implemented
    IP fragmentation, even though IP fragmentation is defined at the
    network layer, and bridges are supposed to be ignorant of the network
    layer.  This solution is not available to me:  My FDDI-Ethernet bridge
    will be unable to perform the fragmentation.

This will lead to major, unresolvable problems.

    I was hoping that my bridge could get away with detecting and
    discarding frames that are too long for Ethernet.

I do not believe that it is within the spirit of the IP specs for
a part of the network to silently discard a certain class of legal
packets.  Too much else in the protocol stack depends on best-effort
delivery, and in particular on a relatively high probability that
any packet which is sent will also be delivered.

    In short, for my bridge
    to work, each FDDI host must perform the RFC 1191 PMTU discovery process
    even with hosts on the same network.  Does this happen?

In short, no.  RFC1191 is almost certainly going to be an Elective
Standard for end-hosts (i.e., not Mandatory), and it will be a long
time before it is widely used.  It will probably never be used on every
FDDI host.  Also, I suspect that many end-host implementations will
not use PMTU discovery for "local" destinations, mostly to keep NFS
performance high.

    The restriction would not
    apply to non-RFC 1191 FDDI hosts which are NOT part of the same physical
    network as my bridge, since such hosts would choose the lesser of
    the FDDI MTU, 4352 bytes, or 576 bytes, and would be able to
    communicate reliably with Ethernet hosts on Ethernets connected
    to my bridge.

This is not reliable, either.  Many BSD-derived end-host implementations
have a flag variable called "subnetsarelocal", which, if set, means
that the test for local/remote is done based on IP network number,
not on subnet number.  In such a case, the host would try to send
4352-byte packets through a router onto your bridged network.  You
could try to ban the setting of this variable in a given network, but
I don't think you would succeed.  For example, DEC has several tens
of thousands of IP hosts using one IP network number, and there is no
way to force them all to be properly configured.

-Jeff

From art@opal.acc.com  Wed Jul 21 20:42:47 1993
Received: by acetes.pa.dec.com; id AA12693; Wed, 21 Jul 93 20:42:47 -0700
Received: by inet-gw-1.pa.dec.com; id AA22709; Wed, 21 Jul 93 20:42:45 -0700
Received: by opal.acc.com (4.1/SMI-4.0)
	id AA00299; Wed, 21 Jul 93 20:41:23 PDT
Date: Wed, 21 Jul 93 20:41:23 PDT
From: art@opal.acc.com (Art Berggreen)
Message-Id: <9307220341.AA00299@opal.acc.com>
To: delaney@plntree.isis.org, mogul
Subject: Nonfragmenting bridges
Cc: mtudwg

>
>    In short, for my bridge
>    to work, each FDDI host must perform the RFC 1191 PMTU discovery process
>    even with hosts on the same network.  Does this happen?
>
>In short, no.  RFC1191 is almost certainly going to be an Elective
>Standard for end-hosts (i.e., not Mandatory), and it will be a long
>time before it is widely used.  It will probably never be used on every
>FDDI host.  Also, I suspect that many end-host implementations will
>not use PMTU discovery for "local" destinations, mostly to keep NFS
>performance high.

I don't see how Path MTU Discovery really solves the problem.
Consider two of these bridges with an Ethernet between them and
end-systems on opposite FDDI rings:

	Node--FDDI---Bridge--Ethernet--Bridge--FDDI--Node

Maybe not the most practical configuration, but perfectly legal
(if you believe multi-media bridges should be legal).

The two end systems will believe that they are directly reachable
by one another and will attempt to use FDDI sized packets.  I don't
see anybody to do Path MTU discovery.

Art


From mogul  Thu Jul 22 12:05:09 1993
Received: by acetes.pa.dec.com; id AA15598; Thu, 22 Jul 93 12:05:09 -0700
Message-Id: <9307221905.AA15598@acetes.pa.dec.com>
To: art@opal.acc.com (Art Berggreen)
Cc: delaney@plntree.isis.org, mogul, mtudwg
Subject: Re: Nonfragmenting bridges 
In-Reply-To: Your message of "Wed, 21 Jul 93 20:41:23 PDT."
             <9307220341.AA00299@opal.acc.com> 
Date: Thu, 22 Jul 93 12:05:09 MDT
From: Jeffrey Mogul <mogul>

    >    In short, for my bridge
    >    to work, each FDDI host must perform the RFC 1191 PMTU
    >    discovery process
    >    even with hosts on the same network.  Does this happen?
    >
    >In short, no.  RFC1191 is almost certainly going to be an Elective
    >Standard for end-hosts (i.e., not Mandatory), and it will be a long
    >time before it is widely used.  It will probably never be used on every
    >FDDI host.  Also, I suspect that many end-host implementations will
    >not use PMTU discovery for "local" destinations, mostly to keep NFS
    >performance high.
    
    I don't see how Path MTU Discovery really solves the problem.
    Consider two of these bridges with an Ethernet between them and
    end-systems on opposite FDDI rings:
    
	    Node--FDDI---Bridge--Ethernet--Bridge--FDDI--Node
    
    Maybe not the most practical configuration, but perfectly legal
    (if you believe multi-media bridges should be legal).
    
    The two end systems will believe that they are directly reachable
    by one another and will attempt to use FDDI sized packets.  I don't
    see anybody to do Path MTU discovery.
    
This is getting a little confusing.  If those Bridges are proper,
fragmenting FDDI-Ether bridges, then things "work" whether or not
PMTU Discovery is used.  That is, if it is used (i.e., packets are
sent with DF set), then the Nodes discover the Ethernet MTU.  If
it is not used, then the Bridges fragment and the Nodes reassemble,
but this is legal and normally works OK.

However, if these Bridges are David's non-fragmenting bridges, then
things ONLY work if the Nodes do PMTU Discovery.  That is, if the Nodes
send packets with DF set, the Bridges will issue an ICMP and the
Nodes will learn the Ethernet MTU.  But if the nodes are not doing
PMTU discovery, then all the large packets they try to exchange
will fall into the bit bucket.

I don't think RFC1191 really says if the Nodes should be or should
not be setting DF when they think they are directly connected.  (In
fact, RFC1191 doesn't really "specify" anything for end-hosts.)  And
it seems reasonably to expect them NOT to set DF in such a case.  So
David shouldn't be counting on them to do so, and in any case cannot
count on the Nodes even being able to do so.

-Jeff

From @mail.uunet.ca:plntree.isis.org!delaney@uuisis  Thu Jul 22 13:56:20 1993
Received: by acetes.pa.dec.com; id AA16263; Thu, 22 Jul 93 13:56:20 -0700
Received: by inet-gw-1.pa.dec.com; id AA15906; Thu, 22 Jul 93 13:56:17 -0700
Received: from uuisis by mail.uunet.ca with UUCP id <101958(5)>; Thu, 22 Jul 1993 16:54:47 -0400
Received: from plntree by uuisis.isis.org id aa06469; 22 Jul 93 13:56 EDT
Received: from cc:Mail by plntree.isis.org (2.0/Outmail)
	id Message-ID: <173@plntree.isis.org>; Thu, 22 Jul 93 13:57:01 EST
Date: 	Thu, 22 Jul 1993 14:57:01 -0400
From: David Delaney <delaney@plntree.isis.org>
Message-Id: <173@plntree.isis.org>
To: art@opal.acc.com
To: mogul
Cc: mtudwg
Subject: Nonfragmenting bridges

          Hi Art

          The answer to your question derives from the fact that
          the PMTU discovery process operates between the originating
          host and intermediate gateways.

          The idea is that an FDDI-Ethernet bridge receiving a
          datagram too long for Ethernet would masquerade as a gateway
          solely for the purpose of interacting with the senders PMTU
          discovery process. When my bridge receives a datagram
          too long for Ethernet, it will have to discard it, or become
          much more expensive. (It can be inexpensive because it
          does not do fragmentation.) IEEE 802.1d actually specifies
          this as acceptable bridge behaviour.  I wanted to take
          advantage of the PMTU discovery process and send the
          originator a fragmentation-needed-and-DF-set message (when
          DF was set, of course)  as specified for the PMTU discovery
          process in RFC 1191, causing the originator to retry with a
          smaller PMTU.  For this strategy to produce no loss of
          datagrams, two (I think) conditions must be met:

          1: All hosts on an FDDI LAN directly connected to my bridge
          would have to implement PMTU discovery in interactions with
          all other hosts, including those on the same network.

          2: All hosts on remote FDDI networks would have to meet the
          same condition as 1, or always use 1492 or less
          (presumably 576) as the PMTU in interactions with hosts not
          on the same network.

          Jeff Mogul tells me that neither of these conditions are met
          often enough to warrant relying on their assumption.


Dave Delaney 
Plaintree Systems Inc
                                  
delaney@plntree.isis.org
59 Iber Road                  phone: (613) 831 8300 x209
Stittsville, Ontario Canad    fax:   (613) 831 3283
K2S 1E7

From @mail.uunet.ca:plntree.isis.org!delaney@uuisis  Thu Jul 22 13:57:40 1993
Received: by acetes.pa.dec.com; id AA16283; Thu, 22 Jul 93 13:57:40 -0700
Received: by inet-gw-1.pa.dec.com; id AA16035; Thu, 22 Jul 93 13:57:38 -0700
Received: from uuisis by mail.uunet.ca with UUCP id <102000(5)>; Thu, 22 Jul 1993 16:54:50 -0400
Received: from plntree by uuisis.isis.org id aa08990; 22 Jul 93 16:36 EDT
Received: from cc:Mail by plntree.isis.org (2.0/Outmail)
	id Message-ID: <175@plntree.isis.org>; Thu, 22 Jul 93 16:37:08 EST
Date: 	Thu, 22 Jul 1993 17:37:08 -0400
From: David Delaney <delaney@plntree.isis.org>
Message-Id: <175@plntree.isis.org>
To: mogul
Cc: mahdavi@tesla.psc.edu
Cc: art@opal.acc.com
Cc: reilly@tgv.com
Cc: mtudwg
Subject: Non-fragmenting FDDI-Ethernet Bridges

Hi Jeff,

Your reponse convinces me that I won't be able to rely on 
PMTU discovery to avoid datagram loss in a non-fragmenting 
FDDI-Ethernet bridge.

My problem is caused by the fact that I can design an inexpensive
non-fragmenting bridge for FDDI-EThernet. To enable 
it to fragment will greatly increase its cost.  

It would appear that IP does not permit the use of transparent
bridges that merely conform to IEEE 802.1d. At least not to interconnect 
between FDDI and Ethernet. IP seems to require IP fragmentation.

I suppose (?) I could require all hosts and gateways directly 
connected to an FDDI network that is directly connected 
to my bridge to be configured with an MTU of 1492 for that FDDI
network.  Or I could require them (?) to be configured for 
a maximum segment size of 1492 for that FDDI network.


Dave Delaney                  delaney@plntree.isis.org

Plaintree Systems Inc.      
59 Iber Road                  phone: (613) 831 8300 ext. 209
Stittsville, Ontario          fax: (613) 831 3283
Canada K2S 1E7    

From 72604.1576@CompuServe.COM  Thu Jul 22 16:47:52 1993
Received: by acetes.pa.dec.com; id AA17035; Thu, 22 Jul 93 16:47:52 -0700
Received: by inet-gw-1.pa.dec.com; id AA00718; Thu, 22 Jul 93 16:47:51 -0700
Received: by ihc.compuserve.com (5.65/5.930129sam)
	id AA23617; Thu, 22 Jul 93 11:59:51 -0400
Date: 22 Jul 93 19:45:38 EDT
From: David Delaney <72604.1576@CompuServe.COM>
To: <mtudwg>
Subject: help
Message-Id: <930722234538_72604.1576_CHN76-1@CompuServe.COM>

help


From dab@berserkly.cray.com  Thu Aug 12 11:32:01 1993
Received: by acetes.pa.dec.com; id AA04132; Thu, 12 Aug 93 11:32:01 -0700
Received: by inet-gw-1.pa.dec.com; id AA05414; Thu, 12 Aug 93 11:31:55 -0700
Received: from frenzy.cray.com by cray.com (4.1/CRI-MX 2.19)
	id AA29824; Thu, 12 Aug 93 13:29:14 CDT
Received: by frenzy.cray.com
	id AA00679; 4.1/CRI-5.6; Thu, 12 Aug 93 13:30:12 CDT
Date: Thu, 12 Aug 93 13:30:12 CDT
From: dab@berserkly.cray.com (David A. Borman)
Message-Id: <9308121830.AA00679@frenzy.cray.com>
To: mtudwg
Subject: MTU discovery implementation


I sent this message to Jeff Mogul, and he suggested I share it
with the mailing list (which I have now joined).

			-David Borman, dab@cray.com

To: mogul@pa.dec.com
Subject: Re: Status of RFC1191 (Path MTU Discovery)

Jeff,

Just thought that I'd let you know that Cray Research is shipping
support for Path MTU Discovery.  It's been in since UNICOS 6.0,
though we didn't turn it on by default until 6.1.  (We're now
getting ready to release 8.0, so our code has been out in the
field for several years.)  We've recently (in the last month or
two) gone back over our implementation and have bullet proofed it
as best as we are able.

What we haven't done yet is black-hole detection.  Has anyone
written anything up on this?  Our approach at this point is:

	1) If we are doing MTU discovery, and we are
	   retransmitting full packets, then before the Nth
	   retransmission, turn of MTU discovery for
	   this connection.

	2) Either:
		a) Leave the MTU where it is
		b) Drop the MTU to 576 (and save the old value)

	3) If the Nth retransmission, sent without the DF bit,
	   is ACKed, then assume that we have a "black hole".
	   (If we dropped the MTU to 576, restore it to what
	   it was.)  Pretend that we got back and old-style
	   Datagram Too Big message, dropping us down to the
	   next MTU in the internal table.

The obvious questions are 1) What value of N should be used for
deciding to do this? 2) What if the ACK comes back after the
N+1 retransmission?  Just turn back on MTU discovery and restore
the MTU?

I'll also mention that we ran into a router that returns
old-style Too Big messages that have the TCP portion of the
returned datagram as garbage, so we are unable to match it
to a particular TCP connection.  In that case, we adjust the
MTU in the route, and then when the TCP connection does its
next write, the IP layer notices that the packet is too big
for MTU in the route, and it returns EMSGSIZE.  This causes
tcp to realize that the MTU has changed, so it updates its
cached MTU value from the route.

			-David Borman, dab@cray.com


From mahdavi@tesla.psc.edu  Fri Aug 13 14:41:07 1993
Received: by acetes.pa.dec.com; id AA11807; Fri, 13 Aug 93 14:41:07 -0700
Received: by inet-gw-2.pa.dec.com; id AA16740; Fri, 13 Aug 93 14:41:06 -0700
Received: by tesla.psc.edu (5.57/Ultrix2.4-C cf:ab 9/11/90 --MM--)
	id AA04371; Fri, 13 Aug 93 17:41:00 -0400
Message-Id: <9308132141.AA04371@tesla.psc.edu>
To: dab@berserkly.cray.com (David A. Borman)
Cc: mtudwg, mahdavi@tesla.psc.edu
Subject: Re: MTU discovery implementation 
In-Reply-To: Your message of "Thu, 12 Aug 93 13:30:12 CDT."
             <9308121830.AA00679@frenzy.cray.com> 
Date: Fri, 13 Aug 93 17:40:59 -0400
From: mahdavi@tesla.psc.edu
X-Mts: smtp


> 	1) If we are doing MTU discovery, and we are
> 	   retransmitting full packets, then before the Nth
> 	   retransmission, turn of MTU discovery for
> 	   this connection.
> 
> 	2) Either:
> 		a) Leave the MTU where it is
> 		b) Drop the MTU to 576 (and save the old value)
> 
> 	3) If the Nth retransmission, sent without the DF bit,
> 	   is ACKed, then assume that we have a "black hole".
> 	   (If we dropped the MTU to 576, restore it to what
> 	   it was.)  Pretend that we got back and old-style
> 	   Datagram Too Big message, dropping us down to the
> 	   next MTU in the internal table.

I think you should add a feature that does a traceroute, finds out 
who the router vendor is, and sends them mail everytime this happens
(alternately, the network provider).  That should get the box 
fixed!

> The obvious questions are 1) What value of N should be used for
> deciding to do this? 2) What if the ACK comes back after the
> N+1 retransmission?  Just turn back on MTU discovery and restore
> the MTU?

This is a tough question.  In the case of a route flap, you could
have a reasonably long time to convergence (under RIP for example);
if you happened to send out your first packet just at the start of
the routing change, there could be a several second period of 
legitimate outage.  

Under normal circumstances, you'd like the value of N to be 
small, so that you don't wait for too long.  I guess the worst 
case thing would be that you would use a low MTU for a while 
(for example, under the circumstances I described above)
until TCP rechecked the MTU on the path.

Can anyone think of other pathological cases that might have 
worse consequences with a low value for N?  If not, I'd vote for
something like 3 or 5.

> I'll also mention that we ran into a router that returns
> old-style Too Big messages that have the TCP portion of the
> returned datagram as garbage, so we are unable to match it
> to a particular TCP connection.

I hope that the vendors of this router (and others like it) get
with the program on this.  MTU discovery makes a huge performance
difference in the wide area, and a lot of people seem to have the
mistaken opinion that it doesn't work right because of isolated
cases like this.  Host implementors (Cray is doing a good job of 
this) need to push MTU discovery out into the network more so that
the newer faster machines can take full advantage of newer and 
faster networks.

--Jamshid (who is now getting off of his soapbox :-)

From mogul  Fri Aug 13 14:45:33 1993
Received: by acetes.pa.dec.com; id AA11838; Fri, 13 Aug 93 14:45:33 -0700
Message-Id: <9308132145.AA11838@acetes.pa.dec.com>
To: mahdavi@tesla.psc.edu
Cc: mtudwg
Subject: Re: MTU discovery implementation 
In-Reply-To: Your message of "Fri, 13 Aug 93 17:40:59 EDT."
             <9308132141.AA04371@tesla.psc.edu> 
Date: Fri, 13 Aug 93 14:45:32 MDT
From: Jeffrey Mogul <mogul>

You write:
	MTU discovery makes a huge performance difference in the wide area

I'm curious: do you have measurements to back this up?  I expect it
might make a moderate performance difference, but "huge"?

If anyone has an easy way to make some reliable measurements, I hope
you can share them with the group.  The IESG and IAB may want to see
this kind of thing, when we are about to move to Full Standard.

Thanks
-Jeff

From mahdavi@tesla.psc.edu  Fri Aug 13 15:36:16 1993
Received: by acetes.pa.dec.com; id AA12165; Fri, 13 Aug 93 15:36:16 -0700
Received: by inet-gw-2.pa.dec.com; id AA18475; Fri, 13 Aug 93 15:36:15 -0700
Received: by tesla.psc.edu (5.57/Ultrix2.4-C cf:ab 9/11/90 --MM--)
	id AA04531; Fri, 13 Aug 93 18:36:14 -0400
Message-Id: <9308132236.AA04531@tesla.psc.edu>
To: Jeffrey Mogul <mogul>
Cc: mahdavi@tesla.psc.edu, mtudwg, mahdavi@tesla.psc.edu
Subject: Re: MTU discovery implementation 
In-Reply-To: Your message of "Fri, 13 Aug 93 14:45:32 MDT."
             <9308132145.AA11838@acetes.pa.dec.com> 
Date: Fri, 13 Aug 93 18:36:13 -0400
From: mahdavi@tesla.psc.edu
X-Mts: smtp

> You write:
> 	MTU discovery makes a huge performance difference in the wide area
> 
> I'm curious: do you have measurements to back this up?  I expect it
> might make a moderate performance difference, but "huge"?
> 
> If anyone has an easy way to make some reliable measurements, I hope
> you can share them with the group.  The IESG and IAB may want to see
> this kind of thing, when we are about to move to Full Standard.
> 

I could probably come up with a few numbers next week sometime; we
are tackling some connectivity performance issues anyway, so this 
shouldn't be hard.  A couple of obvious examples I can give:

1)  We currently use DS5000 routers internally.  They are entirely
performance limitted by packets per second (not bytes per second).
At 576 byte packets, we can run in the neighborhood of 300-400 KB/s.
With 4352 byte FDDI packets, we can run 8 times faster -- over 2 MB/s.
This applies all the way through the T3 backbone to other FDDI attached
sites.

2)  We are also fiddling with adjusting TCP parameters to get more 
from our networks.  One case I have been working on is a lossy T1 link.
In this case, I can manipulate the TCP window size to not quite stress
the network enough to cause packet loss, thus getting better performance.
With 1500 byte packets, my measurements show I can open the window twice
as wide as for 512 byte packets (i.e. there is a component of the packet
loss character based on packets per second).  This should allow me to 
get a factor of 2 improvement with 1500 byte packets in TCP performance.
(Unfortunately, the machine on the other end of this line doesn't do 
MTU discovery, so I haven't yet verified this.  I hope to be able to do 
this right soon).

It seems that my two most common answers to performance complaints
over the network are RFC1191 and 1323.  With even faster ATM networks
right around the corner (with bigger MTUs), I expect that not using
MTU discovery will be more and more of a performance hit.

I'll send some numbers to the list when I can.

--Jamshid

From minshall@wc.novell.com  Mon Aug 16 08:52:04 1993
Received: by acetes.pa.dec.com; id AA18778; Mon, 16 Aug 93 08:52:04 -0700
Received: by inet-gw-1.pa.dec.com; id AA07986; Mon, 16 Aug 93 08:52:02 -0700
Received: from  by wc.novell.com (4.1/smi4.1.1.v91190)
	id AB21713; Mon, 16 Aug 93 08:43:27 PDT
Date: Mon, 16 Aug 93 08:43:27 PDT
Message-Id: <9308161543.AB21713@wc.novell.com>
To: mtudwg
From: minshall@wc.novell.com
X-Sender: minshall@optics.wc.novell.com (Unverified)
Subject: black holes and path MTU

Does anyone know of any experience implementing path-MTU in the face of
routers that don't return ANY ICMP?  I.e., anyone who actually tried to
make path-MTU work in that environment, whether or not they were
successful?

Thanks in advance,

Greg Minshall    	       	       	       	minshall@wc.novell.com
Novell, Inc.    	       	       	       	 +1 510 975-4507


From bound@zk3.dec.com  Wed Sep  1 05:27:03 1993
Received: by acetes.pa.dec.com; id AA13751; Wed, 1 Sep 93 05:27:03 -0700
Received: by jove.pa.dec.com; id AA06969; Wed, 1 Sep 93 05:27:02 -0700
Received: by xirtlu.zk3.dec.com; id AA09535; Wed, 1 Sep 1993 08:26:59 -0400
Message-Id: <9309011226.AA09535@xirtlu.zk3.dec.com>
To: mtudwg@wrl.dec.com
Cc: bound@zk3.dec.com
Subject: PATH MTU Pub Code
Date: Wed, 01 Sep 93 08:26:58 -0400
From: bound@zk3.dec.com
X-Mts: smtp

Hello,

My name is Jim Bound and I am an engineer at Digital Equipment Corp. I
am going to implement PATH MTU.  Are there an public domain sources or 
code base someone is willing to share? If so, could I get a pointer to 
them?  Anyother pointers that would be useful to me is greatly appreciated 
too. 

thanks
/jim


From mogul  Tue Sep 21 12:57:56 1993
Received: by acetes.pa.dec.com; id AA09810; Tue, 21 Sep 93 12:57:56 -0700
Message-Id: <9309211957.AA09810@acetes.pa.dec.com>
To: mtudwg
Cc: kenneth@hal.com (Kenneth A. Smith)
Subject: Re: RFC 1191 
In-Reply-To: Your message of "Tue, 21 Sep 93 12:53:42 PDT."
             <9309211953.AA09412@hal.com> 
Date: Tue, 21 Sep 93 12:57:55 MDT
From: Jeffrey Mogul <mogul>

Kenneth Smith (kenneth@hal.com) asks:
	Would you happen to know of any freely available implementations
	of RFC 1191 for BSD derived TCP/IP stacks???

Please reply to him (and the mailing list), not to me.

Thanks
-Jeff

P.S.: Kenneth, to join the mailing list, send your request to
	mtudwg-request@wrl.dec.com


From bound@zk3.dec.com  Mon Sep 27 09:07:55 1993
Received: by acetes.pa.dec.com; id AA03222; Mon, 27 Sep 93 09:07:55 -0700
Received: by pobox1.pa.dec.com; id AA21833; Mon, 27 Sep 93 09:07:53 -0700
Received: by xirtlu.zk3.dec.com; id AA00360; Mon, 27 Sep 1993 12:07:52 -0400
Message-Id: <9309271607.AA00360@xirtlu.zk3.dec.com>
To: mtudwg@pa.dec.com
Subject: Re: RFC 1191 
In-Reply-To: Your message of "Tue, 21 Sep 93 12:57:55 MDT."
             <9309211957.AA09810@acetes.pa.dec.com> 
Date: Mon, 27 Sep 93 12:07:52 -0400
From: bound@zk3.dec.com
X-Mts: smtp

I would also be interested in any public domain implementations or code
base anyone could share for PATH MTU.  

thanks
/jim


From deering@parc.xerox.com  Thu Oct 14 17:48:52 1993
Received: by acetes.pa.dec.com; id AA07391; Thu, 14 Oct 93 17:48:52 -0700
Received: by inet-gw-1.pa.dec.com; id AA18793; Thu, 14 Oct 93 17:48:52 -0700
Received: from skylark.parc.xerox.com ([13.2.116.7]) by alpha.xerox.com with SMTP id <11789>; Thu, 14 Oct 1993 17:47:23 PDT
Received: from localhost by skylark.parc.xerox.com with SMTP id <12171>; Thu, 14 Oct 1993 17:47:13 -0700
To: mtudwg
Cc: mintz@hpinpcb.cup.hp.com
Subject: [Ken Mintz: RFC-1191: max next-hop mtu?]
Date: 	Thu, 14 Oct 1993 17:47:12 PDT
Sender: Steve Deering <deering@parc.xerox.com>
From: Steve Deering <deering@parc.xerox.com>
Message-Id: <93Oct14.174713pdt.12171@skylark.parc.xerox.com>

Going through my email backlog, I found the following query that I
failed to answer.  I am forwarding it to the MTU Discovery Working
Group's mailing list, because I don't know the answer, but someone
out there must...

Steve

------- Forwarded Message

Date:	Wed, 8 Sep 1993 15:24:08 -0700
From:	Ken Mintz <mintz@hpinpcb.cup.hp.com>
Subject: RFC-1191: max next-hop mtu?
To:	deering.PARC@xerox.com

Steve,

In RFC-1191 (p.6, para.2), the note warns that we should not use (TCP MSS)
of 65495 (65535 - 40) in deference to possible sign-bit defects in some IP 
implementations.

Does the RFC really mean that we should not set the next-hop-MTU field to
more than 32767, and therefore TCP MSS should not be more than 32727, in
deference to this problem?

Afterall, any sign-bit problems arise when we exceed 32767 in a 16-bit
integer.  I believe 65495 is already well past the problem point.

By the way, are you aware of any actual such sign-bit defects in products
today?  (I'm sure I will be asked that question.)

Thanks for any assistance.

--- Ken Mintz
   Hewlett-Packard Co., Information Networks Div
   mintz@cup.hp.com, 408-447-3732

------- End of Forwarded Message


From glass@sun-lamp.cs.berkeley.edu  Tue Apr 12 11:58:49 1994
Received: by acetes.pa.dec.com; id AA26585; Tue, 12 Apr 94 11:58:49 -0700
Received: by jove.pa.dec.com; id AA04377; Tue, 12 Apr 94 11:58:46 -0700
Received: from sun-lamp.CS.Berkeley.EDU by inet-gw-2.pa.dec.com (5.65/21Mar94)id AA01391; Tue, 12 Apr 94 11:54:42 -0700
Received: from localhost (localhost [127.0.0.1]) by sun-lamp.cs.berkeley.edu (8.6.8/8.6.6) with SMTP id LAA23183 for <mtudwg@wrl.dec.com>; Tue, 12 Apr 1994 11:52:05 -0700
Message-Id: <199404121852.LAA23183@sun-lamp.cs.berkeley.edu>
X-Authentication-Warning: sun-lamp.cs.berkeley.edu: Host localhost didn't use HELO protocol
To: mtudwg@wrl.dec.com
Subject: path MTU discovery implementations
Date: Tue, 12 Apr 1994 11:52:03 -0700
From: Adam Glass <glass@sun-lamp.cs.berkeley.edu>


Hi,

I'm looking for a RFC 1191 implementation to incorporate into the
NetBSD TCP/IP protocol stack.  NetBSD is a freely-redistributable
BSD-style UNIX that runs on some 6 architectures, with more ports in
the works.  NetBSD is currently based on the Berkeley Net-2 release,
to be upgraded to 4.4-lite soon.

Anyway, we would like to add path MTU discovery support to our protocol
stack.  Before we do this on our own (based completely on the RFC),
are you aware of any freely available implementations for BSD-style
protocol stacks?.  Even a file of diffs would be helpful.

Please feel free to redirect me as you feel appropriate.

later,
Adam Glass
NetBSD project

From mogul  Wed Jun 15 11:12:17 1994
Received: by acetes.pa.dec.com; id AA22126; Wed, 15 Jun 94 11:12:17 -0700
Message-Id: <9406151812.AA22126@acetes.pa.dec.com>
To: mtudwg
Subject: FYI: a CLNP version of Path MTU Discovery (based on RFC1191)
Date: Wed, 15 Jun 94 11:12:16 MDT
From: Jeffrey Mogul <mogul>

(Forwarded from the IETF-announce mailing list)

Sender: ietf-announce-request@IETF.CNRI.Reston.VA.US
Subject: I-D ACTION:draft-ietf-tuba-mtu-01.txt

A Revised Internet-Draft is available from the on-line Internet-Drafts 
directories. This draft is a work item of the TCP/UDP Over CLNP-Addressed 
Networks Working Group of the IETF.                                        

       Title     : CLNP Path MTU Discovery                                 
       Author(s) : D. Piscitello
       Filename  : draft-ietf-tuba-mtu-01.txt
       Pages     : 17
       Date      : 06/03/1994

This memo describes a technique for dynamically discovering the maximum 
transmission unit (MTU) of an arbitrary CLNP path. The mechanism described 
here is applicable to both "pure-stack" OSI as well as TUBA/CLNP 
environments, i.e., environments where Internet transport protocols (UDP 
and TCP) are operated over CLNP. This technique might not in all cases 
discover the optimum Path MTU, but it will always choose a Path MTU as 
accurate as, and in many cases more accurate than, the Path MTU that would 
be chosen by current practice.                                             

Internet-Drafts are available by anonymous FTP.  Login with the	
username "anonymous" and password "guest".  After logging in,
Type "cd internet-drafts".
     "get draft-ietf-tuba-mtu-01.txt".
 
Internet-Drafts directories are located at:	
     o  US East Coast                            
        Address:  ds.internic.net (198.49.45.10)	
     o  US West Coast                            
        Address:  ftp.isi.edu (128.9.0.32)  	
     o  Pacific Rim                              
        Address:  munnari.oz.au (128.250.1.21)	
     o  Europe                                   
        Address:  nic.nordu.net (192.36.148.17)	
	                                                
Internet-Drafts are also available by mail.	
	                                                
Send a message to:  mailserv@ds.internic.net. In the body type: 
     "FILE /internet-drafts/draft-ietf-tuba-mtu-01.txt".

From sunilg@forge.tandem.com  Fri Dec 16 11:06:52 1994
Received: by acetes.pa.dec.com; id AA11242; Fri, 16 Dec 94 11:06:52 -0800
Received: by pobox1.pa.dec.com; id AA29511; Fri, 16 Dec 94 11:06:51 -0800
Received: from suntan.tandem.com by inet-gw-3.pa.dec.com (5.65/10Aug94)id AA18299; Fri, 16 Dec 94 11:01:42 -0800
Received: from hydrogen.forge.tandem.com by suntan.Tandem.com (4.1/suntan5.940222) for mtudwg@decwrl.dec.comid AA05697; Fri, 16 Dec 94 10:59:36 PST
Received: from tensixty.forge.tandem.com by hydrogen.forge.tandem.com (4.1/6main.930723)id AA09166; Fri, 16 Dec 94 10:59:35 PST
Received: by tensixty.forge.tandem.com (4.1/6nospool.930723)id AA04182; Fri, 16 Dec 94 11:03:36 PST
Date: Fri, 16 Dec 94 11:03:36 PST
From: sunilg@forge.tandem.com
Message-Id: <9412161903.AA04182@tensixty.forge.tandem.com>
To: mtudwg@decwrl.dec.com
Subject: PATH MTU


Hi,
    I am going thru the 4.4 BSD Lite code looking for the PATH MTU (RFC
    1191) implementation at the end nodes.  I believe that it's not there.
    (The router part with the new ICMP message is there.)  Do you know if
    anyone has implemented this in public domain?

Sunil

From pal@ironwood.cray.com  Thu Feb  9 11:54:45 1995
Received: by acetes.pa.dec.com; id AA26815; Thu, 9 Feb 95 11:54:45 -0800
Received: by jove.pa.dec.com; id AA00391; Thu, 9 Feb 95 11:54:34 -0800
Received: from timbuk.cray.com by inet-gw-1.pa.dec.com (5.65/10Aug94)id AA21921; Thu, 9 Feb 95 11:48:17 -0800
Received: from sdiv.cray.com (ironwood.cray.com [128.162.21.36]) by timbuk.cray.com (8.6.9/CRI-fence-1.4) with SMTP id NAA23725 for <mtudwg@wrl.dec.com>; Thu, 9 Feb 1995 13:30:15 -0600
Received: from poplar011 by sdiv.cray.com (5.0/CRI-5.15.b.orgabbr Sdiv)id AA05771; Thu, 9 Feb 1995 13:30:14 -0600
From: pal@ironwood.cray.com (Phil Laverdiere)
Received: by poplar011 (5.0/btd-b3)          id AA27637; Thu, 9 Feb 1995 13:30:14 -0600
Message-Id: <9502091930.AA27637@poplar011>
Date: Thu, 9 Feb 1995 13:30:14 -0600
To: mtudwg@wrl.dec.com
Subject: mtu discovery via NFS
Content-Length: 228

Has anyone ever considered doing mtu discovery with the NFS protocol?
Since NFS does retransimit packets, it would seem to be possible.

Anyone ever try to make this work?  Or is this just a bad idea? 

Thanks,
Phil Laverdiere


From mogul  Thu Feb  9 12:01:10 1995
Received: by acetes.pa.dec.com; id AA26873; Thu, 9 Feb 95 12:01:10 -0800
Message-Id: <9502092001.AA26873@acetes.pa.dec.com>
To: pal@ironwood.cray.com (Phil Laverdiere)
Cc: mtudwg@wrl.dec.com
Subject: Re: mtu discovery via NFS 
In-Reply-To: Your message of "Thu, 09 Feb 95 13:30:14 CST."             <9502091930.AA27637@poplar011> 
Date: Thu, 09 Feb 95 12:01:10 PST
From: Jeffrey Mogul <mogul>

    Has anyone ever considered doing mtu discovery with the NFS protocol?
    Since NFS does retransimit packets, it would seem to be possible.

    Anyone ever try to make this work?  Or is this just a bad idea? 

I'm not sure anyone has actually implemented.  We considered it
during the design process for RFC1191.  My guess is that for
clients and servers on the same LAN, NFS probably performs better
using UDP fragmentation, but for "remote" clients (separated from
the server by a router), it may make sense to do MTU discovery.
This would avoid the nasty performance surprises sometimes seen.
However, if the router(s) in question are reasonably fast, MTU
discovery could reduce best-case performance slightly.

-Jeff

From craig@aland.bbn.com  Thu Feb  9 15:31:09 1995
Received: by acetes.pa.dec.com; id AA28917; Thu, 9 Feb 95 15:31:09 -0800
Received: by jove.pa.dec.com; id AA04564; Thu, 9 Feb 95 15:31:08 -0800
Received: from uu2.psi.com by inet-gw-2.pa.dec.com (5.65/10Aug94)id AA27294; Thu, 9 Feb 95 15:28:16 -0800
Received: from port10.sunnyvale.ca.pub-ip.psi.net by uu2.psi.com (5.65b/4.0.071791-PSI/PSINet) via SMTP;id AA24513 for mtudwg@wrl.dec.com; Thu, 9 Feb 95 18:25:25 -0500
Received: from localhost by aland.bbn.com (8.6.4/3.1.090690-BBN)id PAA04930; Thu, 9 Feb 1995 15:25:40 -0800
Message-Id: <199502092325.PAA04930@aland.bbn.com>
To: pal@ironwood.cray.com (Phil Laverdiere)
Cc: mtudwg@wrl.dec.com
Subject: Re: mtu discovery via NFS 
In-Reply-To: Your message of Thu, 09 Feb 95 13:30:14 -0600.             <9502091930.AA27637@poplar011> 
From: Craig Partridge <craig@aland.bbn.com>
Date: Thu, 09 Feb 95 15:25:38 -0800
Sender: craig@aland.bbn.com


Bill Nowicki did some work (c. 1987??) that both estimated MTU and the
congestion window over a link for long-distance NFS.

Craig

    Has anyone ever considered doing mtu discovery with the NFS protocol?
    Since NFS does retransimit packets, it would seem to be possible.

    Anyone ever try to make this work?  Or is this just a bad idea? 

    Thanks,
    Phil Laverdiere


From nordmark@jurassic-248.Eng.Sun.COM  Mon Feb 13 13:04:42 1995
Received: by acetes.pa.dec.com; id AA09637; Mon, 13 Feb 95 13:04:42 -0800
Received: by jove.pa.dec.com; id AA26375; Mon, 13 Feb 95 13:04:42 -0800
Received: from Sun.COM by inet-gw-2.pa.dec.com (5.65/10Aug94)id AA09463; Mon, 13 Feb 95 12:55:22 -0800
Received: from Eng.Sun.COM (engmail1.Eng.Sun.COM) by Sun.COM (sun-barr.Sun.COM)id AA20211; Mon, 13 Feb 95 12:52:43 PST
Received: from jurassic.Eng.Sun.COM (jurassic-248.Eng.Sun.COM) by Eng.Sun.COM (5.x/SMI-5.3)id AA10387; Mon, 13 Feb 1995 12:52:39 -0800
Received: from bobo.Eng.Sun.COM by jurassic.Eng.Sun.COM (SMI-8.6.9/SMI-SVR4)id MAA23847; Mon, 13 Feb 1995 12:52:37 -0800
Received: by bobo.Eng.Sun.COM (SMI-8.6.9/SMI-SVR4)id MAA18810; Mon, 13 Feb 1995 12:52:28 -0800
Date: Mon, 13 Feb 1995 12:52:28 -0800
From: nordmark@jurassic-248.Eng.Sun.COM (Erik Nordmark)
Message-Id: <199502132052.MAA18810@bobo.Eng.Sun.COM>
To: mtudwg@wrl.dec.com
Subject: Re: mtu discovery via NFS
Mime-Version: 1.0


> Has anyone ever considered doing mtu discovery with the NFS protocol?
> Since NFS does retransimit packets, it would seem to be possible.
> 
> Anyone ever try to make this work?  Or is this just a bad idea? 

I don't know of any work that would make NFS change its read and write
size based on the path MTU. As Jeff pointed out in the LAN case performance
is much better using IP fragmentation. And since NFS over TCP is becomming
more commonplace I think the utility of changing NFS is pretty small.

However, Solaris 2.X is using path MTU discovery to do optimal
source fragmentation (with no fragmentation at the routers) for NFS
and other UDP applications.
This results in fewer fragments hence improves performance over lossy
paths. 

   Erik


